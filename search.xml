<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python多线程</title>
      <link href="2021/03/12/python-duo-xian-cheng/"/>
      <url>2021/03/12/python-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>进程是操作系统中正在执行的不同应用程序的一个实例</p><p>线程是进程中的一个实体，是被操作系统独立调度和分派处理时间的基本单位</p><p><strong>线程的优缺点：</strong></p><ul><li>并发处理，因而特别适合需要同时执行多个操作的场合</li><li>解决用户响应性能和多任务的问题</li><li>引入了资源共享和同步等问题</li></ul><p>python3创建多线程主要有两种方法：函数、类</p><p>python3内置模块threading.Thread，可以很方便的创建多线程，threading.Thread()一般接收2个参数：</p><ul><li>线程函数名：要放置线程让其后台执行的函数，由用户自定义</li><li>线程函数的参数：线程函数名所需的参数，以tuple形式传入，如果不需要参数，可以不制定。</li></ul><p>自定义的类，两个要求：</p><ul><li>必须继承threading.Thread这个父类</li><li>必须重写init()和run()方法。run()方法相当于第一种方法中的线程函数，可以写自己需要的业务逻辑代码，在start()后会自动调用</li></ul><pre class=" language-python"><code class="language-python">threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>group<span class="token operator">=</span>None<span class="token punctuation">,</span>target<span class="token operator">=</span>None<span class="token punctuation">,</span>name<span class="token operator">=</span>None<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>kwars<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>group: 应该为None</li><li>target: 可以传入一个函数用于run()方法调用</li><li>name: 线程名默认使用“Thread.N”</li><li>args: 元组，表示传入target函数的参数</li><li>kwargs: 字典，传入target函数中关键字参数</li></ul><p><strong>属性：</strong></p><ul><li>name    #线程表示，没有任何语义</li><li>daemon    #布尔值，如果是守护线程为True，不是为False，主线程不是守护线程，默认False</li></ul><p><strong>类方法：</strong></p><ul><li>run()    #用以表示线程活动的方法</li><li>start()    #启动线程活动</li><li>join([time])    #等待至线程中止。阻塞调用线程直至线程的join()方法被调用中止、正常退出或者抛出未处理的异常，或者是可选的超时发生。在于线程运行完之前，该子线程的父线程将一直被阻塞。</li><li>isAlive():    返回线程是否活动的</li><li>getName():    返回线程名</li><li>setName():    设置线程名</li></ul><p>python的_thread模块提供了基本的线程和互斥锁支持，threading模块则提供了功能更全面的线程控制机制以及信号量机制。</p><h1 id="二、创建和启动多线程"><a href="#二、创建和启动多线程" class="headerlink" title="二、创建和启动多线程"></a>二、创建和启动多线程</h1><ul><li><strong>使用start_new_thread函数创建线程</strong></li></ul><p>thread.start_new_thread(function,’args’,[kwargs])    #创建一个新线程并返回其标识符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用_thread模块的start_new_thread函数创建线程</span><span class="token keyword">import</span> _thread<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>        thread_id<span class="token operator">=</span>_thread<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time{1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#使用start_new_thread()函数创建2个线程</span>    _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程</span>    _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>使用Thread对象创建线程</strong><br>​​​​​​​<br>Thread(target=None,name=None,args=(),kwargs={})    #构造函数</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>        thread_id<span class="token operator">=</span>threading<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time:{1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>timer<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>timer<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae74073.jpg" alt=""></p><ul><li><strong>自定义派生于Thread的对象</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#通过声明Thread派生类，创建和启动新线程</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>        self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval    <span class="token comment" spellcheck="true">#对象属性</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-interval秒</span>            thread_id<span class="token operator">=</span>threading<span class="token punctuation">.</span>get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程标识符</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Thread:{0} Time:{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>线程加入join()</strong></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#睡眠1秒</span>            t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} at {1}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程t1结束'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建线程   </span>    t1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t1'</span>    <span class="token comment" spellcheck="true">#设置线程名称</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#启动线程</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始等待线程(t1)2s'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程等待线程(t1)2s结束'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始等待线程结束'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><strong>用户线程和daemon线程：</strong><br>​​​​​​​ <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>      self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval    <span class="token comment" spellcheck="true">#对象属性</span>  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取当前线程</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'开始'</span><span class="token punctuation">)</span>      time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#延迟self.interval秒</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThreadDaemon</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>      threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>interval<span class="token operator">=</span>interval  <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'开始'</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'daemon线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'正在运行'</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线程'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程开始'</span><span class="token punctuation">)</span>  t1<span class="token operator">=</span>MyThread<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  t2<span class="token operator">=</span>MyThreadDaemon<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  t1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t1'</span>  t2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'t2'</span>  t2<span class="token punctuation">.</span>daemon<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token comment" spellcheck="true">#设置为daemon</span>  t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>  test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://www.hualigs.cn/image/604b8bae40e03.jpg" alt=""></li></ul><h1 id="三、线程同步"><a href="#三、线程同步" class="headerlink" title="三、线程同步"></a>三、线程同步</h1><h2 id="1-基于原语锁（Lock-RLock对象）的简单同步"><a href="#1-基于原语锁（Lock-RLock对象）的简单同步" class="headerlink" title="1. 基于原语锁（Lock/RLock对象）的简单同步"></a>1. 基于原语锁（Lock/RLock对象）的简单同步</h2><p><strong>用锁使多线程同时操作同一资源时不产生混乱</strong></p><ul><li>Lock是可用的最低级的同步指令。Lock处于锁定状态时，不被特定的线程拥有。Lock包含两种状态——锁定和非锁定，以及两个基本的方法。</li><li>可以认为Lock有一个锁定池，当线程请求锁定时，将线程至于池中，直到获得锁定后出池。池中的线程处于状态图中的同步阻塞状态。</li><li>RLock（可重入锁）是一个可以被同一个线程请求多次的同步指令。RLock使用了“拥有的线程”和“递归等级”的概念，处于锁定状态时，RLock被某个线程拥有。拥有RLock的线程可以再次调用acquire()，释放锁时需要调用release()相同次数。</li><li>可以认为RLock包含一个锁定池和一个初始值为0的计数器，每次成功调用acquire()/release()，计数器将+1/-1，为0时锁处于未锁定状态。</li><li>简言之：Lock属于全局，RLock属于线程。</li><li>构造方法：Lock(), Rlock()（推荐使用Rlock()）</li><li>实例方法：<ul><li>acquire([timeout]): 尝试获得锁定。使线程进入同步阻塞状态。</li><li>release(): 释放锁。使用前线程必须已获得锁定，否则将抛出异常。</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目：使用lock语句同步代码块示例。创建工作线程，模拟银行现金账户取款。多个线程同时执行取款操作时，如果不使用同步处理，会造成账户余额混乱；尝试使用同步锁对象Lock，以保证多个线程同时执行取款操作时，银行现金账户取款的有效和一致。</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token punctuation">,</span>random<span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#继承threading.Thread</span>    lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建锁</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#构造函数</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#调用父类构造函数</span>        Account<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount    <span class="token comment" spellcheck="true">#账户金额</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>withdraw<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取款</span>    <span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取锁，注释不使用同步处理</span>        t<span class="token operator">=</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span>        a<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> Account<span class="token punctuation">.</span>amount<span class="token operator">&lt;</span>a<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}交易失败，取款前余额：{1}，取款额：{2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>amount<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>            Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#拒绝交易</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机睡眠0-5秒</span>        prev<span class="token operator">=</span>Account<span class="token punctuation">.</span>amount        Account<span class="token punctuation">.</span>amount<span class="token operator">-=</span>a    <span class="token comment" spellcheck="true">#取款</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}取款前余额：{1}，取款额：{2}，取款后额：{3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>prev<span class="token punctuation">,</span>a<span class="token punctuation">,</span>Account<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span>        Account<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#释放锁。注释不使用同步处理</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#创建5个线程对象并启动</span>        Account<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">=</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae5a749.jpg" alt=""></p><h2 id="2-基于条件变量（Condition对象）的同步和通信"><a href="#2-基于条件变量（Condition对象）的同步和通信" class="headerlink" title="2. 基于条件变量（Condition对象）的同步和通信"></a>2. 基于条件变量（Condition对象）的同步和通信</h2><ul><li>Condition（条件变量）通常与一个锁关联。需要在多个Condition中共享一个锁时，可以传递一个Lock/RLock实例给构造方法，否则它将自己生成一个RLock实例。</li><li>除了Lock带有的锁定池外，Condition还包含一个等待池，池中的线程处于等待阻塞状态，直到另一线程调用notify()/notifyAll()通知；得到通知后线程进入锁定池等待锁定。</li><li>构造方法：Condition([lock/rlock])</li><li>实例方法：<ul><li>acquire([timeout])/release()：调用关联的锁的相应方法。</li><li>wait([timeout])：调用这个方法将使线程进入Condition的等待池等待通知，并释放锁。先释放获得的锁，然后阻塞，直到被唤醒或者超时，一旦被唤醒或者超时，会重新获取锁（应该说抢锁），然后返回。</li><li>notify()：从等待池挑选一个线程并通知，收到通知的线程将自动调用acquire()尝试获取锁定（进入锁定池）；其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li><li>notifyAll()：通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常。</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目：将10000000递减到0程序终止，用单线程来执行，完成时间是多少？用多线程又会是多少？</span><span class="token comment" spellcheck="true">#任务</span><span class="token keyword">def</span> <span class="token function">decr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        n<span class="token operator">-=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#单线</span><span class="token keyword">import</span> time start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>decr<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>cost<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单线程耗时：'</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#多线</span><span class="token keyword">import</span> threadingstart<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decr<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>decr<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5000000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#主线程阻塞，直到t1执行完成，主线程继续往后执行</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>cost<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'多线程耗时：'</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604b8bae5b911.jpg" alt=""></p><p>（理论上多线程应该不快反慢的，这个结果…可能是因为python3.7对GIL机制进行了优化？）</p><p><strong>导致Python多线程不快反慢的原因：</strong></p><ul><li>在Cpython解释器（Python语言的主流解释器）中，有一把全局解释锁GIL（Global Interpreter Lock）</li><li>同一时刻，只有一个线程在运行，其它线程只能等待，即使是多核CPU，也没有办法让多个线程“并行”地同时执行代码，只能是交替执行，因为多线程涉及到上下文切换、锁机制处理（获取锁、释放锁等），所以，多线程执行不快反慢。</li></ul><p><strong>Python的应对：</strong></p><ul><li>多进程：multiprocessing标准库，让多进程的python程序编写简化到类似多线程的程度</li><li>计算密集性的程序用C代码编写并通过扩展的方式集成到Python脚本里（如NumPy模块）。在扩展里就完全可以用C创建原生线程，而且不用锁GIL</li><li>利用ctypes绕过GIL，让Python通过ctypes直接调用任意的C动态库的导出函数，ctypes会在调用C函数前释放GIL</li><li>更换解释器，如Jython、IronPython等无GIL解释器</li><li>使用python3.4或更高版本（对GIL机制进行了优化）</li><li>科学计算之类需要持续使用CPU的任务时，单线程会比多线程快<br>I- O操作等可能引起阻塞的任务（如爬取）时，多线程会比单线程快（遇到IO阻塞会自动释放GIL锁）<br>3/12/2021 11:54:53 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python网络编程和通信</title>
      <link href="2021/03/11/python-wang-luo-bian-cheng-he-tong-xin/"/>
      <url>2021/03/11/python-wang-luo-bian-cheng-he-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基于SOCKET的网络编程"><a href="#一、基于SOCKET的网络编程" class="headerlink" title="一、基于SOCKET的网络编程"></a>一、基于SOCKET的网络编程</h1><p>套接字：网络中两个应用程序之间通信的端点</p><p><strong>基于套接字的TCPServer的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）将socket绑定到指定地址上<br>（3）准备好套接字，以便接收连接请求<br>（4）通过socket对象方法accept，等待客户请求连接<br>（5）服务器和客户机通过send和recv方法通信（传输数据）<br>（6）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的TCPClient的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）通过socket对象方法connect连接服务器<br>（3）客户机和服务器通过send和recv方法通信（传输数据）<br>（4）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的UDPServer的网络编程一般包括以下基本步骤：</strong><br>（UDP无连接数据包协议）</p><p>（1）创建socket对象<br>（2）将socket绑定到指定地址上<br>（3）服务器和客户机通过send和recv方法通信（传输数据）<br>（4）传输结束，调用socket的close方法以关闭连接</p><p><strong>基于套接字的UDPClient的网络编程一般包括以下基本步骤：</strong></p><p>（1）创建socket对象<br>（2）客户机和服务器通过send和recv方法通信（传输数据）<br>（3）传输结束，调用socket的close方法以关闭连接</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#题目——简单TCP程序：ECHO SERVER</span>基于TCP的Echo Server包括服务器<span class="token operator">/</span>客户机两个部分：服务端应用程序和客户机应用程序。服务端应用程序创建一个socket并绑定到某个IP地址：端口号上，然后侦听listen，并使用阻塞方法accept以等待客户机连接请求；客户机创建一个socket，并建立到服务器的连接；客户机循环接受用户数据并发送数据到服务器，服务器接收数据后回送（Echo）给客户机。客户机输入空数据时，关闭socket并终止运行；服务器接收到空数据时，关闭socket并终止运行。<span class="token comment" spellcheck="true">#服务端应用程序CHATSERVER   TCP</span><span class="token keyword">import</span> socketserversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span>serversocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#开始侦听，队列长度为1</span>clientsocket<span class="token punctuation">,</span>clientaddress<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#使用阻塞方法accept以等待客户机连接请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connection from'</span><span class="token punctuation">,</span>clientaddress<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接受客户机请求后输出客户机的信息</span><span class="token keyword">while</span> <span class="token number">1</span> <span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token operator">=</span>clientsocket<span class="token punctuation">.</span>recy<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span> <span class="token keyword">break</span>    <span class="token comment" spellcheck="true">#接收到空数据时，终止循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received from client:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出接收到的数据，repr函数转换为字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Echo:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出发送到客户机数据的信息</span>    clientsocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回送数据到客户机</span>clientsocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭客户机socket</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#ChatServerUDP.py</span><span class="token keyword">import</span> socketserversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token punctuation">,</span>address<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据，返回数据和客户机地址</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#接收到空数据时，终止循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received from client:'</span><span class="token punctuation">,</span>address<span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出接收到的数据，repr函数转换为字符串</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Echo:'</span><span class="token punctuation">,</span>repr<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出发送到客户机数据的信息</span>    serversocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">,</span>address<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#发送数据到客户机</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#服务器应用程序QUOTESERVER</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>randomquotes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'不妄求，则心安，不妄做，则身安'</span><span class="token punctuation">,</span><span class="token string">'多门之室生风，多言之人生祸'</span><span class="token punctuation">,</span><span class="token string">'人之心胸，多欲则窄，寡欲则宽'</span><span class="token punctuation">,</span><span class="token string">'三人行，必有我师'</span><span class="token punctuation">,</span><span class="token string">'滴水穿石，磨杵成针'</span><span class="token punctuation">,</span><span class="token string">'是非天天有，不听自然无'</span><span class="token punctuation">,</span><span class="token string">'积德为产业，强胜于美宅良田'</span><span class="token punctuation">]</span>serversocket<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>DGRAM<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建服务器socket</span>serversocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8002</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定到IP地址和端口号</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#循环以接收和回送客户机数据</span>    data<span class="token punctuation">,</span>address<span class="token operator">=</span>serversocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#接收数据，返回数据和客户机地址</span>    quote<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>quotes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#从Quotes列表中随机选择一个项目</span>    serversocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>quote<span class="token punctuation">,</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#把数据转换为bytes对象，并发送数据到客户机</span>serversocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭服务器socket</span></code></pre><h1 id="二、基于URLLIB的网络编程"><a href="#二、基于URLLIB的网络编程" class="headerlink" title="二、基于URLLIB的网络编程"></a>二、基于URLLIB的网络编程</h1><ul><li>urllib.request(打开和读取URL）</li><li>urllib.parse(解析URL)</li><li>urllib.error(urllib.request引发的异常)</li><li>urllib.robotparser(解析robots.txt文件)</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Request对象示例</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestf<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#打开URL资源</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取200个字节，返回bytes对象并输出</span>f<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#重新打开URL资源</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取200个字节，返回bytes对象，转换为字符串并输出</span><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#重新打开URL资源</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>'utf<span class="token number">-8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读取返回bytes对象转换为字符串并输出</span></code></pre><p><strong>网站文件robots.txt</strong>(“robots协议”，并非规范，只是约定俗成的，并不能保证网站的隐私)：</p><p>告诉网络爬虫爬取该网站时存在哪些限制：存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">/</span><span class="token operator">*</span>创建REQUEST对象urllib<span class="token punctuation">.</span>request模块中Request对象的构造函数如下<span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>None<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> origin_req_host<span class="token operator">=</span>None<span class="token punctuation">,</span> unverifiable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> method<span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">def</span> <span class="token function">getURLInfo</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    req<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建Request对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Full url:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>full_url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#URL</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Host:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>host<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#主机和端口号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Data:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#向服务器传送的数据</span><span class="token comment" spellcheck="true">#测试代码</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://www.baidu.com/s'</span>    values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">}</span>    data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>values<span class="token punctuation">)</span>    data<span class="token operator">=</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF8'</span><span class="token punctuation">)</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0(compatible;MSIE 5.5;Windows NT)'</span><span class="token punctuation">}</span>    getURLInfo<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>headers<span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604a3a405d054.jpg" alt=""></p><h1 id="三、基于HTTP的网络编程"><a href="#三、基于HTTP的网络编程" class="headerlink" title="三、基于HTTP的网络编程"></a>三、基于HTTP的网络编程</h1><ul><li>http.client （低级别的HTTP协议客户端，高级别的URL打开则使用urllib.request）</li><li>http.server （基于socketserver的HTTP服务器类）</li><li>http.cookies （使用cookies实现状态管理的工具）</li><li>http.cookiejar （提供cookies的持久性）</li></ul><h1 id="四、基于FTPLIB的网络编程"><a href="#四、基于FTPLIB的网络编程" class="headerlink" title="四、基于FTPLIB的网络编程"></a>四、基于FTPLIB的网络编程</h1><ul><li>创建FTP对象</li><li>创建FTP_TLS对象 （传输层安全协议）</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建FTP对象示例</span><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTPftp<span class="token operator">=</span>FTP<span class="token punctuation">(</span><span class="token string">"ftp 1.at.proftpd.org"</span><span class="token punctuation">)</span>ftp<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#无参数则匿名登录</span>ftp<span class="token punctuation">.</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#罗列目录</span>ftp<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token string">'devel'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#切换当前目录</span>ftp<span class="token punctuation">.</span>dir<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建FTP_TLS对象</span><span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTP_TLSftps<span class="token operator">=</span>FTP_TLS<span class="token punctuation">(</span><span class="token string">'ftp.python.org'</span><span class="token punctuation">)</span>ftps<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#匿名登录安全控制通道</span>ftps<span class="token punctuation">.</span>prot_p<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#安全数据连接（加密传输）</span>ftps<span class="token punctuation">.</span>retrlines<span class="token punctuation">(</span><span class="token string">'LIST'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#罗列目录清单</span>ftps<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#退出</span></code></pre><h1 id="五、基于POPLIB和SMTPLIB的网络编程"><a href="#五、基于POPLIB和SMTPLIB的网络编程" class="headerlink" title="五、基于POPLIB和SMTPLIB的网络编程"></a>五、基于POPLIB和SMTPLIB的网络编程</h1><ul><li>poplib模块提供了对POP3协议的支持</li><li>smtplib模块提供了对SMTP协议的支持</li><li>使用poplib和smtplib，可以实现接收和发送邮件的功能</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#POP3示例</span><span class="token keyword">import</span> getpass<span class="token punctuation">,</span>poplibhost<span class="token operator">=</span><span class="token string">'YourPop3Host'</span>    <span class="token comment" spellcheck="true">#POP3服务器的主机名或IP地址，运行时需修改为对应的值</span>port<span class="token operator">=</span><span class="token number">110</span>    <span class="token comment" spellcheck="true">#POP3服务器的端口号，默认为110，运行时需修改为对应的值</span>pop3<span class="token operator">=</span>poplib<span class="token punctuation">.</span>POP3<span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#创建POP3对象</span>pop3<span class="token punctuation">.</span>user<span class="token punctuation">(</span>getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用户名</span>pop3<span class="token punctuation">.</span>pass_<span class="token punctuation">(</span>getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#密码</span>numMessages<span class="token operator">=</span>len<span class="token punctuation">(</span>pop3<span class="token punctuation">.</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#邮件数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>numMessages<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#接收邮件</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> pop3<span class="token punctuation">.</span>retr<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#SMTP示例</span><span class="token keyword">import</span> smtplib<span class="token keyword">def</span> <span class="token function">prompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>fromaddr<span class="token operator">=</span>prompt<span class="token punctuation">(</span><span class="token string">"From: "</span><span class="token punctuation">)</span>tpaddrs<span class="token operator">=</span>prompt<span class="token punctuation">(</span><span class="token string">"To: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入信息，^D(Unix) or ^Z(Windows)结束输入："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加From: 和 To: 头信息</span>msg<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"From: %s\r\nTo: %s\r\n\r\n"</span><span class="token operator">%</span><span class="token punctuation">(</span>fromaddr <span class="token string">"."</span> join<span class="token punctuation">(</span>toaddrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        line<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>        <span class="token keyword">break</span>    msg<span class="token operator">=</span>msg<span class="token operator">+</span>line<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"信息长度为："</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token operator">=</span>smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>set_debuglevel<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>fromaddr<span class="token punctuation">,</span>toaddrs<span class="token punctuation">,</span>msg<span class="token punctuation">)</span>server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/11/2021 11:51:54 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PYTHON数据库访问</title>
      <link href="2021/03/10/python-shu-ju-ku-fang-wen/"/>
      <url>2021/03/10/python-shu-ju-ku-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Python数据库访问模块"><a href="#一、Python数据库访问模块" class="headerlink" title="一、Python数据库访问模块"></a>一、Python数据库访问模块</h1><p><strong>通用数据库访问模块：ODBC&amp;JDBC</strong></p><ul><li>ODBC Interface: PythonWin附带</li><li>pyodbc: 开源，完整实现DB-API2.0</li><li>mxPDBS: 付费，部分实现DB-API2.0</li><li>zxJDBC: Jython2.1+包含</li></ul><p><strong>专用数据库访问模块</strong></p><ul><li>MySQL: MySQL-python(MySQLdb，过时)、mysqlclient、pymysql、sqlalchemy(ORM框架，Web编程）</li><li>PostgreSQL: PyGreSQL</li><li>Oracle: DCOracle2</li><li>SQLServer: pymssql<h1 id="二、SQLite数据库"><a href="#二、SQLite数据库" class="headerlink" title="二、SQLite数据库"></a>二、SQLite数据库</h1>SQLite是一款开源的轻型的数据库</li><li>简单、资源低占用</li><li>实现了大部分SQL-92标准</li><li>无类型检查，适用于脚本语言</li><li>整个SQLite数据库存于一个文件<br>  SQLite支持的数据类型包括：NULL、INTEGER、REAL、TEXT和BLOB，分别对应Python的数据类型：None、int、float、str和bytes</li></ul><p><strong>sqlite3模块</strong><br>C实现，提供访问和操作SQLite数据库的各种功能<br>sqlite3模块：</p><ul><li>sqlite3.version    #常量</li><li>sqlite3.connect(database)    #函数，返回Connect对象</li><li>sqlite3.Connect    #数据库连接对象</li><li>sqlite3.Cursor    #游标对象</li><li>sqlite3.Row    #行对象<h1 id="三、连接和操作SQLITE数据库"><a href="#三、连接和操作SQLITE数据库" class="headerlink" title="三、连接和操作SQLITE数据库"></a>三、连接和操作SQLITE数据库</h1>Python访问数据库的典型步骤：</li></ul><ol><li>导入相应的数据库模块</li><li>建立数据库连接，返回Connection对象</li></ol><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>r<span class="token string">"c:\python\sales.db"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r是对字符'\'转义</span>con<span class="token operator">=</span>pymsql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#服务器端数据库的连接</span></code></pre><ol start="3"><li>创建游标对象cur</li><li>使用Cursor对象得到execute执行SQL命令返回结果<br>（建议直接使用Connection对象的execute方法，返回Cursor对象）</li></ol><pre class=" language-python"><code class="language-python">cur<span class="token operator">=</span>con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select id,name from region"</span><span class="token punctuation">)</span>regions<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"021"</span><span class="token punctuation">,</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"022"</span><span class="token punctuation">,</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"023"</span><span class="token punctuation">,</span><span class="token string">"重庆"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"024"</span><span class="token punctuation">,</span><span class="token string">"沈阳"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>con<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"insert into region(id,name) values(?,?)"</span><span class="token punctuation">,</span>regions<span class="token punctuation">)</span></code></pre><ol start="5"><li>获取游标的查询结果集Cursor.fetch()</li></ol><pre class=" language-python"><code class="language-python">cor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的下一行(Row对象)，或None</span>cor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的剩余行(Row对象列表)，或空表</span>cor<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回结果集的多行(Row对象列表)，或空表</span>cor<span class="token punctuation">.</span>rowcount    <span class="token comment" spellcheck="true">#执行sql命令实际影响的行数</span></code></pre><p>Row对象r为一行查询结果序列，支持以下访问</p><pre class=" language-python"><code class="language-python">r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#按索引访问，返回第i列数据</span>r<span class="token punctuation">[</span>colname<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#按列名访问，返回colname列数据</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回列数</span>r<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#返回列名列表</span><span class="token comment" spellcheck="true">#应用</span><span class="token keyword">for</span> r <span class="token keyword">in</span> con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select id,name from region"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="6"><li>数据库的提交和回滚</li></ol><pre class=" language-python"><code class="language-python">con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提交</span>con<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#回滚</span></code></pre><ol start="7"><li>关闭Cursor对象和Connection对象</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#cur.close()    #关闭游标</span><span class="token comment" spellcheck="true">#con.close()    #关闭数据库</span>r<span class="token operator">=</span>con<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"delete from region where id=?"</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token string">"024"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>rowcount<span class="token punctuation">,</span><span class="token string">'行记录'</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#提交</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#关闭数据库</span></code></pre><h1 id="四、PYTHON使用MYSQL数据库"><a href="#四、PYTHON使用MYSQL数据库" class="headerlink" title="四、PYTHON使用MYSQL数据库"></a>四、PYTHON使用MYSQL数据库</h1><p>要使用Python操作MySQL，首先需要安装MySQL-Python的包，可用pip方式安装：pip install MySQLClient。<br>启动MySQL服务器：以管理员身份启动cmd，输入命令：net start mysql<br>Python中使用MySQL: import MySQLdb<br>创建Connection</p><pre class=" language-python"><code class="language-python">con<span class="token operator">=</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span></code></pre><p>Connection支持的方法：</p><ul><li>cursor()    #创建并返回游标</li><li>commit()    #提交当前事务</li><li>rollback()    #回滚当前事务</li><li>close()    #关闭Connection</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#MySQL示例</span>conn<span class="token operator">=</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>post<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test1'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""create table if not EXISTS user(userid int(11) PRIMARY KEY,username VARCHAR(20))"""</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into user(userid,username) values('%d','%s')"</span><span class="token operator">%</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'update user set username="name91" where userid=9'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>rowcount<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3/10/2021 11:31:38 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数值、日期和时间处理</title>
      <link href="2021/03/10/shu-zhi-ri-qi-he-shi-jian-chu-li/"/>
      <url>2021/03/10/shu-zhi-ri-qi-he-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1、相关模块概述"><a href="#1、相关模块概述" class="headerlink" title="1、相关模块概述"></a>1、相关模块概述</h1><h2 id="1-数值处理的相关模块"><a href="#1-数值处理的相关模块" class="headerlink" title="1.数值处理的相关模块"></a>1.数值处理的相关模块</h2><h3 id="（1）Python标准款中包括下列数值处理相关模块"><a href="#（1）Python标准款中包括下列数值处理相关模块" class="headerlink" title="（1）Python标准款中包括下列数值处理相关模块"></a>（1）Python标准款中包括下列数值处理相关模块</h3><ul><li>numbers模块：数值抽象类。包含类Complex、Real、Rational、Integral。</li><li>math模块：数学函数</li><li>cmath模块：复数运算数学函数</li><li>decimal模块：高精度数值运算</li><li>fractions模块：分数运算模块</li><li>random模块：随机数模块<br><img src="https://www.hualigs.cn/image/6048d9b722e3a.jpg" alt=""></li></ul><h3 id="（2）数值运算模块Numpy。"><a href="#（2）数值运算模块Numpy。" class="headerlink" title="（2）数值运算模块Numpy。"></a>（2）数值运算模块Numpy。</h3><p>Numpy模块主要提供数组和矩阵处理功能，还包括高级功能，如傅里叶变换等。</p><h3 id="（3）科学计算模块SciPy。"><a href="#（3）科学计算模块SciPy。" class="headerlink" title="（3）科学计算模块SciPy。"></a>（3）科学计算模块SciPy。</h3><p>SciPy模块包括统计、优化、整合、线性代数、傅里叶变换、信号和图像处理、常微分方程求解器等功能。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#random应用</span><span class="token comment" spellcheck="true">#随机生成扑克牌的四手牌（4个人的牌局，每手牌13张）</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#一副牌：Club（梅花）、Diamond（方块）、Heart（红桃）、Spade（黑桃）</span>cards<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2C'</span><span class="token punctuation">,</span><span class="token string">'3C'</span><span class="token punctuation">,</span><span class="token string">'4C'</span><span class="token punctuation">,</span><span class="token string">'5C'</span><span class="token punctuation">,</span><span class="token string">'6C'</span><span class="token punctuation">,</span><span class="token string">'7C'</span><span class="token punctuation">,</span><span class="token string">'8C'</span><span class="token punctuation">,</span><span class="token string">'9C'</span><span class="token punctuation">,</span><span class="token string">'10C'</span><span class="token punctuation">,</span><span class="token string">'JC'</span><span class="token punctuation">,</span><span class="token string">'QC'</span><span class="token punctuation">,</span><span class="token string">'KC'</span><span class="token punctuation">,</span><span class="token string">'AC'</span><span class="token punctuation">,</span>       <span class="token string">'2D'</span><span class="token punctuation">,</span><span class="token string">'3C'</span><span class="token punctuation">,</span><span class="token string">'4D'</span><span class="token punctuation">,</span><span class="token string">'5D'</span><span class="token punctuation">,</span><span class="token string">'6D'</span><span class="token punctuation">,</span><span class="token string">'7D'</span><span class="token punctuation">,</span><span class="token string">'8D'</span><span class="token punctuation">,</span><span class="token string">'9D'</span><span class="token punctuation">,</span><span class="token string">'10D'</span><span class="token punctuation">,</span><span class="token string">'JD'</span><span class="token punctuation">,</span><span class="token string">'QD'</span><span class="token punctuation">,</span><span class="token string">'KD'</span><span class="token punctuation">,</span><span class="token string">'AD'</span><span class="token punctuation">,</span>       <span class="token string">'2H'</span><span class="token punctuation">,</span><span class="token string">'3H'</span><span class="token punctuation">,</span><span class="token string">'4H'</span><span class="token punctuation">,</span><span class="token string">'5H'</span><span class="token punctuation">,</span><span class="token string">'6H'</span><span class="token punctuation">,</span><span class="token string">'7H'</span><span class="token punctuation">,</span><span class="token string">'8H'</span><span class="token punctuation">,</span><span class="token string">'9H'</span><span class="token punctuation">,</span><span class="token string">'10H'</span><span class="token punctuation">,</span><span class="token string">'JH'</span><span class="token punctuation">,</span><span class="token string">'QH'</span><span class="token punctuation">,</span><span class="token string">'KH'</span><span class="token punctuation">,</span><span class="token string">'AH'</span><span class="token punctuation">,</span>       <span class="token string">'2S'</span><span class="token punctuation">,</span><span class="token string">'3S'</span><span class="token punctuation">,</span><span class="token string">'4S'</span><span class="token punctuation">,</span><span class="token string">'5S'</span><span class="token punctuation">,</span><span class="token string">'6S'</span><span class="token punctuation">,</span><span class="token string">'7S'</span><span class="token punctuation">,</span><span class="token string">'8S'</span><span class="token punctuation">,</span><span class="token string">'9S'</span><span class="token punctuation">,</span><span class="token string">'10S'</span><span class="token punctuation">,</span><span class="token string">'JS'</span><span class="token punctuation">,</span><span class="token string">'QS'</span><span class="token punctuation">,</span><span class="token string">'KS'</span><span class="token punctuation">,</span><span class="token string">'AS'</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>cards<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#混排，洗牌</span>deck1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>deck4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#初始化四手牌</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#发牌</span>    deck1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    deck4<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cards<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>deck4<span class="token punctuation">)</span>       </code></pre><h2 id="2-数值运算模块NUMPY"><a href="#2-数值运算模块NUMPY" class="headerlink" title="2.数值运算模块NUMPY"></a>2.数值运算模块NUMPY</h2><h3 id="（1）创建数组"><a href="#（1）创建数组" class="headerlink" title="（1）创建数组"></a>（1）创建数组</h3><p>（1）通过array函数，把序列对象参数转化为数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token operator">=</span>mp<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>（2）通过arrange、linspace和logspace函数创建数组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#从start到stop，2为步长</span>b<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#从0到2pi，创建长度为10的等差数列数组</span>c<span class="token operator">=</span>np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#等比数列</span></code></pre><p><img src="https://www.hualigs.cn/image/6048d9b14717c.jpg" alt=""></p><h3 id="（2）数组应用"><a href="#（2）数组应用" class="headerlink" title="（2）数组应用"></a>（2）数组应用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制正弦余弦函数图形</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token keyword">import</span> mathx<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y1<span class="token operator">=</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y2<span class="token operator">=</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/6048d9b12e910.jpg" alt="">                                       </p><h1 id="2、日期和时间处理概述"><a href="#2、日期和时间处理概述" class="headerlink" title="2、日期和时间处理概述"></a>2、日期和时间处理概述</h1><ul><li><p>datetime模块：日期和时间类</p></li><li><p>calendar模块：日历函数和类</p></li><li><p>time模块：时间函数</p><h2 id="1-DATETIME模块"><a href="#1-DATETIME模块" class="headerlink" title="1.DATETIME模块"></a>1.DATETIME模块</h2></li><li><p>两个常量：datetime.MINTEAR(1)和datetime.MAXYEAR(9999)</p></li><li><p>获取当前日期时间<br>  通过datetime模块的date.today()函数可以返回表示当前日期的date对象，通过其实例对象方法，可以获取其年、月、日等信息</p><p>  通过datime模块的datetime.now()函数可以返回表示当前日期时间的datetime对象，通过其实例对象方法，可以获取其年、月、日、时、分、秒等信息</p><h2 id="2-time模块"><a href="#2-time模块" class="headerlink" title="2.time模块"></a>2.time模块</h2></li><li><p>time模块中的strftime()函数将struct_time对象格式化为字符串</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#日期时间格式化为字符串示例</span><span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">print</span><span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y{y}%m{m}%d{d}%H{h}%M{f}%S{s}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token string">'年'</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token string">'月'</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token string">'日'</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token string">'时'</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token string">'分'</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">'秒'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>time模块中的strptime()函数将时间字符串解析为struct_time对象</p></li></ul><h1 id="3、字符串和文本处理的相关模块"><a href="#3、字符串和文本处理的相关模块" class="headerlink" title="3、字符串和文本处理的相关模块"></a>3、字符串和文本处理的相关模块</h1><ul><li>string模块：包含若干字符集常量，其处理字符串的函数已经被字符串对象的方法替代</li><li>re模块：正则表达式处理</li><li>codecs模块：字符编码处理</li><li>difflib模块：比较字符串列表的差异</li><li>gettext模块：语言国际化</li><li>textwrap模块：格式化文本段落</li><li>unicodedata模块：Unicode字符库<br>3/10/2021 10:56:22 PM </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于MATOLOTLIB模块的绘图</title>
      <link href="2021/03/09/ji-yu-matolotlib-mo-kuai-de-hui-tu/"/>
      <url>2021/03/09/ji-yu-matolotlib-mo-kuai-de-hui-tu/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib是一套面向对象的绘图库，其绘制的图表中的每个绘图元素（例如线条、文字、刻度等）都是对象</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制x轴坐标值为0、1、2、3、4，所对应的y轴坐标值为1、2、5、6、8的折线图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'some numbers'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/60476819d3dd7.jpg" alt=""></p><p>plot()函数</p><ul><li>plot(x,y,’bo’)    #用蓝色，小圆点标记</li></ul><ul><li>plot(y)    #改变纵轴坐标数值，横轴默认0,1,2……</li></ul><ul><li>plot(x1,y1,’g^’,x2,y2,’g-o’)    #使用多个x,y,format对作变量，把它们画在一个图里，格式串也可改为color=’green’,linestyle=’dashen’,marker=’o’。</li></ul><p>subplot(numRows,numCols,plotNum)快速绘制包含多个子图的图表，左上的子区域的编号为1，若numRows, numCols和plotNum这三个数都小于10的话，可缩写为一个整数，例如subplot(323)等价于subplot(3,2,3)，subplot在plotNum指定的区域中创建一个轴对象。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用Matplotlib模块绘制y=sin(x)的函数曲线</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> mathx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>math<span class="token punctuation">.</span>pi<span class="token operator">*</span>i<span class="token operator">/</span><span class="token number">100</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc6bfb2.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#利用NumPy模块和Matplotlib.pyplot工具包绘制y=e^-x*cos(2*pi*x)以及y=cos(2*pi*x)的函数曲线</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>t<span class="token punctuation">)</span>t1<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span>t2<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">211</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t1<span class="token punctuation">,</span>f<span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'bo'</span><span class="token punctuation">,</span>t2<span class="token punctuation">,</span>f<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">212</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t2<span class="token punctuation">,</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'r--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc3b957.jpg" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#随机生成满足mu为100、sigma为20的正态分布数据，并绘制其直方图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np mu<span class="token punctuation">,</span>sigma<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span>x<span class="token operator">=</span>mu<span class="token operator">+</span>sigma<span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>density<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制直方图</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'IQ'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#绘制坐标等信息</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Probability'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Histogram of IQ'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置坐标和网格</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/604764dc6e394.jpg" alt=""><br>                                      ​<br>3/9/2021 8:23:59 PM </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你好 CODING</title>
      <link href="2021/03/04/hello-world/"/>
      <url>2021/03/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎使用 <a href="https://help.coding.net/docs/cd/static-website-v2.html" target="_blank" rel="noopener">CODING DevOps 静态网站</a> 部署 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 应用！<br>您可以到这里查看更多的 Hexo 的 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>。</p><p>这是你的第一篇文章。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>相关帮助: <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">写作</a></p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>相关帮助: <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="部署到线上"><a href="#部署到线上" class="headerlink" title="部署到线上"></a>部署到线上</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> add <span class="token keyword">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">'new post'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
